// Code generated by protoc-gen-go. DO NOT EDIT.
// source: serverCo_sys.proto

package serverCo

import (
	context "context"
	fmt "fmt"
	tars "github.com/TarsCloud/TarsGo/tars"
	model "github.com/TarsCloud/TarsGo/tars/model"
	requestf "github.com/TarsCloud/TarsGo/tars/protocol/res/requestf"
	current "github.com/TarsCloud/TarsGo/tars/util/current"
	tools "github.com/TarsCloud/TarsGo/tars/util/tools"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ResultEmpty struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ResultEmpty) Reset()         { *m = ResultEmpty{} }
func (m *ResultEmpty) String() string { return proto.CompactTextString(m) }
func (*ResultEmpty) ProtoMessage()    {}
func (*ResultEmpty) Descriptor() ([]byte, []int) {
	return fileDescriptor_829ee3766b824c5c, []int{0}
}

func (m *ResultEmpty) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResultEmpty.Unmarshal(m, b)
}
func (m *ResultEmpty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResultEmpty.Marshal(b, m, deterministic)
}
func (m *ResultEmpty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResultEmpty.Merge(m, src)
}
func (m *ResultEmpty) XXX_Size() int {
	return xxx_messageInfo_ResultEmpty.Size(m)
}
func (m *ResultEmpty) XXX_DiscardUnknown() {
	xxx_messageInfo_ResultEmpty.DiscardUnknown(m)
}

var xxx_messageInfo_ResultEmpty proto.InternalMessageInfo

// TODO: 公共部分  -----------------------------------------------------------
// 分页
type PageInfo struct {
	Page                 int32    `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	PageSize             int32    `protobuf:"varint,2,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
	OrderKey             string   `protobuf:"bytes,3,opt,name=orderKey,proto3" json:"orderKey,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PageInfo) Reset()         { *m = PageInfo{} }
func (m *PageInfo) String() string { return proto.CompactTextString(m) }
func (*PageInfo) ProtoMessage()    {}
func (*PageInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_829ee3766b824c5c, []int{1}
}

func (m *PageInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PageInfo.Unmarshal(m, b)
}
func (m *PageInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PageInfo.Marshal(b, m, deterministic)
}
func (m *PageInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PageInfo.Merge(m, src)
}
func (m *PageInfo) XXX_Size() int {
	return xxx_messageInfo_PageInfo.Size(m)
}
func (m *PageInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_PageInfo.DiscardUnknown(m)
}

var xxx_messageInfo_PageInfo proto.InternalMessageInfo

func (m *PageInfo) GetPage() int32 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *PageInfo) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *PageInfo) GetOrderKey() string {
	if m != nil {
		return m.OrderKey
	}
	return ""
}

// 默认输出
type Result struct {
	Code                 int32             `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg                  string            `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Header               map[string]string `protobuf:"bytes,3,rep,name=header,proto3" json:"header,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Body                 []byte            `protobuf:"bytes,4,opt,name=body,proto3" json:"body,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *Result) Reset()         { *m = Result{} }
func (m *Result) String() string { return proto.CompactTextString(m) }
func (*Result) ProtoMessage()    {}
func (*Result) Descriptor() ([]byte, []int) {
	return fileDescriptor_829ee3766b824c5c, []int{2}
}

func (m *Result) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Result.Unmarshal(m, b)
}
func (m *Result) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Result.Marshal(b, m, deterministic)
}
func (m *Result) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Result.Merge(m, src)
}
func (m *Result) XXX_Size() int {
	return xxx_messageInfo_Result.Size(m)
}
func (m *Result) XXX_DiscardUnknown() {
	xxx_messageInfo_Result.DiscardUnknown(m)
}

var xxx_messageInfo_Result proto.InternalMessageInfo

func (m *Result) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *Result) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *Result) GetHeader() map[string]string {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *Result) GetBody() []byte {
	if m != nil {
		return m.Body
	}
	return nil
}

// ID
type ReqId struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqId) Reset()         { *m = ReqId{} }
func (m *ReqId) String() string { return proto.CompactTextString(m) }
func (*ReqId) ProtoMessage()    {}
func (*ReqId) Descriptor() ([]byte, []int) {
	return fileDescriptor_829ee3766b824c5c, []int{3}
}

func (m *ReqId) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReqId.Unmarshal(m, b)
}
func (m *ReqId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReqId.Marshal(b, m, deterministic)
}
func (m *ReqId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqId.Merge(m, src)
}
func (m *ReqId) XXX_Size() int {
	return xxx_messageInfo_ReqId.Size(m)
}
func (m *ReqId) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqId.DiscardUnknown(m)
}

var xxx_messageInfo_ReqId proto.InternalMessageInfo

func (m *ReqId) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

// TODO: Mongo 数据库部分 -----------------------------------------------------------
// TODO: 企业分类及类目
// co_type 企业分类 大类
type CoType struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	CreatedAt            int32    `protobuf:"varint,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt            int32    `protobuf:"varint,3,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	Pid                  int64    `protobuf:"varint,4,opt,name=pid,proto3" json:"pid,omitempty"`
	Name                 string   `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	State                int32    `protobuf:"varint,6,opt,name=state,proto3" json:"state,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CoType) Reset()         { *m = CoType{} }
func (m *CoType) String() string { return proto.CompactTextString(m) }
func (*CoType) ProtoMessage()    {}
func (*CoType) Descriptor() ([]byte, []int) {
	return fileDescriptor_829ee3766b824c5c, []int{4}
}

func (m *CoType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CoType.Unmarshal(m, b)
}
func (m *CoType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CoType.Marshal(b, m, deterministic)
}
func (m *CoType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CoType.Merge(m, src)
}
func (m *CoType) XXX_Size() int {
	return xxx_messageInfo_CoType.Size(m)
}
func (m *CoType) XXX_DiscardUnknown() {
	xxx_messageInfo_CoType.DiscardUnknown(m)
}

var xxx_messageInfo_CoType proto.InternalMessageInfo

func (m *CoType) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *CoType) GetCreatedAt() int32 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *CoType) GetUpdatedAt() int32 {
	if m != nil {
		return m.UpdatedAt
	}
	return 0
}

func (m *CoType) GetPid() int64 {
	if m != nil {
		return m.Pid
	}
	return 0
}

func (m *CoType) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CoType) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

type CoTypeSimple struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Pid                  int64    `protobuf:"varint,4,opt,name=pid,proto3" json:"pid,omitempty"`
	Name                 string   `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CoTypeSimple) Reset()         { *m = CoTypeSimple{} }
func (m *CoTypeSimple) String() string { return proto.CompactTextString(m) }
func (*CoTypeSimple) ProtoMessage()    {}
func (*CoTypeSimple) Descriptor() ([]byte, []int) {
	return fileDescriptor_829ee3766b824c5c, []int{5}
}

func (m *CoTypeSimple) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CoTypeSimple.Unmarshal(m, b)
}
func (m *CoTypeSimple) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CoTypeSimple.Marshal(b, m, deterministic)
}
func (m *CoTypeSimple) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CoTypeSimple.Merge(m, src)
}
func (m *CoTypeSimple) XXX_Size() int {
	return xxx_messageInfo_CoTypeSimple.Size(m)
}
func (m *CoTypeSimple) XXX_DiscardUnknown() {
	xxx_messageInfo_CoTypeSimple.DiscardUnknown(m)
}

var xxx_messageInfo_CoTypeSimple proto.InternalMessageInfo

func (m *CoTypeSimple) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *CoTypeSimple) GetPid() int64 {
	if m != nil {
		return m.Pid
	}
	return 0
}

func (m *CoTypeSimple) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type ResCoType struct {
	List                 []*CoType `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	Count                int32     `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *ResCoType) Reset()         { *m = ResCoType{} }
func (m *ResCoType) String() string { return proto.CompactTextString(m) }
func (*ResCoType) ProtoMessage()    {}
func (*ResCoType) Descriptor() ([]byte, []int) {
	return fileDescriptor_829ee3766b824c5c, []int{6}
}

func (m *ResCoType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResCoType.Unmarshal(m, b)
}
func (m *ResCoType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResCoType.Marshal(b, m, deterministic)
}
func (m *ResCoType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResCoType.Merge(m, src)
}
func (m *ResCoType) XXX_Size() int {
	return xxx_messageInfo_ResCoType.Size(m)
}
func (m *ResCoType) XXX_DiscardUnknown() {
	xxx_messageInfo_ResCoType.DiscardUnknown(m)
}

var xxx_messageInfo_ResCoType proto.InternalMessageInfo

func (m *ResCoType) GetList() []*CoType {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *ResCoType) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

// TODO: 企业绑定关系
// co_sys_binding 企业绑定关系
type CoSysBinding struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	CreatedAt            int32    `protobuf:"varint,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt            int32    `protobuf:"varint,3,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	Type                 int32    `protobuf:"varint,4,opt,name=type,proto3" json:"type,omitempty"`
	TypeId               int64    `protobuf:"varint,5,opt,name=type_id,json=typeId,proto3" json:"type_id,omitempty"`
	List                 []int64  `protobuf:"varint,7,rep,packed,name=list,proto3" json:"list,omitempty"`
	Count                int32    `protobuf:"varint,8,opt,name=count,proto3" json:"count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CoSysBinding) Reset()         { *m = CoSysBinding{} }
func (m *CoSysBinding) String() string { return proto.CompactTextString(m) }
func (*CoSysBinding) ProtoMessage()    {}
func (*CoSysBinding) Descriptor() ([]byte, []int) {
	return fileDescriptor_829ee3766b824c5c, []int{7}
}

func (m *CoSysBinding) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CoSysBinding.Unmarshal(m, b)
}
func (m *CoSysBinding) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CoSysBinding.Marshal(b, m, deterministic)
}
func (m *CoSysBinding) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CoSysBinding.Merge(m, src)
}
func (m *CoSysBinding) XXX_Size() int {
	return xxx_messageInfo_CoSysBinding.Size(m)
}
func (m *CoSysBinding) XXX_DiscardUnknown() {
	xxx_messageInfo_CoSysBinding.DiscardUnknown(m)
}

var xxx_messageInfo_CoSysBinding proto.InternalMessageInfo

func (m *CoSysBinding) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *CoSysBinding) GetCreatedAt() int32 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *CoSysBinding) GetUpdatedAt() int32 {
	if m != nil {
		return m.UpdatedAt
	}
	return 0
}

func (m *CoSysBinding) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *CoSysBinding) GetTypeId() int64 {
	if m != nil {
		return m.TypeId
	}
	return 0
}

func (m *CoSysBinding) GetList() []int64 {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *CoSysBinding) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

type ResCoSysBinding struct {
	List                 []*CoSysBinding `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	Count                int32           `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *ResCoSysBinding) Reset()         { *m = ResCoSysBinding{} }
func (m *ResCoSysBinding) String() string { return proto.CompactTextString(m) }
func (*ResCoSysBinding) ProtoMessage()    {}
func (*ResCoSysBinding) Descriptor() ([]byte, []int) {
	return fileDescriptor_829ee3766b824c5c, []int{8}
}

func (m *ResCoSysBinding) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResCoSysBinding.Unmarshal(m, b)
}
func (m *ResCoSysBinding) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResCoSysBinding.Marshal(b, m, deterministic)
}
func (m *ResCoSysBinding) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResCoSysBinding.Merge(m, src)
}
func (m *ResCoSysBinding) XXX_Size() int {
	return xxx_messageInfo_ResCoSysBinding.Size(m)
}
func (m *ResCoSysBinding) XXX_DiscardUnknown() {
	xxx_messageInfo_ResCoSysBinding.DiscardUnknown(m)
}

var xxx_messageInfo_ResCoSysBinding proto.InternalMessageInfo

func (m *ResCoSysBinding) GetList() []*CoSysBinding {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *ResCoSysBinding) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

// co_sys_binding 企业绑定关系 - VIP 购买指定
type CoSysBindingVip struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Type                 int32    `protobuf:"varint,4,opt,name=type,proto3" json:"type,omitempty"`
	TypeId               int64    `protobuf:"varint,5,opt,name=type_id,json=typeId,proto3" json:"type_id,omitempty"`
	LimitId              int64    `protobuf:"varint,6,opt,name=limit_id,json=limitId,proto3" json:"limit_id,omitempty"`
	VipId                []int64  `protobuf:"varint,7,rep,packed,name=vip_id,json=vipId,proto3" json:"vip_id,omitempty"`
	VipName              []string `protobuf:"bytes,8,rep,name=vip_name,json=vipName,proto3" json:"vip_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CoSysBindingVip) Reset()         { *m = CoSysBindingVip{} }
func (m *CoSysBindingVip) String() string { return proto.CompactTextString(m) }
func (*CoSysBindingVip) ProtoMessage()    {}
func (*CoSysBindingVip) Descriptor() ([]byte, []int) {
	return fileDescriptor_829ee3766b824c5c, []int{9}
}

func (m *CoSysBindingVip) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CoSysBindingVip.Unmarshal(m, b)
}
func (m *CoSysBindingVip) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CoSysBindingVip.Marshal(b, m, deterministic)
}
func (m *CoSysBindingVip) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CoSysBindingVip.Merge(m, src)
}
func (m *CoSysBindingVip) XXX_Size() int {
	return xxx_messageInfo_CoSysBindingVip.Size(m)
}
func (m *CoSysBindingVip) XXX_DiscardUnknown() {
	xxx_messageInfo_CoSysBindingVip.DiscardUnknown(m)
}

var xxx_messageInfo_CoSysBindingVip proto.InternalMessageInfo

func (m *CoSysBindingVip) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *CoSysBindingVip) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *CoSysBindingVip) GetTypeId() int64 {
	if m != nil {
		return m.TypeId
	}
	return 0
}

func (m *CoSysBindingVip) GetLimitId() int64 {
	if m != nil {
		return m.LimitId
	}
	return 0
}

func (m *CoSysBindingVip) GetVipId() []int64 {
	if m != nil {
		return m.VipId
	}
	return nil
}

func (m *CoSysBindingVip) GetVipName() []string {
	if m != nil {
		return m.VipName
	}
	return nil
}

type ResCoSysBindingVip struct {
	List                 []*CoSysBindingVip `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	Count                int32              `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *ResCoSysBindingVip) Reset()         { *m = ResCoSysBindingVip{} }
func (m *ResCoSysBindingVip) String() string { return proto.CompactTextString(m) }
func (*ResCoSysBindingVip) ProtoMessage()    {}
func (*ResCoSysBindingVip) Descriptor() ([]byte, []int) {
	return fileDescriptor_829ee3766b824c5c, []int{10}
}

func (m *ResCoSysBindingVip) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResCoSysBindingVip.Unmarshal(m, b)
}
func (m *ResCoSysBindingVip) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResCoSysBindingVip.Marshal(b, m, deterministic)
}
func (m *ResCoSysBindingVip) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResCoSysBindingVip.Merge(m, src)
}
func (m *ResCoSysBindingVip) XXX_Size() int {
	return xxx_messageInfo_ResCoSysBindingVip.Size(m)
}
func (m *ResCoSysBindingVip) XXX_DiscardUnknown() {
	xxx_messageInfo_ResCoSysBindingVip.DiscardUnknown(m)
}

var xxx_messageInfo_ResCoSysBindingVip proto.InternalMessageInfo

func (m *ResCoSysBindingVip) GetList() []*CoSysBindingVip {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *ResCoSysBindingVip) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

// TODO: 企业菜单权限管理
// co_menu Menu 数据结构
type CoMenu struct {
	Id                   int64     `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	CreatedAt            int32     `protobuf:"varint,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt            int32     `protobuf:"varint,3,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	Pid                  int64     `protobuf:"varint,4,opt,name=pid,proto3" json:"pid,omitempty"`
	Type                 int32     `protobuf:"varint,5,opt,name=type,proto3" json:"type,omitempty"`
	Title                string    `protobuf:"bytes,6,opt,name=title,proto3" json:"title,omitempty"`
	Path                 string    `protobuf:"bytes,7,opt,name=path,proto3" json:"path,omitempty"`
	Component            string    `protobuf:"bytes,8,opt,name=component,proto3" json:"component,omitempty"`
	Icon                 string    `protobuf:"bytes,9,opt,name=icon,proto3" json:"icon,omitempty"`
	IsDisplay            bool      `protobuf:"varint,10,opt,name=is_display,json=isDisplay,proto3" json:"is_display,omitempty"`
	Sort                 int32     `protobuf:"varint,11,opt,name=sort,proto3" json:"sort,omitempty"`
	State                int32     `protobuf:"varint,12,opt,name=state,proto3" json:"state,omitempty"`
	Children             []*CoMenu `protobuf:"bytes,13,rep,name=children,proto3" json:"children,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *CoMenu) Reset()         { *m = CoMenu{} }
func (m *CoMenu) String() string { return proto.CompactTextString(m) }
func (*CoMenu) ProtoMessage()    {}
func (*CoMenu) Descriptor() ([]byte, []int) {
	return fileDescriptor_829ee3766b824c5c, []int{11}
}

func (m *CoMenu) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CoMenu.Unmarshal(m, b)
}
func (m *CoMenu) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CoMenu.Marshal(b, m, deterministic)
}
func (m *CoMenu) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CoMenu.Merge(m, src)
}
func (m *CoMenu) XXX_Size() int {
	return xxx_messageInfo_CoMenu.Size(m)
}
func (m *CoMenu) XXX_DiscardUnknown() {
	xxx_messageInfo_CoMenu.DiscardUnknown(m)
}

var xxx_messageInfo_CoMenu proto.InternalMessageInfo

func (m *CoMenu) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *CoMenu) GetCreatedAt() int32 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *CoMenu) GetUpdatedAt() int32 {
	if m != nil {
		return m.UpdatedAt
	}
	return 0
}

func (m *CoMenu) GetPid() int64 {
	if m != nil {
		return m.Pid
	}
	return 0
}

func (m *CoMenu) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *CoMenu) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *CoMenu) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *CoMenu) GetComponent() string {
	if m != nil {
		return m.Component
	}
	return ""
}

func (m *CoMenu) GetIcon() string {
	if m != nil {
		return m.Icon
	}
	return ""
}

func (m *CoMenu) GetIsDisplay() bool {
	if m != nil {
		return m.IsDisplay
	}
	return false
}

func (m *CoMenu) GetSort() int32 {
	if m != nil {
		return m.Sort
	}
	return 0
}

func (m *CoMenu) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *CoMenu) GetChildren() []*CoMenu {
	if m != nil {
		return m.Children
	}
	return nil
}

type ReqCoMenu struct {
	Page                 *PageInfo `protobuf:"bytes,1,opt,name=page,proto3" json:"page,omitempty"`
	Req                  *CoMenu   `protobuf:"bytes,2,opt,name=req,proto3" json:"req,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *ReqCoMenu) Reset()         { *m = ReqCoMenu{} }
func (m *ReqCoMenu) String() string { return proto.CompactTextString(m) }
func (*ReqCoMenu) ProtoMessage()    {}
func (*ReqCoMenu) Descriptor() ([]byte, []int) {
	return fileDescriptor_829ee3766b824c5c, []int{12}
}

func (m *ReqCoMenu) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReqCoMenu.Unmarshal(m, b)
}
func (m *ReqCoMenu) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReqCoMenu.Marshal(b, m, deterministic)
}
func (m *ReqCoMenu) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqCoMenu.Merge(m, src)
}
func (m *ReqCoMenu) XXX_Size() int {
	return xxx_messageInfo_ReqCoMenu.Size(m)
}
func (m *ReqCoMenu) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqCoMenu.DiscardUnknown(m)
}

var xxx_messageInfo_ReqCoMenu proto.InternalMessageInfo

func (m *ReqCoMenu) GetPage() *PageInfo {
	if m != nil {
		return m.Page
	}
	return nil
}

func (m *ReqCoMenu) GetReq() *CoMenu {
	if m != nil {
		return m.Req
	}
	return nil
}

type ResCoMenu struct {
	List                 []*CoMenu `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	Count                int32     `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *ResCoMenu) Reset()         { *m = ResCoMenu{} }
func (m *ResCoMenu) String() string { return proto.CompactTextString(m) }
func (*ResCoMenu) ProtoMessage()    {}
func (*ResCoMenu) Descriptor() ([]byte, []int) {
	return fileDescriptor_829ee3766b824c5c, []int{13}
}

func (m *ResCoMenu) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResCoMenu.Unmarshal(m, b)
}
func (m *ResCoMenu) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResCoMenu.Marshal(b, m, deterministic)
}
func (m *ResCoMenu) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResCoMenu.Merge(m, src)
}
func (m *ResCoMenu) XXX_Size() int {
	return xxx_messageInfo_ResCoMenu.Size(m)
}
func (m *ResCoMenu) XXX_DiscardUnknown() {
	xxx_messageInfo_ResCoMenu.DiscardUnknown(m)
}

var xxx_messageInfo_ResCoMenu proto.InternalMessageInfo

func (m *ResCoMenu) GetList() []*CoMenu {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *ResCoMenu) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

// co_menu_api 企业菜单 关联API 权限
type CoMenuAPI struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	CreatedAt            int32    `protobuf:"varint,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt            int32    `protobuf:"varint,3,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	MenuId               int64    `protobuf:"varint,4,opt,name=menu_id,json=menuId,proto3" json:"menu_id,omitempty"`
	Method               string   `protobuf:"bytes,5,opt,name=method,proto3" json:"method,omitempty"`
	Path                 string   `protobuf:"bytes,6,opt,name=path,proto3" json:"path,omitempty"`
	Description          string   `protobuf:"bytes,7,opt,name=description,proto3" json:"description,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CoMenuAPI) Reset()         { *m = CoMenuAPI{} }
func (m *CoMenuAPI) String() string { return proto.CompactTextString(m) }
func (*CoMenuAPI) ProtoMessage()    {}
func (*CoMenuAPI) Descriptor() ([]byte, []int) {
	return fileDescriptor_829ee3766b824c5c, []int{14}
}

func (m *CoMenuAPI) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CoMenuAPI.Unmarshal(m, b)
}
func (m *CoMenuAPI) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CoMenuAPI.Marshal(b, m, deterministic)
}
func (m *CoMenuAPI) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CoMenuAPI.Merge(m, src)
}
func (m *CoMenuAPI) XXX_Size() int {
	return xxx_messageInfo_CoMenuAPI.Size(m)
}
func (m *CoMenuAPI) XXX_DiscardUnknown() {
	xxx_messageInfo_CoMenuAPI.DiscardUnknown(m)
}

var xxx_messageInfo_CoMenuAPI proto.InternalMessageInfo

func (m *CoMenuAPI) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *CoMenuAPI) GetCreatedAt() int32 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *CoMenuAPI) GetUpdatedAt() int32 {
	if m != nil {
		return m.UpdatedAt
	}
	return 0
}

func (m *CoMenuAPI) GetMenuId() int64 {
	if m != nil {
		return m.MenuId
	}
	return 0
}

func (m *CoMenuAPI) GetMethod() string {
	if m != nil {
		return m.Method
	}
	return ""
}

func (m *CoMenuAPI) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *CoMenuAPI) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

// 根据菜单 分页
type ReqCoMenuAPI struct {
	Page                 *PageInfo  `protobuf:"bytes,1,opt,name=page,proto3" json:"page,omitempty"`
	Req                  *CoMenuAPI `protobuf:"bytes,2,opt,name=req,proto3" json:"req,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *ReqCoMenuAPI) Reset()         { *m = ReqCoMenuAPI{} }
func (m *ReqCoMenuAPI) String() string { return proto.CompactTextString(m) }
func (*ReqCoMenuAPI) ProtoMessage()    {}
func (*ReqCoMenuAPI) Descriptor() ([]byte, []int) {
	return fileDescriptor_829ee3766b824c5c, []int{15}
}

func (m *ReqCoMenuAPI) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReqCoMenuAPI.Unmarshal(m, b)
}
func (m *ReqCoMenuAPI) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReqCoMenuAPI.Marshal(b, m, deterministic)
}
func (m *ReqCoMenuAPI) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqCoMenuAPI.Merge(m, src)
}
func (m *ReqCoMenuAPI) XXX_Size() int {
	return xxx_messageInfo_ReqCoMenuAPI.Size(m)
}
func (m *ReqCoMenuAPI) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqCoMenuAPI.DiscardUnknown(m)
}

var xxx_messageInfo_ReqCoMenuAPI proto.InternalMessageInfo

func (m *ReqCoMenuAPI) GetPage() *PageInfo {
	if m != nil {
		return m.Page
	}
	return nil
}

func (m *ReqCoMenuAPI) GetReq() *CoMenuAPI {
	if m != nil {
		return m.Req
	}
	return nil
}

type ResCoMenuAPI struct {
	List                 []*CoMenuAPI `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	Count                int32        `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *ResCoMenuAPI) Reset()         { *m = ResCoMenuAPI{} }
func (m *ResCoMenuAPI) String() string { return proto.CompactTextString(m) }
func (*ResCoMenuAPI) ProtoMessage()    {}
func (*ResCoMenuAPI) Descriptor() ([]byte, []int) {
	return fileDescriptor_829ee3766b824c5c, []int{16}
}

func (m *ResCoMenuAPI) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResCoMenuAPI.Unmarshal(m, b)
}
func (m *ResCoMenuAPI) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResCoMenuAPI.Marshal(b, m, deterministic)
}
func (m *ResCoMenuAPI) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResCoMenuAPI.Merge(m, src)
}
func (m *ResCoMenuAPI) XXX_Size() int {
	return xxx_messageInfo_ResCoMenuAPI.Size(m)
}
func (m *ResCoMenuAPI) XXX_DiscardUnknown() {
	xxx_messageInfo_ResCoMenuAPI.DiscardUnknown(m)
}

var xxx_messageInfo_ResCoMenuAPI proto.InternalMessageInfo

func (m *ResCoMenuAPI) GetList() []*CoMenuAPI {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *ResCoMenuAPI) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

// co_menu_group 企业菜单权限组
type CoMenuGroup struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	CreatedAt            int32    `protobuf:"varint,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt            int32    `protobuf:"varint,3,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	Pid                  int64    `protobuf:"varint,4,opt,name=pid,proto3" json:"pid,omitempty"`
	RoleId               int64    `protobuf:"varint,5,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty"`
	Name                 string   `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
	Note                 string   `protobuf:"bytes,7,opt,name=note,proto3" json:"note,omitempty"`
	Chain                int32    `protobuf:"varint,8,opt,name=chain,proto3" json:"chain,omitempty"`
	IsSys                bool     `protobuf:"varint,9,opt,name=is_sys,json=isSys,proto3" json:"is_sys,omitempty"`
	Level                int32    `protobuf:"varint,10,opt,name=level,proto3" json:"level,omitempty"`
	MenuList             []int64  `protobuf:"varint,11,rep,packed,name=menu_list,json=menuList,proto3" json:"menu_list,omitempty"`
	PluginList           []int64  `protobuf:"varint,12,rep,packed,name=plugin_list,json=pluginList,proto3" json:"plugin_list,omitempty"`
	State                int32    `protobuf:"varint,13,opt,name=state,proto3" json:"state,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CoMenuGroup) Reset()         { *m = CoMenuGroup{} }
func (m *CoMenuGroup) String() string { return proto.CompactTextString(m) }
func (*CoMenuGroup) ProtoMessage()    {}
func (*CoMenuGroup) Descriptor() ([]byte, []int) {
	return fileDescriptor_829ee3766b824c5c, []int{17}
}

func (m *CoMenuGroup) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CoMenuGroup.Unmarshal(m, b)
}
func (m *CoMenuGroup) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CoMenuGroup.Marshal(b, m, deterministic)
}
func (m *CoMenuGroup) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CoMenuGroup.Merge(m, src)
}
func (m *CoMenuGroup) XXX_Size() int {
	return xxx_messageInfo_CoMenuGroup.Size(m)
}
func (m *CoMenuGroup) XXX_DiscardUnknown() {
	xxx_messageInfo_CoMenuGroup.DiscardUnknown(m)
}

var xxx_messageInfo_CoMenuGroup proto.InternalMessageInfo

func (m *CoMenuGroup) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *CoMenuGroup) GetCreatedAt() int32 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *CoMenuGroup) GetUpdatedAt() int32 {
	if m != nil {
		return m.UpdatedAt
	}
	return 0
}

func (m *CoMenuGroup) GetPid() int64 {
	if m != nil {
		return m.Pid
	}
	return 0
}

func (m *CoMenuGroup) GetRoleId() int64 {
	if m != nil {
		return m.RoleId
	}
	return 0
}

func (m *CoMenuGroup) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CoMenuGroup) GetNote() string {
	if m != nil {
		return m.Note
	}
	return ""
}

func (m *CoMenuGroup) GetChain() int32 {
	if m != nil {
		return m.Chain
	}
	return 0
}

func (m *CoMenuGroup) GetIsSys() bool {
	if m != nil {
		return m.IsSys
	}
	return false
}

func (m *CoMenuGroup) GetLevel() int32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *CoMenuGroup) GetMenuList() []int64 {
	if m != nil {
		return m.MenuList
	}
	return nil
}

func (m *CoMenuGroup) GetPluginList() []int64 {
	if m != nil {
		return m.PluginList
	}
	return nil
}

func (m *CoMenuGroup) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

type ReqCoMenuGroup struct {
	Page                 *PageInfo    `protobuf:"bytes,1,opt,name=page,proto3" json:"page,omitempty"`
	Req                  *CoMenuGroup `protobuf:"bytes,2,opt,name=req,proto3" json:"req,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *ReqCoMenuGroup) Reset()         { *m = ReqCoMenuGroup{} }
func (m *ReqCoMenuGroup) String() string { return proto.CompactTextString(m) }
func (*ReqCoMenuGroup) ProtoMessage()    {}
func (*ReqCoMenuGroup) Descriptor() ([]byte, []int) {
	return fileDescriptor_829ee3766b824c5c, []int{18}
}

func (m *ReqCoMenuGroup) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReqCoMenuGroup.Unmarshal(m, b)
}
func (m *ReqCoMenuGroup) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReqCoMenuGroup.Marshal(b, m, deterministic)
}
func (m *ReqCoMenuGroup) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqCoMenuGroup.Merge(m, src)
}
func (m *ReqCoMenuGroup) XXX_Size() int {
	return xxx_messageInfo_ReqCoMenuGroup.Size(m)
}
func (m *ReqCoMenuGroup) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqCoMenuGroup.DiscardUnknown(m)
}

var xxx_messageInfo_ReqCoMenuGroup proto.InternalMessageInfo

func (m *ReqCoMenuGroup) GetPage() *PageInfo {
	if m != nil {
		return m.Page
	}
	return nil
}

func (m *ReqCoMenuGroup) GetReq() *CoMenuGroup {
	if m != nil {
		return m.Req
	}
	return nil
}

type ResCoMenuGroup struct {
	List                 []*CoMenuGroup `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	Count                int32          `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *ResCoMenuGroup) Reset()         { *m = ResCoMenuGroup{} }
func (m *ResCoMenuGroup) String() string { return proto.CompactTextString(m) }
func (*ResCoMenuGroup) ProtoMessage()    {}
func (*ResCoMenuGroup) Descriptor() ([]byte, []int) {
	return fileDescriptor_829ee3766b824c5c, []int{19}
}

func (m *ResCoMenuGroup) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResCoMenuGroup.Unmarshal(m, b)
}
func (m *ResCoMenuGroup) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResCoMenuGroup.Marshal(b, m, deterministic)
}
func (m *ResCoMenuGroup) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResCoMenuGroup.Merge(m, src)
}
func (m *ResCoMenuGroup) XXX_Size() int {
	return xxx_messageInfo_ResCoMenuGroup.Size(m)
}
func (m *ResCoMenuGroup) XXX_DiscardUnknown() {
	xxx_messageInfo_ResCoMenuGroup.DiscardUnknown(m)
}

var xxx_messageInfo_ResCoMenuGroup proto.InternalMessageInfo

func (m *ResCoMenuGroup) GetList() []*CoMenuGroup {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *ResCoMenuGroup) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

// co_menu_group_limit 菜单组 规则限制
type CoMenuGroupLimit struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	CreatedAt            int32    `protobuf:"varint,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt            int32    `protobuf:"varint,3,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	LimitId              int64    `protobuf:"varint,4,opt,name=limit_id,json=limitId,proto3" json:"limit_id,omitempty"`
	MenuGroupId          int64    `protobuf:"varint,5,opt,name=menu_group_id,json=menuGroupId,proto3" json:"menu_group_id,omitempty"`
	Level                int32    `protobuf:"varint,6,opt,name=level,proto3" json:"level,omitempty"`
	Value                int32    `protobuf:"varint,7,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CoMenuGroupLimit) Reset()         { *m = CoMenuGroupLimit{} }
func (m *CoMenuGroupLimit) String() string { return proto.CompactTextString(m) }
func (*CoMenuGroupLimit) ProtoMessage()    {}
func (*CoMenuGroupLimit) Descriptor() ([]byte, []int) {
	return fileDescriptor_829ee3766b824c5c, []int{20}
}

func (m *CoMenuGroupLimit) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CoMenuGroupLimit.Unmarshal(m, b)
}
func (m *CoMenuGroupLimit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CoMenuGroupLimit.Marshal(b, m, deterministic)
}
func (m *CoMenuGroupLimit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CoMenuGroupLimit.Merge(m, src)
}
func (m *CoMenuGroupLimit) XXX_Size() int {
	return xxx_messageInfo_CoMenuGroupLimit.Size(m)
}
func (m *CoMenuGroupLimit) XXX_DiscardUnknown() {
	xxx_messageInfo_CoMenuGroupLimit.DiscardUnknown(m)
}

var xxx_messageInfo_CoMenuGroupLimit proto.InternalMessageInfo

func (m *CoMenuGroupLimit) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *CoMenuGroupLimit) GetCreatedAt() int32 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *CoMenuGroupLimit) GetUpdatedAt() int32 {
	if m != nil {
		return m.UpdatedAt
	}
	return 0
}

func (m *CoMenuGroupLimit) GetLimitId() int64 {
	if m != nil {
		return m.LimitId
	}
	return 0
}

func (m *CoMenuGroupLimit) GetMenuGroupId() int64 {
	if m != nil {
		return m.MenuGroupId
	}
	return 0
}

func (m *CoMenuGroupLimit) GetLevel() int32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *CoMenuGroupLimit) GetValue() int32 {
	if m != nil {
		return m.Value
	}
	return 0
}

// 输出
type ResCoMenuGroupLimit struct {
	List                 []*CoMenuGroupLimit `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	Count                int32               `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *ResCoMenuGroupLimit) Reset()         { *m = ResCoMenuGroupLimit{} }
func (m *ResCoMenuGroupLimit) String() string { return proto.CompactTextString(m) }
func (*ResCoMenuGroupLimit) ProtoMessage()    {}
func (*ResCoMenuGroupLimit) Descriptor() ([]byte, []int) {
	return fileDescriptor_829ee3766b824c5c, []int{21}
}

func (m *ResCoMenuGroupLimit) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResCoMenuGroupLimit.Unmarshal(m, b)
}
func (m *ResCoMenuGroupLimit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResCoMenuGroupLimit.Marshal(b, m, deterministic)
}
func (m *ResCoMenuGroupLimit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResCoMenuGroupLimit.Merge(m, src)
}
func (m *ResCoMenuGroupLimit) XXX_Size() int {
	return xxx_messageInfo_ResCoMenuGroupLimit.Size(m)
}
func (m *ResCoMenuGroupLimit) XXX_DiscardUnknown() {
	xxx_messageInfo_ResCoMenuGroupLimit.DiscardUnknown(m)
}

var xxx_messageInfo_ResCoMenuGroupLimit proto.InternalMessageInfo

func (m *ResCoMenuGroupLimit) GetList() []*CoMenuGroupLimit {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *ResCoMenuGroupLimit) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

// co_menu_group_role 菜单角色标签
type CoMenuGroupRole struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	CreatedAt            int32    `protobuf:"varint,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt            int32    `protobuf:"varint,3,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	Name                 string   `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Serial               string   `protobuf:"bytes,5,opt,name=serial,proto3" json:"serial,omitempty"`
	Tips                 string   `protobuf:"bytes,6,opt,name=tips,proto3" json:"tips,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CoMenuGroupRole) Reset()         { *m = CoMenuGroupRole{} }
func (m *CoMenuGroupRole) String() string { return proto.CompactTextString(m) }
func (*CoMenuGroupRole) ProtoMessage()    {}
func (*CoMenuGroupRole) Descriptor() ([]byte, []int) {
	return fileDescriptor_829ee3766b824c5c, []int{22}
}

func (m *CoMenuGroupRole) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CoMenuGroupRole.Unmarshal(m, b)
}
func (m *CoMenuGroupRole) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CoMenuGroupRole.Marshal(b, m, deterministic)
}
func (m *CoMenuGroupRole) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CoMenuGroupRole.Merge(m, src)
}
func (m *CoMenuGroupRole) XXX_Size() int {
	return xxx_messageInfo_CoMenuGroupRole.Size(m)
}
func (m *CoMenuGroupRole) XXX_DiscardUnknown() {
	xxx_messageInfo_CoMenuGroupRole.DiscardUnknown(m)
}

var xxx_messageInfo_CoMenuGroupRole proto.InternalMessageInfo

func (m *CoMenuGroupRole) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *CoMenuGroupRole) GetCreatedAt() int32 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *CoMenuGroupRole) GetUpdatedAt() int32 {
	if m != nil {
		return m.UpdatedAt
	}
	return 0
}

func (m *CoMenuGroupRole) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CoMenuGroupRole) GetSerial() string {
	if m != nil {
		return m.Serial
	}
	return ""
}

func (m *CoMenuGroupRole) GetTips() string {
	if m != nil {
		return m.Tips
	}
	return ""
}

type ResCoMenuGroupRole struct {
	List                 []*CoMenuGroupRole `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	Count                int32              `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *ResCoMenuGroupRole) Reset()         { *m = ResCoMenuGroupRole{} }
func (m *ResCoMenuGroupRole) String() string { return proto.CompactTextString(m) }
func (*ResCoMenuGroupRole) ProtoMessage()    {}
func (*ResCoMenuGroupRole) Descriptor() ([]byte, []int) {
	return fileDescriptor_829ee3766b824c5c, []int{23}
}

func (m *ResCoMenuGroupRole) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResCoMenuGroupRole.Unmarshal(m, b)
}
func (m *ResCoMenuGroupRole) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResCoMenuGroupRole.Marshal(b, m, deterministic)
}
func (m *ResCoMenuGroupRole) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResCoMenuGroupRole.Merge(m, src)
}
func (m *ResCoMenuGroupRole) XXX_Size() int {
	return xxx_messageInfo_ResCoMenuGroupRole.Size(m)
}
func (m *ResCoMenuGroupRole) XXX_DiscardUnknown() {
	xxx_messageInfo_ResCoMenuGroupRole.DiscardUnknown(m)
}

var xxx_messageInfo_ResCoMenuGroupRole proto.InternalMessageInfo

func (m *ResCoMenuGroupRole) GetList() []*CoMenuGroupRole {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *ResCoMenuGroupRole) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

// TODO: 企业界面组件
// co_sys_module 企业界面组件
type CoSysModule struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	CreatedAt            int32    `protobuf:"varint,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt            int32    `protobuf:"varint,3,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	ClassId              int64    `protobuf:"varint,4,opt,name=class_id,json=classId,proto3" json:"class_id,omitempty"`
	PluginId             int64    `protobuf:"varint,5,opt,name=plugin_id,json=pluginId,proto3" json:"plugin_id,omitempty"`
	Name                 string   `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
	Icon                 string   `protobuf:"bytes,7,opt,name=icon,proto3" json:"icon,omitempty"`
	Alias                string   `protobuf:"bytes,8,opt,name=alias,proto3" json:"alias,omitempty"`
	UseType              int32    `protobuf:"varint,9,opt,name=use_type,json=useType,proto3" json:"use_type,omitempty"`
	UsePos               []int32  `protobuf:"varint,10,rep,packed,name=use_pos,json=usePos,proto3" json:"use_pos,omitempty"`
	LimitAdmin           []int64  `protobuf:"varint,11,rep,packed,name=limit_admin,json=limitAdmin,proto3" json:"limit_admin,omitempty"`
	MaxNum               int32    `protobuf:"varint,12,opt,name=max_num,json=maxNum,proto3" json:"max_num,omitempty"`
	IsInit               bool     `protobuf:"varint,13,opt,name=is_init,json=isInit,proto3" json:"is_init,omitempty"`
	IsSort               bool     `protobuf:"varint,14,opt,name=is_sort,json=isSort,proto3" json:"is_sort,omitempty"`
	FixSort              int32    `protobuf:"varint,15,opt,name=fix_sort,json=fixSort,proto3" json:"fix_sort,omitempty"`
	IsDisplay            bool     `protobuf:"varint,16,opt,name=is_display,json=isDisplay,proto3" json:"is_display,omitempty"`
	IsSystem             bool     `protobuf:"varint,17,opt,name=is_system,json=isSystem,proto3" json:"is_system,omitempty"`
	IsDelete             bool     `protobuf:"varint,18,opt,name=is_delete,json=isDelete,proto3" json:"is_delete,omitempty"`
	IsConfig             bool     `protobuf:"varint,19,opt,name=is_config,json=isConfig,proto3" json:"is_config,omitempty"`
	State                int32    `protobuf:"varint,20,opt,name=state,proto3" json:"state,omitempty"`
	ConfigRule           []byte   `protobuf:"bytes,21,opt,name=config_rule,json=configRule,proto3" json:"config_rule,omitempty"`
	AdminId              int64    `protobuf:"varint,22,opt,name=admin_id,json=adminId,proto3" json:"admin_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CoSysModule) Reset()         { *m = CoSysModule{} }
func (m *CoSysModule) String() string { return proto.CompactTextString(m) }
func (*CoSysModule) ProtoMessage()    {}
func (*CoSysModule) Descriptor() ([]byte, []int) {
	return fileDescriptor_829ee3766b824c5c, []int{24}
}

func (m *CoSysModule) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CoSysModule.Unmarshal(m, b)
}
func (m *CoSysModule) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CoSysModule.Marshal(b, m, deterministic)
}
func (m *CoSysModule) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CoSysModule.Merge(m, src)
}
func (m *CoSysModule) XXX_Size() int {
	return xxx_messageInfo_CoSysModule.Size(m)
}
func (m *CoSysModule) XXX_DiscardUnknown() {
	xxx_messageInfo_CoSysModule.DiscardUnknown(m)
}

var xxx_messageInfo_CoSysModule proto.InternalMessageInfo

func (m *CoSysModule) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *CoSysModule) GetCreatedAt() int32 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *CoSysModule) GetUpdatedAt() int32 {
	if m != nil {
		return m.UpdatedAt
	}
	return 0
}

func (m *CoSysModule) GetClassId() int64 {
	if m != nil {
		return m.ClassId
	}
	return 0
}

func (m *CoSysModule) GetPluginId() int64 {
	if m != nil {
		return m.PluginId
	}
	return 0
}

func (m *CoSysModule) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CoSysModule) GetIcon() string {
	if m != nil {
		return m.Icon
	}
	return ""
}

func (m *CoSysModule) GetAlias() string {
	if m != nil {
		return m.Alias
	}
	return ""
}

func (m *CoSysModule) GetUseType() int32 {
	if m != nil {
		return m.UseType
	}
	return 0
}

func (m *CoSysModule) GetUsePos() []int32 {
	if m != nil {
		return m.UsePos
	}
	return nil
}

func (m *CoSysModule) GetLimitAdmin() []int64 {
	if m != nil {
		return m.LimitAdmin
	}
	return nil
}

func (m *CoSysModule) GetMaxNum() int32 {
	if m != nil {
		return m.MaxNum
	}
	return 0
}

func (m *CoSysModule) GetIsInit() bool {
	if m != nil {
		return m.IsInit
	}
	return false
}

func (m *CoSysModule) GetIsSort() bool {
	if m != nil {
		return m.IsSort
	}
	return false
}

func (m *CoSysModule) GetFixSort() int32 {
	if m != nil {
		return m.FixSort
	}
	return 0
}

func (m *CoSysModule) GetIsDisplay() bool {
	if m != nil {
		return m.IsDisplay
	}
	return false
}

func (m *CoSysModule) GetIsSystem() bool {
	if m != nil {
		return m.IsSystem
	}
	return false
}

func (m *CoSysModule) GetIsDelete() bool {
	if m != nil {
		return m.IsDelete
	}
	return false
}

func (m *CoSysModule) GetIsConfig() bool {
	if m != nil {
		return m.IsConfig
	}
	return false
}

func (m *CoSysModule) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *CoSysModule) GetConfigRule() []byte {
	if m != nil {
		return m.ConfigRule
	}
	return nil
}

func (m *CoSysModule) GetAdminId() int64 {
	if m != nil {
		return m.AdminId
	}
	return 0
}

type ReqCoSysModule struct {
	Page                 *PageInfo    `protobuf:"bytes,1,opt,name=page,proto3" json:"page,omitempty"`
	Req                  *CoSysModule `protobuf:"bytes,2,opt,name=req,proto3" json:"req,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *ReqCoSysModule) Reset()         { *m = ReqCoSysModule{} }
func (m *ReqCoSysModule) String() string { return proto.CompactTextString(m) }
func (*ReqCoSysModule) ProtoMessage()    {}
func (*ReqCoSysModule) Descriptor() ([]byte, []int) {
	return fileDescriptor_829ee3766b824c5c, []int{25}
}

func (m *ReqCoSysModule) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReqCoSysModule.Unmarshal(m, b)
}
func (m *ReqCoSysModule) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReqCoSysModule.Marshal(b, m, deterministic)
}
func (m *ReqCoSysModule) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqCoSysModule.Merge(m, src)
}
func (m *ReqCoSysModule) XXX_Size() int {
	return xxx_messageInfo_ReqCoSysModule.Size(m)
}
func (m *ReqCoSysModule) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqCoSysModule.DiscardUnknown(m)
}

var xxx_messageInfo_ReqCoSysModule proto.InternalMessageInfo

func (m *ReqCoSysModule) GetPage() *PageInfo {
	if m != nil {
		return m.Page
	}
	return nil
}

func (m *ReqCoSysModule) GetReq() *CoSysModule {
	if m != nil {
		return m.Req
	}
	return nil
}

type ResCoSysModule struct {
	List                 []*CoSysModule `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	Count                int32          `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *ResCoSysModule) Reset()         { *m = ResCoSysModule{} }
func (m *ResCoSysModule) String() string { return proto.CompactTextString(m) }
func (*ResCoSysModule) ProtoMessage()    {}
func (*ResCoSysModule) Descriptor() ([]byte, []int) {
	return fileDescriptor_829ee3766b824c5c, []int{26}
}

func (m *ResCoSysModule) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResCoSysModule.Unmarshal(m, b)
}
func (m *ResCoSysModule) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResCoSysModule.Marshal(b, m, deterministic)
}
func (m *ResCoSysModule) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResCoSysModule.Merge(m, src)
}
func (m *ResCoSysModule) XXX_Size() int {
	return xxx_messageInfo_ResCoSysModule.Size(m)
}
func (m *ResCoSysModule) XXX_DiscardUnknown() {
	xxx_messageInfo_ResCoSysModule.DiscardUnknown(m)
}

var xxx_messageInfo_ResCoSysModule proto.InternalMessageInfo

func (m *ResCoSysModule) GetList() []*CoSysModule {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *ResCoSysModule) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

// co_sys_com_class 企业组件分类
type CoSysModuleClass struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	CreatedAt            int32    `protobuf:"varint,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt            int32    `protobuf:"varint,3,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	Name                 string   `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	State                int32    `protobuf:"varint,5,opt,name=state,proto3" json:"state,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CoSysModuleClass) Reset()         { *m = CoSysModuleClass{} }
func (m *CoSysModuleClass) String() string { return proto.CompactTextString(m) }
func (*CoSysModuleClass) ProtoMessage()    {}
func (*CoSysModuleClass) Descriptor() ([]byte, []int) {
	return fileDescriptor_829ee3766b824c5c, []int{27}
}

func (m *CoSysModuleClass) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CoSysModuleClass.Unmarshal(m, b)
}
func (m *CoSysModuleClass) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CoSysModuleClass.Marshal(b, m, deterministic)
}
func (m *CoSysModuleClass) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CoSysModuleClass.Merge(m, src)
}
func (m *CoSysModuleClass) XXX_Size() int {
	return xxx_messageInfo_CoSysModuleClass.Size(m)
}
func (m *CoSysModuleClass) XXX_DiscardUnknown() {
	xxx_messageInfo_CoSysModuleClass.DiscardUnknown(m)
}

var xxx_messageInfo_CoSysModuleClass proto.InternalMessageInfo

func (m *CoSysModuleClass) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *CoSysModuleClass) GetCreatedAt() int32 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *CoSysModuleClass) GetUpdatedAt() int32 {
	if m != nil {
		return m.UpdatedAt
	}
	return 0
}

func (m *CoSysModuleClass) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CoSysModuleClass) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

type ResCoSysModuleClass struct {
	List                 []*CoSysModuleClass `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	Count                int32               `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *ResCoSysModuleClass) Reset()         { *m = ResCoSysModuleClass{} }
func (m *ResCoSysModuleClass) String() string { return proto.CompactTextString(m) }
func (*ResCoSysModuleClass) ProtoMessage()    {}
func (*ResCoSysModuleClass) Descriptor() ([]byte, []int) {
	return fileDescriptor_829ee3766b824c5c, []int{28}
}

func (m *ResCoSysModuleClass) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResCoSysModuleClass.Unmarshal(m, b)
}
func (m *ResCoSysModuleClass) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResCoSysModuleClass.Marshal(b, m, deterministic)
}
func (m *ResCoSysModuleClass) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResCoSysModuleClass.Merge(m, src)
}
func (m *ResCoSysModuleClass) XXX_Size() int {
	return xxx_messageInfo_ResCoSysModuleClass.Size(m)
}
func (m *ResCoSysModuleClass) XXX_DiscardUnknown() {
	xxx_messageInfo_ResCoSysModuleClass.DiscardUnknown(m)
}

var xxx_messageInfo_ResCoSysModuleClass proto.InternalMessageInfo

func (m *ResCoSysModuleClass) GetList() []*CoSysModuleClass {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *ResCoSysModuleClass) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

// TODO: 企业插件
// co_sys_plugin
type CoSysPlugin struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	CreatedAt            int32    `protobuf:"varint,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt            int32    `protobuf:"varint,3,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	Group                string   `protobuf:"bytes,4,opt,name=group,proto3" json:"group,omitempty"`
	Type                 int32    `protobuf:"varint,5,opt,name=type,proto3" json:"type,omitempty"`
	Model                int32    `protobuf:"varint,6,opt,name=model,proto3" json:"model,omitempty"`
	UseType              int32    `protobuf:"varint,7,opt,name=use_type,json=useType,proto3" json:"use_type,omitempty"`
	LimitAdmin           []int64  `protobuf:"varint,8,rep,packed,name=limit_admin,json=limitAdmin,proto3" json:"limit_admin,omitempty"`
	Name                 string   `protobuf:"bytes,9,opt,name=name,proto3" json:"name,omitempty"`
	Note                 string   `protobuf:"bytes,10,opt,name=note,proto3" json:"note,omitempty"`
	Alias                string   `protobuf:"bytes,11,opt,name=alias,proto3" json:"alias,omitempty"`
	Ver                  string   `protobuf:"bytes,12,opt,name=ver,proto3" json:"ver,omitempty"`
	Topic                string   `protobuf:"bytes,13,opt,name=topic,proto3" json:"topic,omitempty"`
	Path                 string   `protobuf:"bytes,14,opt,name=path,proto3" json:"path,omitempty"`
	State                int32    `protobuf:"varint,15,opt,name=state,proto3" json:"state,omitempty"`
	AdminId              int64    `protobuf:"varint,16,opt,name=admin_id,json=adminId,proto3" json:"admin_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CoSysPlugin) Reset()         { *m = CoSysPlugin{} }
func (m *CoSysPlugin) String() string { return proto.CompactTextString(m) }
func (*CoSysPlugin) ProtoMessage()    {}
func (*CoSysPlugin) Descriptor() ([]byte, []int) {
	return fileDescriptor_829ee3766b824c5c, []int{29}
}

func (m *CoSysPlugin) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CoSysPlugin.Unmarshal(m, b)
}
func (m *CoSysPlugin) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CoSysPlugin.Marshal(b, m, deterministic)
}
func (m *CoSysPlugin) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CoSysPlugin.Merge(m, src)
}
func (m *CoSysPlugin) XXX_Size() int {
	return xxx_messageInfo_CoSysPlugin.Size(m)
}
func (m *CoSysPlugin) XXX_DiscardUnknown() {
	xxx_messageInfo_CoSysPlugin.DiscardUnknown(m)
}

var xxx_messageInfo_CoSysPlugin proto.InternalMessageInfo

func (m *CoSysPlugin) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *CoSysPlugin) GetCreatedAt() int32 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *CoSysPlugin) GetUpdatedAt() int32 {
	if m != nil {
		return m.UpdatedAt
	}
	return 0
}

func (m *CoSysPlugin) GetGroup() string {
	if m != nil {
		return m.Group
	}
	return ""
}

func (m *CoSysPlugin) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *CoSysPlugin) GetModel() int32 {
	if m != nil {
		return m.Model
	}
	return 0
}

func (m *CoSysPlugin) GetUseType() int32 {
	if m != nil {
		return m.UseType
	}
	return 0
}

func (m *CoSysPlugin) GetLimitAdmin() []int64 {
	if m != nil {
		return m.LimitAdmin
	}
	return nil
}

func (m *CoSysPlugin) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CoSysPlugin) GetNote() string {
	if m != nil {
		return m.Note
	}
	return ""
}

func (m *CoSysPlugin) GetAlias() string {
	if m != nil {
		return m.Alias
	}
	return ""
}

func (m *CoSysPlugin) GetVer() string {
	if m != nil {
		return m.Ver
	}
	return ""
}

func (m *CoSysPlugin) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

func (m *CoSysPlugin) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *CoSysPlugin) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *CoSysPlugin) GetAdminId() int64 {
	if m != nil {
		return m.AdminId
	}
	return 0
}

type ReqCoSysPlugin struct {
	Page                 *PageInfo    `protobuf:"bytes,1,opt,name=page,proto3" json:"page,omitempty"`
	Req                  *CoSysPlugin `protobuf:"bytes,2,opt,name=req,proto3" json:"req,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *ReqCoSysPlugin) Reset()         { *m = ReqCoSysPlugin{} }
func (m *ReqCoSysPlugin) String() string { return proto.CompactTextString(m) }
func (*ReqCoSysPlugin) ProtoMessage()    {}
func (*ReqCoSysPlugin) Descriptor() ([]byte, []int) {
	return fileDescriptor_829ee3766b824c5c, []int{30}
}

func (m *ReqCoSysPlugin) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReqCoSysPlugin.Unmarshal(m, b)
}
func (m *ReqCoSysPlugin) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReqCoSysPlugin.Marshal(b, m, deterministic)
}
func (m *ReqCoSysPlugin) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqCoSysPlugin.Merge(m, src)
}
func (m *ReqCoSysPlugin) XXX_Size() int {
	return xxx_messageInfo_ReqCoSysPlugin.Size(m)
}
func (m *ReqCoSysPlugin) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqCoSysPlugin.DiscardUnknown(m)
}

var xxx_messageInfo_ReqCoSysPlugin proto.InternalMessageInfo

func (m *ReqCoSysPlugin) GetPage() *PageInfo {
	if m != nil {
		return m.Page
	}
	return nil
}

func (m *ReqCoSysPlugin) GetReq() *CoSysPlugin {
	if m != nil {
		return m.Req
	}
	return nil
}

type ResCoSysPlugin struct {
	List                 []*CoSysPlugin `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	Count                int32          `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *ResCoSysPlugin) Reset()         { *m = ResCoSysPlugin{} }
func (m *ResCoSysPlugin) String() string { return proto.CompactTextString(m) }
func (*ResCoSysPlugin) ProtoMessage()    {}
func (*ResCoSysPlugin) Descriptor() ([]byte, []int) {
	return fileDescriptor_829ee3766b824c5c, []int{31}
}

func (m *ResCoSysPlugin) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResCoSysPlugin.Unmarshal(m, b)
}
func (m *ResCoSysPlugin) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResCoSysPlugin.Marshal(b, m, deterministic)
}
func (m *ResCoSysPlugin) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResCoSysPlugin.Merge(m, src)
}
func (m *ResCoSysPlugin) XXX_Size() int {
	return xxx_messageInfo_ResCoSysPlugin.Size(m)
}
func (m *ResCoSysPlugin) XXX_DiscardUnknown() {
	xxx_messageInfo_ResCoSysPlugin.DiscardUnknown(m)
}

var xxx_messageInfo_ResCoSysPlugin proto.InternalMessageInfo

func (m *ResCoSysPlugin) GetList() []*CoSysPlugin {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *ResCoSysPlugin) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

// TODO: 企业配置数据规则
// co_sys_setting
type CoSysSetting struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	CreatedAt            int32    `protobuf:"varint,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt            int32    `protobuf:"varint,3,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	MenuId               int64    `protobuf:"varint,4,opt,name=menu_id,json=menuId,proto3" json:"menu_id,omitempty"`
	Name                 string   `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	AddInit              bool     `protobuf:"varint,6,opt,name=add_init,json=addInit,proto3" json:"add_init,omitempty"`
	Rule                 []byte   `protobuf:"bytes,7,opt,name=rule,proto3" json:"rule,omitempty"`
	State                int32    `protobuf:"varint,8,opt,name=state,proto3" json:"state,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CoSysSetting) Reset()         { *m = CoSysSetting{} }
func (m *CoSysSetting) String() string { return proto.CompactTextString(m) }
func (*CoSysSetting) ProtoMessage()    {}
func (*CoSysSetting) Descriptor() ([]byte, []int) {
	return fileDescriptor_829ee3766b824c5c, []int{32}
}

func (m *CoSysSetting) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CoSysSetting.Unmarshal(m, b)
}
func (m *CoSysSetting) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CoSysSetting.Marshal(b, m, deterministic)
}
func (m *CoSysSetting) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CoSysSetting.Merge(m, src)
}
func (m *CoSysSetting) XXX_Size() int {
	return xxx_messageInfo_CoSysSetting.Size(m)
}
func (m *CoSysSetting) XXX_DiscardUnknown() {
	xxx_messageInfo_CoSysSetting.DiscardUnknown(m)
}

var xxx_messageInfo_CoSysSetting proto.InternalMessageInfo

func (m *CoSysSetting) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *CoSysSetting) GetCreatedAt() int32 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *CoSysSetting) GetUpdatedAt() int32 {
	if m != nil {
		return m.UpdatedAt
	}
	return 0
}

func (m *CoSysSetting) GetMenuId() int64 {
	if m != nil {
		return m.MenuId
	}
	return 0
}

func (m *CoSysSetting) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CoSysSetting) GetAddInit() bool {
	if m != nil {
		return m.AddInit
	}
	return false
}

func (m *CoSysSetting) GetRule() []byte {
	if m != nil {
		return m.Rule
	}
	return nil
}

func (m *CoSysSetting) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

type ReqCoSysSetting struct {
	Page                 *PageInfo     `protobuf:"bytes,1,opt,name=page,proto3" json:"page,omitempty"`
	Req                  *CoSysSetting `protobuf:"bytes,2,opt,name=req,proto3" json:"req,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *ReqCoSysSetting) Reset()         { *m = ReqCoSysSetting{} }
func (m *ReqCoSysSetting) String() string { return proto.CompactTextString(m) }
func (*ReqCoSysSetting) ProtoMessage()    {}
func (*ReqCoSysSetting) Descriptor() ([]byte, []int) {
	return fileDescriptor_829ee3766b824c5c, []int{33}
}

func (m *ReqCoSysSetting) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReqCoSysSetting.Unmarshal(m, b)
}
func (m *ReqCoSysSetting) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReqCoSysSetting.Marshal(b, m, deterministic)
}
func (m *ReqCoSysSetting) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqCoSysSetting.Merge(m, src)
}
func (m *ReqCoSysSetting) XXX_Size() int {
	return xxx_messageInfo_ReqCoSysSetting.Size(m)
}
func (m *ReqCoSysSetting) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqCoSysSetting.DiscardUnknown(m)
}

var xxx_messageInfo_ReqCoSysSetting proto.InternalMessageInfo

func (m *ReqCoSysSetting) GetPage() *PageInfo {
	if m != nil {
		return m.Page
	}
	return nil
}

func (m *ReqCoSysSetting) GetReq() *CoSysSetting {
	if m != nil {
		return m.Req
	}
	return nil
}

type ResCoSysSetting struct {
	List                 []*CoSysSetting `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	Count                int32           `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *ResCoSysSetting) Reset()         { *m = ResCoSysSetting{} }
func (m *ResCoSysSetting) String() string { return proto.CompactTextString(m) }
func (*ResCoSysSetting) ProtoMessage()    {}
func (*ResCoSysSetting) Descriptor() ([]byte, []int) {
	return fileDescriptor_829ee3766b824c5c, []int{34}
}

func (m *ResCoSysSetting) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResCoSysSetting.Unmarshal(m, b)
}
func (m *ResCoSysSetting) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResCoSysSetting.Marshal(b, m, deterministic)
}
func (m *ResCoSysSetting) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResCoSysSetting.Merge(m, src)
}
func (m *ResCoSysSetting) XXX_Size() int {
	return xxx_messageInfo_ResCoSysSetting.Size(m)
}
func (m *ResCoSysSetting) XXX_DiscardUnknown() {
	xxx_messageInfo_ResCoSysSetting.DiscardUnknown(m)
}

var xxx_messageInfo_ResCoSysSetting proto.InternalMessageInfo

func (m *ResCoSysSetting) GetList() []*CoSysSetting {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *ResCoSysSetting) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

// TODO: mysql 数据库部分 -----------------------------------------------------------
// TODO: 企业权益模板
// co_sys_benefit
type CoSysBenefit struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	CreatedAt            int32    `protobuf:"varint,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt            int32    `protobuf:"varint,3,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	ClassId              int64    `protobuf:"varint,4,opt,name=class_id,json=classId,proto3" json:"class_id,omitempty"`
	PluginId             int64    `protobuf:"varint,5,opt,name=plugin_id,json=pluginId,proto3" json:"plugin_id,omitempty"`
	Name                 string   `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
	Type                 int32    `protobuf:"varint,7,opt,name=type,proto3" json:"type,omitempty"`
	Mode                 int32    `protobuf:"varint,8,opt,name=mode,proto3" json:"mode,omitempty"`
	Icon                 string   `protobuf:"bytes,9,opt,name=icon,proto3" json:"icon,omitempty"`
	Parameter            []byte   `protobuf:"bytes,10,opt,name=parameter,proto3" json:"parameter,omitempty"`
	Description          string   `protobuf:"bytes,11,opt,name=description,proto3" json:"description,omitempty"`
	State                int32    `protobuf:"varint,12,opt,name=state,proto3" json:"state,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CoSysBenefit) Reset()         { *m = CoSysBenefit{} }
func (m *CoSysBenefit) String() string { return proto.CompactTextString(m) }
func (*CoSysBenefit) ProtoMessage()    {}
func (*CoSysBenefit) Descriptor() ([]byte, []int) {
	return fileDescriptor_829ee3766b824c5c, []int{35}
}

func (m *CoSysBenefit) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CoSysBenefit.Unmarshal(m, b)
}
func (m *CoSysBenefit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CoSysBenefit.Marshal(b, m, deterministic)
}
func (m *CoSysBenefit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CoSysBenefit.Merge(m, src)
}
func (m *CoSysBenefit) XXX_Size() int {
	return xxx_messageInfo_CoSysBenefit.Size(m)
}
func (m *CoSysBenefit) XXX_DiscardUnknown() {
	xxx_messageInfo_CoSysBenefit.DiscardUnknown(m)
}

var xxx_messageInfo_CoSysBenefit proto.InternalMessageInfo

func (m *CoSysBenefit) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *CoSysBenefit) GetCreatedAt() int32 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *CoSysBenefit) GetUpdatedAt() int32 {
	if m != nil {
		return m.UpdatedAt
	}
	return 0
}

func (m *CoSysBenefit) GetClassId() int64 {
	if m != nil {
		return m.ClassId
	}
	return 0
}

func (m *CoSysBenefit) GetPluginId() int64 {
	if m != nil {
		return m.PluginId
	}
	return 0
}

func (m *CoSysBenefit) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CoSysBenefit) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *CoSysBenefit) GetMode() int32 {
	if m != nil {
		return m.Mode
	}
	return 0
}

func (m *CoSysBenefit) GetIcon() string {
	if m != nil {
		return m.Icon
	}
	return ""
}

func (m *CoSysBenefit) GetParameter() []byte {
	if m != nil {
		return m.Parameter
	}
	return nil
}

func (m *CoSysBenefit) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *CoSysBenefit) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

type ReqCoSysBenefit struct {
	Page                 *PageInfo     `protobuf:"bytes,1,opt,name=page,proto3" json:"page,omitempty"`
	Req                  *CoSysBenefit `protobuf:"bytes,2,opt,name=req,proto3" json:"req,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *ReqCoSysBenefit) Reset()         { *m = ReqCoSysBenefit{} }
func (m *ReqCoSysBenefit) String() string { return proto.CompactTextString(m) }
func (*ReqCoSysBenefit) ProtoMessage()    {}
func (*ReqCoSysBenefit) Descriptor() ([]byte, []int) {
	return fileDescriptor_829ee3766b824c5c, []int{36}
}

func (m *ReqCoSysBenefit) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReqCoSysBenefit.Unmarshal(m, b)
}
func (m *ReqCoSysBenefit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReqCoSysBenefit.Marshal(b, m, deterministic)
}
func (m *ReqCoSysBenefit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqCoSysBenefit.Merge(m, src)
}
func (m *ReqCoSysBenefit) XXX_Size() int {
	return xxx_messageInfo_ReqCoSysBenefit.Size(m)
}
func (m *ReqCoSysBenefit) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqCoSysBenefit.DiscardUnknown(m)
}

var xxx_messageInfo_ReqCoSysBenefit proto.InternalMessageInfo

func (m *ReqCoSysBenefit) GetPage() *PageInfo {
	if m != nil {
		return m.Page
	}
	return nil
}

func (m *ReqCoSysBenefit) GetReq() *CoSysBenefit {
	if m != nil {
		return m.Req
	}
	return nil
}

type ResCoSysBenefit struct {
	List                 []*CoSysBenefit `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	Count                int32           `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *ResCoSysBenefit) Reset()         { *m = ResCoSysBenefit{} }
func (m *ResCoSysBenefit) String() string { return proto.CompactTextString(m) }
func (*ResCoSysBenefit) ProtoMessage()    {}
func (*ResCoSysBenefit) Descriptor() ([]byte, []int) {
	return fileDescriptor_829ee3766b824c5c, []int{37}
}

func (m *ResCoSysBenefit) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResCoSysBenefit.Unmarshal(m, b)
}
func (m *ResCoSysBenefit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResCoSysBenefit.Marshal(b, m, deterministic)
}
func (m *ResCoSysBenefit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResCoSysBenefit.Merge(m, src)
}
func (m *ResCoSysBenefit) XXX_Size() int {
	return xxx_messageInfo_ResCoSysBenefit.Size(m)
}
func (m *ResCoSysBenefit) XXX_DiscardUnknown() {
	xxx_messageInfo_ResCoSysBenefit.DiscardUnknown(m)
}

var xxx_messageInfo_ResCoSysBenefit proto.InternalMessageInfo

func (m *ResCoSysBenefit) GetList() []*CoSysBenefit {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *ResCoSysBenefit) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

// co_sys_benefit_class 企业权益分类
type CoSysBenefitClass struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	CreatedAt            int32    `protobuf:"varint,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt            int32    `protobuf:"varint,3,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	Name                 string   `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	UseCount             int64    `protobuf:"varint,5,opt,name=use_count,json=useCount,proto3" json:"use_count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CoSysBenefitClass) Reset()         { *m = CoSysBenefitClass{} }
func (m *CoSysBenefitClass) String() string { return proto.CompactTextString(m) }
func (*CoSysBenefitClass) ProtoMessage()    {}
func (*CoSysBenefitClass) Descriptor() ([]byte, []int) {
	return fileDescriptor_829ee3766b824c5c, []int{38}
}

func (m *CoSysBenefitClass) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CoSysBenefitClass.Unmarshal(m, b)
}
func (m *CoSysBenefitClass) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CoSysBenefitClass.Marshal(b, m, deterministic)
}
func (m *CoSysBenefitClass) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CoSysBenefitClass.Merge(m, src)
}
func (m *CoSysBenefitClass) XXX_Size() int {
	return xxx_messageInfo_CoSysBenefitClass.Size(m)
}
func (m *CoSysBenefitClass) XXX_DiscardUnknown() {
	xxx_messageInfo_CoSysBenefitClass.DiscardUnknown(m)
}

var xxx_messageInfo_CoSysBenefitClass proto.InternalMessageInfo

func (m *CoSysBenefitClass) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *CoSysBenefitClass) GetCreatedAt() int32 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *CoSysBenefitClass) GetUpdatedAt() int32 {
	if m != nil {
		return m.UpdatedAt
	}
	return 0
}

func (m *CoSysBenefitClass) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CoSysBenefitClass) GetUseCount() int64 {
	if m != nil {
		return m.UseCount
	}
	return 0
}

type ResCoSysBenefitClass struct {
	List                 []*CoSysBenefitClass `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	Count                int32                `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *ResCoSysBenefitClass) Reset()         { *m = ResCoSysBenefitClass{} }
func (m *ResCoSysBenefitClass) String() string { return proto.CompactTextString(m) }
func (*ResCoSysBenefitClass) ProtoMessage()    {}
func (*ResCoSysBenefitClass) Descriptor() ([]byte, []int) {
	return fileDescriptor_829ee3766b824c5c, []int{39}
}

func (m *ResCoSysBenefitClass) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResCoSysBenefitClass.Unmarshal(m, b)
}
func (m *ResCoSysBenefitClass) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResCoSysBenefitClass.Marshal(b, m, deterministic)
}
func (m *ResCoSysBenefitClass) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResCoSysBenefitClass.Merge(m, src)
}
func (m *ResCoSysBenefitClass) XXX_Size() int {
	return xxx_messageInfo_ResCoSysBenefitClass.Size(m)
}
func (m *ResCoSysBenefitClass) XXX_DiscardUnknown() {
	xxx_messageInfo_ResCoSysBenefitClass.DiscardUnknown(m)
}

var xxx_messageInfo_ResCoSysBenefitClass proto.InternalMessageInfo

func (m *ResCoSysBenefitClass) GetList() []*CoSysBenefitClass {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *ResCoSysBenefitClass) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

// TODO: 企业限制规则
// co_sys_limit
type CoSysLimit struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	CreatedAt            int32    `protobuf:"varint,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt            int32    `protobuf:"varint,3,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	Serial               string   `protobuf:"bytes,4,opt,name=serial,proto3" json:"serial,omitempty"`
	Name                 string   `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	Interval             int64    `protobuf:"varint,6,opt,name=interval,proto3" json:"interval,omitempty"`
	Unit                 string   `protobuf:"bytes,7,opt,name=unit,proto3" json:"unit,omitempty"`
	Min                  int64    `protobuf:"varint,8,opt,name=min,proto3" json:"min,omitempty"`
	Max                  int64    `protobuf:"varint,9,opt,name=max,proto3" json:"max,omitempty"`
	Tips                 string   `protobuf:"bytes,10,opt,name=tips,proto3" json:"tips,omitempty"`
	Note                 string   `protobuf:"bytes,11,opt,name=note,proto3" json:"note,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CoSysLimit) Reset()         { *m = CoSysLimit{} }
func (m *CoSysLimit) String() string { return proto.CompactTextString(m) }
func (*CoSysLimit) ProtoMessage()    {}
func (*CoSysLimit) Descriptor() ([]byte, []int) {
	return fileDescriptor_829ee3766b824c5c, []int{40}
}

func (m *CoSysLimit) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CoSysLimit.Unmarshal(m, b)
}
func (m *CoSysLimit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CoSysLimit.Marshal(b, m, deterministic)
}
func (m *CoSysLimit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CoSysLimit.Merge(m, src)
}
func (m *CoSysLimit) XXX_Size() int {
	return xxx_messageInfo_CoSysLimit.Size(m)
}
func (m *CoSysLimit) XXX_DiscardUnknown() {
	xxx_messageInfo_CoSysLimit.DiscardUnknown(m)
}

var xxx_messageInfo_CoSysLimit proto.InternalMessageInfo

func (m *CoSysLimit) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *CoSysLimit) GetCreatedAt() int32 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *CoSysLimit) GetUpdatedAt() int32 {
	if m != nil {
		return m.UpdatedAt
	}
	return 0
}

func (m *CoSysLimit) GetSerial() string {
	if m != nil {
		return m.Serial
	}
	return ""
}

func (m *CoSysLimit) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CoSysLimit) GetInterval() int64 {
	if m != nil {
		return m.Interval
	}
	return 0
}

func (m *CoSysLimit) GetUnit() string {
	if m != nil {
		return m.Unit
	}
	return ""
}

func (m *CoSysLimit) GetMin() int64 {
	if m != nil {
		return m.Min
	}
	return 0
}

func (m *CoSysLimit) GetMax() int64 {
	if m != nil {
		return m.Max
	}
	return 0
}

func (m *CoSysLimit) GetTips() string {
	if m != nil {
		return m.Tips
	}
	return ""
}

func (m *CoSysLimit) GetNote() string {
	if m != nil {
		return m.Note
	}
	return ""
}

type ReqCoSysLimit struct {
	Page                 *PageInfo   `protobuf:"bytes,1,opt,name=page,proto3" json:"page,omitempty"`
	Req                  *CoSysLimit `protobuf:"bytes,2,opt,name=req,proto3" json:"req,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *ReqCoSysLimit) Reset()         { *m = ReqCoSysLimit{} }
func (m *ReqCoSysLimit) String() string { return proto.CompactTextString(m) }
func (*ReqCoSysLimit) ProtoMessage()    {}
func (*ReqCoSysLimit) Descriptor() ([]byte, []int) {
	return fileDescriptor_829ee3766b824c5c, []int{41}
}

func (m *ReqCoSysLimit) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReqCoSysLimit.Unmarshal(m, b)
}
func (m *ReqCoSysLimit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReqCoSysLimit.Marshal(b, m, deterministic)
}
func (m *ReqCoSysLimit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqCoSysLimit.Merge(m, src)
}
func (m *ReqCoSysLimit) XXX_Size() int {
	return xxx_messageInfo_ReqCoSysLimit.Size(m)
}
func (m *ReqCoSysLimit) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqCoSysLimit.DiscardUnknown(m)
}

var xxx_messageInfo_ReqCoSysLimit proto.InternalMessageInfo

func (m *ReqCoSysLimit) GetPage() *PageInfo {
	if m != nil {
		return m.Page
	}
	return nil
}

func (m *ReqCoSysLimit) GetReq() *CoSysLimit {
	if m != nil {
		return m.Req
	}
	return nil
}

type ResCoSysLimit struct {
	List                 []*CoSysLimit `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	Count                int32         `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *ResCoSysLimit) Reset()         { *m = ResCoSysLimit{} }
func (m *ResCoSysLimit) String() string { return proto.CompactTextString(m) }
func (*ResCoSysLimit) ProtoMessage()    {}
func (*ResCoSysLimit) Descriptor() ([]byte, []int) {
	return fileDescriptor_829ee3766b824c5c, []int{42}
}

func (m *ResCoSysLimit) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResCoSysLimit.Unmarshal(m, b)
}
func (m *ResCoSysLimit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResCoSysLimit.Marshal(b, m, deterministic)
}
func (m *ResCoSysLimit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResCoSysLimit.Merge(m, src)
}
func (m *ResCoSysLimit) XXX_Size() int {
	return xxx_messageInfo_ResCoSysLimit.Size(m)
}
func (m *ResCoSysLimit) XXX_DiscardUnknown() {
	xxx_messageInfo_ResCoSysLimit.DiscardUnknown(m)
}

var xxx_messageInfo_ResCoSysLimit proto.InternalMessageInfo

func (m *ResCoSysLimit) GetList() []*CoSysLimit {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *ResCoSysLimit) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

// 企业限制数据记录
type CoSysLimitList struct {
	Coid                 int64    `protobuf:"varint,1,opt,name=coid,proto3" json:"coid,omitempty"`
	LimitId              int64    `protobuf:"varint,2,opt,name=limit_id,json=limitId,proto3" json:"limit_id,omitempty"`
	ActStart             int32    `protobuf:"varint,3,opt,name=act_start,json=actStart,proto3" json:"act_start,omitempty"`
	ActEnd               int32    `protobuf:"varint,4,opt,name=act_end,json=actEnd,proto3" json:"act_end,omitempty"`
	Value                int32    `protobuf:"varint,5,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CoSysLimitList) Reset()         { *m = CoSysLimitList{} }
func (m *CoSysLimitList) String() string { return proto.CompactTextString(m) }
func (*CoSysLimitList) ProtoMessage()    {}
func (*CoSysLimitList) Descriptor() ([]byte, []int) {
	return fileDescriptor_829ee3766b824c5c, []int{43}
}

func (m *CoSysLimitList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CoSysLimitList.Unmarshal(m, b)
}
func (m *CoSysLimitList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CoSysLimitList.Marshal(b, m, deterministic)
}
func (m *CoSysLimitList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CoSysLimitList.Merge(m, src)
}
func (m *CoSysLimitList) XXX_Size() int {
	return xxx_messageInfo_CoSysLimitList.Size(m)
}
func (m *CoSysLimitList) XXX_DiscardUnknown() {
	xxx_messageInfo_CoSysLimitList.DiscardUnknown(m)
}

var xxx_messageInfo_CoSysLimitList proto.InternalMessageInfo

func (m *CoSysLimitList) GetCoid() int64 {
	if m != nil {
		return m.Coid
	}
	return 0
}

func (m *CoSysLimitList) GetLimitId() int64 {
	if m != nil {
		return m.LimitId
	}
	return 0
}

func (m *CoSysLimitList) GetActStart() int32 {
	if m != nil {
		return m.ActStart
	}
	return 0
}

func (m *CoSysLimitList) GetActEnd() int32 {
	if m != nil {
		return m.ActEnd
	}
	return 0
}

func (m *CoSysLimitList) GetValue() int32 {
	if m != nil {
		return m.Value
	}
	return 0
}

// TODO: 企业会员权限商品管理
// co_sys_vip
type CoSysVip struct {
	Id                   int64           `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	CreatedAt            int32           `protobuf:"varint,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt            int32           `protobuf:"varint,3,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	Name                 string          `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Title                string          `protobuf:"bytes,5,opt,name=title,proto3" json:"title,omitempty"`
	TypeId               []int64         `protobuf:"varint,6,rep,packed,name=type_id,json=typeId,proto3" json:"type_id,omitempty"`
	Recommend            []int64         `protobuf:"varint,7,rep,packed,name=recommend,proto3" json:"recommend,omitempty"`
	PriceLabel           string          `protobuf:"bytes,8,opt,name=price_label,json=priceLabel,proto3" json:"price_label,omitempty"`
	Cover                string          `protobuf:"bytes,9,opt,name=cover,proto3" json:"cover,omitempty"`
	Quota                int32           `protobuf:"varint,10,opt,name=quota,proto3" json:"quota,omitempty"`
	QuotaNum             int32           `protobuf:"varint,11,opt,name=quota_num,json=quotaNum,proto3" json:"quota_num,omitempty"`
	Content              string          `protobuf:"bytes,12,opt,name=content,proto3" json:"content,omitempty"`
	Rule                 []*CoSysVipRule `protobuf:"bytes,13,rep,name=rule,proto3" json:"rule,omitempty"`
	Sales                int32           `protobuf:"varint,14,opt,name=sales,proto3" json:"sales,omitempty"`
	Sort                 int32           `protobuf:"varint,15,opt,name=sort,proto3" json:"sort,omitempty"`
	State                int32           `protobuf:"varint,16,opt,name=state,proto3" json:"state,omitempty"`
	TypeInfo             []*CoTypeSimple `protobuf:"bytes,17,rep,name=type_info,json=typeInfo,proto3" json:"type_info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *CoSysVip) Reset()         { *m = CoSysVip{} }
func (m *CoSysVip) String() string { return proto.CompactTextString(m) }
func (*CoSysVip) ProtoMessage()    {}
func (*CoSysVip) Descriptor() ([]byte, []int) {
	return fileDescriptor_829ee3766b824c5c, []int{44}
}

func (m *CoSysVip) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CoSysVip.Unmarshal(m, b)
}
func (m *CoSysVip) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CoSysVip.Marshal(b, m, deterministic)
}
func (m *CoSysVip) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CoSysVip.Merge(m, src)
}
func (m *CoSysVip) XXX_Size() int {
	return xxx_messageInfo_CoSysVip.Size(m)
}
func (m *CoSysVip) XXX_DiscardUnknown() {
	xxx_messageInfo_CoSysVip.DiscardUnknown(m)
}

var xxx_messageInfo_CoSysVip proto.InternalMessageInfo

func (m *CoSysVip) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *CoSysVip) GetCreatedAt() int32 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *CoSysVip) GetUpdatedAt() int32 {
	if m != nil {
		return m.UpdatedAt
	}
	return 0
}

func (m *CoSysVip) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CoSysVip) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *CoSysVip) GetTypeId() []int64 {
	if m != nil {
		return m.TypeId
	}
	return nil
}

func (m *CoSysVip) GetRecommend() []int64 {
	if m != nil {
		return m.Recommend
	}
	return nil
}

func (m *CoSysVip) GetPriceLabel() string {
	if m != nil {
		return m.PriceLabel
	}
	return ""
}

func (m *CoSysVip) GetCover() string {
	if m != nil {
		return m.Cover
	}
	return ""
}

func (m *CoSysVip) GetQuota() int32 {
	if m != nil {
		return m.Quota
	}
	return 0
}

func (m *CoSysVip) GetQuotaNum() int32 {
	if m != nil {
		return m.QuotaNum
	}
	return 0
}

func (m *CoSysVip) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *CoSysVip) GetRule() []*CoSysVipRule {
	if m != nil {
		return m.Rule
	}
	return nil
}

func (m *CoSysVip) GetSales() int32 {
	if m != nil {
		return m.Sales
	}
	return 0
}

func (m *CoSysVip) GetSort() int32 {
	if m != nil {
		return m.Sort
	}
	return 0
}

func (m *CoSysVip) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *CoSysVip) GetTypeInfo() []*CoTypeSimple {
	if m != nil {
		return m.TypeInfo
	}
	return nil
}

type CoSysVipRule struct {
	Name                 string          `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Title                string          `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	PriceDot             int32           `protobuf:"varint,3,opt,name=price_dot,json=priceDot,proto3" json:"price_dot,omitempty"`
	Price                int32           `protobuf:"varint,4,opt,name=price,proto3" json:"price,omitempty"`
	Sales                int32           `protobuf:"varint,5,opt,name=sales,proto3" json:"sales,omitempty"`
	VipList              []*CoSysVipList `protobuf:"bytes,6,rep,name=vip_list,json=vipList,proto3" json:"vip_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *CoSysVipRule) Reset()         { *m = CoSysVipRule{} }
func (m *CoSysVipRule) String() string { return proto.CompactTextString(m) }
func (*CoSysVipRule) ProtoMessage()    {}
func (*CoSysVipRule) Descriptor() ([]byte, []int) {
	return fileDescriptor_829ee3766b824c5c, []int{45}
}

func (m *CoSysVipRule) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CoSysVipRule.Unmarshal(m, b)
}
func (m *CoSysVipRule) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CoSysVipRule.Marshal(b, m, deterministic)
}
func (m *CoSysVipRule) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CoSysVipRule.Merge(m, src)
}
func (m *CoSysVipRule) XXX_Size() int {
	return xxx_messageInfo_CoSysVipRule.Size(m)
}
func (m *CoSysVipRule) XXX_DiscardUnknown() {
	xxx_messageInfo_CoSysVipRule.DiscardUnknown(m)
}

var xxx_messageInfo_CoSysVipRule proto.InternalMessageInfo

func (m *CoSysVipRule) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CoSysVipRule) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *CoSysVipRule) GetPriceDot() int32 {
	if m != nil {
		return m.PriceDot
	}
	return 0
}

func (m *CoSysVipRule) GetPrice() int32 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *CoSysVipRule) GetSales() int32 {
	if m != nil {
		return m.Sales
	}
	return 0
}

func (m *CoSysVipRule) GetVipList() []*CoSysVipList {
	if m != nil {
		return m.VipList
	}
	return nil
}

type CoSysVipList struct {
	Label                string   `protobuf:"bytes,1,opt,name=label,proto3" json:"label,omitempty"`
	Type                 int32    `protobuf:"varint,2,opt,name=type,proto3" json:"type,omitempty"`
	Level                int32    `protobuf:"varint,3,opt,name=level,proto3" json:"level,omitempty"`
	LimitId              int64    `protobuf:"varint,4,opt,name=limit_id,json=limitId,proto3" json:"limit_id,omitempty"`
	LimitDays            int32    `protobuf:"varint,5,opt,name=limit_days,json=limitDays,proto3" json:"limit_days,omitempty"`
	LimitValue           int32    `protobuf:"varint,6,opt,name=limit_value,json=limitValue,proto3" json:"limit_value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CoSysVipList) Reset()         { *m = CoSysVipList{} }
func (m *CoSysVipList) String() string { return proto.CompactTextString(m) }
func (*CoSysVipList) ProtoMessage()    {}
func (*CoSysVipList) Descriptor() ([]byte, []int) {
	return fileDescriptor_829ee3766b824c5c, []int{46}
}

func (m *CoSysVipList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CoSysVipList.Unmarshal(m, b)
}
func (m *CoSysVipList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CoSysVipList.Marshal(b, m, deterministic)
}
func (m *CoSysVipList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CoSysVipList.Merge(m, src)
}
func (m *CoSysVipList) XXX_Size() int {
	return xxx_messageInfo_CoSysVipList.Size(m)
}
func (m *CoSysVipList) XXX_DiscardUnknown() {
	xxx_messageInfo_CoSysVipList.DiscardUnknown(m)
}

var xxx_messageInfo_CoSysVipList proto.InternalMessageInfo

func (m *CoSysVipList) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

func (m *CoSysVipList) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *CoSysVipList) GetLevel() int32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *CoSysVipList) GetLimitId() int64 {
	if m != nil {
		return m.LimitId
	}
	return 0
}

func (m *CoSysVipList) GetLimitDays() int32 {
	if m != nil {
		return m.LimitDays
	}
	return 0
}

func (m *CoSysVipList) GetLimitValue() int32 {
	if m != nil {
		return m.LimitValue
	}
	return 0
}

type ReqCoSysVip struct {
	Page                 *PageInfo `protobuf:"bytes,1,opt,name=page,proto3" json:"page,omitempty"`
	Req                  *CoSysVip `protobuf:"bytes,2,opt,name=req,proto3" json:"req,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *ReqCoSysVip) Reset()         { *m = ReqCoSysVip{} }
func (m *ReqCoSysVip) String() string { return proto.CompactTextString(m) }
func (*ReqCoSysVip) ProtoMessage()    {}
func (*ReqCoSysVip) Descriptor() ([]byte, []int) {
	return fileDescriptor_829ee3766b824c5c, []int{47}
}

func (m *ReqCoSysVip) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReqCoSysVip.Unmarshal(m, b)
}
func (m *ReqCoSysVip) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReqCoSysVip.Marshal(b, m, deterministic)
}
func (m *ReqCoSysVip) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqCoSysVip.Merge(m, src)
}
func (m *ReqCoSysVip) XXX_Size() int {
	return xxx_messageInfo_ReqCoSysVip.Size(m)
}
func (m *ReqCoSysVip) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqCoSysVip.DiscardUnknown(m)
}

var xxx_messageInfo_ReqCoSysVip proto.InternalMessageInfo

func (m *ReqCoSysVip) GetPage() *PageInfo {
	if m != nil {
		return m.Page
	}
	return nil
}

func (m *ReqCoSysVip) GetReq() *CoSysVip {
	if m != nil {
		return m.Req
	}
	return nil
}

type ResCoSysVip struct {
	List                 []*CoSysVip `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	Count                int32       `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *ResCoSysVip) Reset()         { *m = ResCoSysVip{} }
func (m *ResCoSysVip) String() string { return proto.CompactTextString(m) }
func (*ResCoSysVip) ProtoMessage()    {}
func (*ResCoSysVip) Descriptor() ([]byte, []int) {
	return fileDescriptor_829ee3766b824c5c, []int{48}
}

func (m *ResCoSysVip) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResCoSysVip.Unmarshal(m, b)
}
func (m *ResCoSysVip) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResCoSysVip.Marshal(b, m, deterministic)
}
func (m *ResCoSysVip) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResCoSysVip.Merge(m, src)
}
func (m *ResCoSysVip) XXX_Size() int {
	return xxx_messageInfo_ResCoSysVip.Size(m)
}
func (m *ResCoSysVip) XXX_DiscardUnknown() {
	xxx_messageInfo_ResCoSysVip.DiscardUnknown(m)
}

var xxx_messageInfo_ResCoSysVip proto.InternalMessageInfo

func (m *ResCoSysVip) GetList() []*CoSysVip {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *ResCoSysVip) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

// ID
type Uid struct {
	Uid                  int64    `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Coid                 int64    `protobuf:"varint,2,opt,name=coid,proto3" json:"coid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Uid) Reset()         { *m = Uid{} }
func (m *Uid) String() string { return proto.CompactTextString(m) }
func (*Uid) ProtoMessage()    {}
func (*Uid) Descriptor() ([]byte, []int) {
	return fileDescriptor_829ee3766b824c5c, []int{49}
}

func (m *Uid) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Uid.Unmarshal(m, b)
}
func (m *Uid) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Uid.Marshal(b, m, deterministic)
}
func (m *Uid) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Uid.Merge(m, src)
}
func (m *Uid) XXX_Size() int {
	return xxx_messageInfo_Uid.Size(m)
}
func (m *Uid) XXX_DiscardUnknown() {
	xxx_messageInfo_Uid.DiscardUnknown(m)
}

var xxx_messageInfo_Uid proto.InternalMessageInfo

func (m *Uid) GetUid() int64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *Uid) GetCoid() int64 {
	if m != nil {
		return m.Coid
	}
	return 0
}

type IdCoId struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Coid                 int64    `protobuf:"varint,2,opt,name=coid,proto3" json:"coid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IdCoId) Reset()         { *m = IdCoId{} }
func (m *IdCoId) String() string { return proto.CompactTextString(m) }
func (*IdCoId) ProtoMessage()    {}
func (*IdCoId) Descriptor() ([]byte, []int) {
	return fileDescriptor_829ee3766b824c5c, []int{50}
}

func (m *IdCoId) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IdCoId.Unmarshal(m, b)
}
func (m *IdCoId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IdCoId.Marshal(b, m, deterministic)
}
func (m *IdCoId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IdCoId.Merge(m, src)
}
func (m *IdCoId) XXX_Size() int {
	return xxx_messageInfo_IdCoId.Size(m)
}
func (m *IdCoId) XXX_DiscardUnknown() {
	xxx_messageInfo_IdCoId.DiscardUnknown(m)
}

var xxx_messageInfo_IdCoId proto.InternalMessageInfo

func (m *IdCoId) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *IdCoId) GetCoid() int64 {
	if m != nil {
		return m.Coid
	}
	return 0
}

// 权限检查
type Permissions struct {
	Coid                 int64    `protobuf:"varint,1,opt,name=coid,proto3" json:"coid,omitempty"`
	Uid                  int64    `protobuf:"varint,2,opt,name=uid,proto3" json:"uid,omitempty"`
	Path                 string   `protobuf:"bytes,3,opt,name=path,proto3" json:"path,omitempty"`
	Method               string   `protobuf:"bytes,4,opt,name=method,proto3" json:"method,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Permissions) Reset()         { *m = Permissions{} }
func (m *Permissions) String() string { return proto.CompactTextString(m) }
func (*Permissions) ProtoMessage()    {}
func (*Permissions) Descriptor() ([]byte, []int) {
	return fileDescriptor_829ee3766b824c5c, []int{51}
}

func (m *Permissions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Permissions.Unmarshal(m, b)
}
func (m *Permissions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Permissions.Marshal(b, m, deterministic)
}
func (m *Permissions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Permissions.Merge(m, src)
}
func (m *Permissions) XXX_Size() int {
	return xxx_messageInfo_Permissions.Size(m)
}
func (m *Permissions) XXX_DiscardUnknown() {
	xxx_messageInfo_Permissions.DiscardUnknown(m)
}

var xxx_messageInfo_Permissions proto.InternalMessageInfo

func (m *Permissions) GetCoid() int64 {
	if m != nil {
		return m.Coid
	}
	return 0
}

func (m *Permissions) GetUid() int64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *Permissions) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *Permissions) GetMethod() string {
	if m != nil {
		return m.Method
	}
	return ""
}

// TODO: 企业用户信息
// 企业信息 - 用户拥有的企业列表 TODO: 附加
type User_CoUser struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	TypeClassName        []string `protobuf:"bytes,3,rep,name=type_class_name,json=typeClassName,proto3" json:"type_class_name,omitempty"`
	Logo                 string   `protobuf:"bytes,4,opt,name=logo,proto3" json:"logo,omitempty"`
	CertType             int32    `protobuf:"varint,5,opt,name=cert_type,json=certType,proto3" json:"cert_type,omitempty"`
	State                int32    `protobuf:"varint,6,opt,name=state,proto3" json:"state,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *User_CoUser) Reset()         { *m = User_CoUser{} }
func (m *User_CoUser) String() string { return proto.CompactTextString(m) }
func (*User_CoUser) ProtoMessage()    {}
func (*User_CoUser) Descriptor() ([]byte, []int) {
	return fileDescriptor_829ee3766b824c5c, []int{52}
}

func (m *User_CoUser) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_User_CoUser.Unmarshal(m, b)
}
func (m *User_CoUser) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_User_CoUser.Marshal(b, m, deterministic)
}
func (m *User_CoUser) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User_CoUser.Merge(m, src)
}
func (m *User_CoUser) XXX_Size() int {
	return xxx_messageInfo_User_CoUser.Size(m)
}
func (m *User_CoUser) XXX_DiscardUnknown() {
	xxx_messageInfo_User_CoUser.DiscardUnknown(m)
}

var xxx_messageInfo_User_CoUser proto.InternalMessageInfo

func (m *User_CoUser) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *User_CoUser) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *User_CoUser) GetTypeClassName() []string {
	if m != nil {
		return m.TypeClassName
	}
	return nil
}

func (m *User_CoUser) GetLogo() string {
	if m != nil {
		return m.Logo
	}
	return ""
}

func (m *User_CoUser) GetCertType() int32 {
	if m != nil {
		return m.CertType
	}
	return 0
}

func (m *User_CoUser) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

type Res_User_CoUser struct {
	List                 []*User_CoUser `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *Res_User_CoUser) Reset()         { *m = Res_User_CoUser{} }
func (m *Res_User_CoUser) String() string { return proto.CompactTextString(m) }
func (*Res_User_CoUser) ProtoMessage()    {}
func (*Res_User_CoUser) Descriptor() ([]byte, []int) {
	return fileDescriptor_829ee3766b824c5c, []int{53}
}

func (m *Res_User_CoUser) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Res_User_CoUser.Unmarshal(m, b)
}
func (m *Res_User_CoUser) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Res_User_CoUser.Marshal(b, m, deterministic)
}
func (m *Res_User_CoUser) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Res_User_CoUser.Merge(m, src)
}
func (m *Res_User_CoUser) XXX_Size() int {
	return xxx_messageInfo_Res_User_CoUser.Size(m)
}
func (m *Res_User_CoUser) XXX_DiscardUnknown() {
	xxx_messageInfo_Res_User_CoUser.DiscardUnknown(m)
}

var xxx_messageInfo_Res_User_CoUser proto.InternalMessageInfo

func (m *Res_User_CoUser) GetList() []*User_CoUser {
	if m != nil {
		return m.List
	}
	return nil
}

// co_user 企业信息
type CoUser struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	CreatedAt            int32    `protobuf:"varint,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt            int32    `protobuf:"varint,3,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	Name                 string   `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	TypeId               []int64  `protobuf:"varint,5,rep,packed,name=type_id,json=typeId,proto3" json:"type_id,omitempty"`
	Logo                 string   `protobuf:"bytes,6,opt,name=logo,proto3" json:"logo,omitempty"`
	CertType             int32    `protobuf:"varint,7,opt,name=cert_type,json=certType,proto3" json:"cert_type,omitempty"`
	Chain                int32    `protobuf:"varint,8,opt,name=chain,proto3" json:"chain,omitempty"`
	Province             int32    `protobuf:"varint,9,opt,name=province,proto3" json:"province,omitempty"`
	City                 int32    `protobuf:"varint,10,opt,name=city,proto3" json:"city,omitempty"`
	County               int32    `protobuf:"varint,11,opt,name=county,proto3" json:"county,omitempty"`
	State                int32    `protobuf:"varint,12,opt,name=state,proto3" json:"state,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CoUser) Reset()         { *m = CoUser{} }
func (m *CoUser) String() string { return proto.CompactTextString(m) }
func (*CoUser) ProtoMessage()    {}
func (*CoUser) Descriptor() ([]byte, []int) {
	return fileDescriptor_829ee3766b824c5c, []int{54}
}

func (m *CoUser) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CoUser.Unmarshal(m, b)
}
func (m *CoUser) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CoUser.Marshal(b, m, deterministic)
}
func (m *CoUser) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CoUser.Merge(m, src)
}
func (m *CoUser) XXX_Size() int {
	return xxx_messageInfo_CoUser.Size(m)
}
func (m *CoUser) XXX_DiscardUnknown() {
	xxx_messageInfo_CoUser.DiscardUnknown(m)
}

var xxx_messageInfo_CoUser proto.InternalMessageInfo

func (m *CoUser) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *CoUser) GetCreatedAt() int32 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *CoUser) GetUpdatedAt() int32 {
	if m != nil {
		return m.UpdatedAt
	}
	return 0
}

func (m *CoUser) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CoUser) GetTypeId() []int64 {
	if m != nil {
		return m.TypeId
	}
	return nil
}

func (m *CoUser) GetLogo() string {
	if m != nil {
		return m.Logo
	}
	return ""
}

func (m *CoUser) GetCertType() int32 {
	if m != nil {
		return m.CertType
	}
	return 0
}

func (m *CoUser) GetChain() int32 {
	if m != nil {
		return m.Chain
	}
	return 0
}

func (m *CoUser) GetProvince() int32 {
	if m != nil {
		return m.Province
	}
	return 0
}

func (m *CoUser) GetCity() int32 {
	if m != nil {
		return m.City
	}
	return 0
}

func (m *CoUser) GetCounty() int32 {
	if m != nil {
		return m.County
	}
	return 0
}

func (m *CoUser) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

type ReqCoUser struct {
	Page                 *PageInfo `protobuf:"bytes,1,opt,name=page,proto3" json:"page,omitempty"`
	Req                  *CoUser   `protobuf:"bytes,2,opt,name=req,proto3" json:"req,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *ReqCoUser) Reset()         { *m = ReqCoUser{} }
func (m *ReqCoUser) String() string { return proto.CompactTextString(m) }
func (*ReqCoUser) ProtoMessage()    {}
func (*ReqCoUser) Descriptor() ([]byte, []int) {
	return fileDescriptor_829ee3766b824c5c, []int{55}
}

func (m *ReqCoUser) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReqCoUser.Unmarshal(m, b)
}
func (m *ReqCoUser) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReqCoUser.Marshal(b, m, deterministic)
}
func (m *ReqCoUser) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqCoUser.Merge(m, src)
}
func (m *ReqCoUser) XXX_Size() int {
	return xxx_messageInfo_ReqCoUser.Size(m)
}
func (m *ReqCoUser) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqCoUser.DiscardUnknown(m)
}

var xxx_messageInfo_ReqCoUser proto.InternalMessageInfo

func (m *ReqCoUser) GetPage() *PageInfo {
	if m != nil {
		return m.Page
	}
	return nil
}

func (m *ReqCoUser) GetReq() *CoUser {
	if m != nil {
		return m.Req
	}
	return nil
}

type ResCoUser struct {
	List                 []*CoUser `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	Count                int32     `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *ResCoUser) Reset()         { *m = ResCoUser{} }
func (m *ResCoUser) String() string { return proto.CompactTextString(m) }
func (*ResCoUser) ProtoMessage()    {}
func (*ResCoUser) Descriptor() ([]byte, []int) {
	return fileDescriptor_829ee3766b824c5c, []int{56}
}

func (m *ResCoUser) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResCoUser.Unmarshal(m, b)
}
func (m *ResCoUser) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResCoUser.Marshal(b, m, deterministic)
}
func (m *ResCoUser) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResCoUser.Merge(m, src)
}
func (m *ResCoUser) XXX_Size() int {
	return xxx_messageInfo_ResCoUser.Size(m)
}
func (m *ResCoUser) XXX_DiscardUnknown() {
	xxx_messageInfo_ResCoUser.DiscardUnknown(m)
}

var xxx_messageInfo_ResCoUser proto.InternalMessageInfo

func (m *ResCoUser) GetList() []*CoUser {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *ResCoUser) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

// co_user_data 企业详细资料
type CoUserData struct {
	Id                   int64     `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Loc                  []float64 `protobuf:"fixed64,12,rep,packed,name=loc,proto3" json:"loc,omitempty"`
	Address              string    `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
	CertId               int64     `protobuf:"varint,4,opt,name=cert_id,json=certId,proto3" json:"cert_id,omitempty"`
	ChainMax             int32     `protobuf:"varint,5,opt,name=chain_max,json=chainMax,proto3" json:"chain_max,omitempty"`
	Phone                string    `protobuf:"bytes,6,opt,name=phone,proto3" json:"phone,omitempty"`
	Qq                   string    `protobuf:"bytes,7,opt,name=qq,proto3" json:"qq,omitempty"`
	WeChat               string    `protobuf:"bytes,8,opt,name=we_chat,json=weChat,proto3" json:"we_chat,omitempty"`
	Intro                string    `protobuf:"bytes,9,opt,name=intro,proto3" json:"intro,omitempty"`
	CreatedUid           int64     `protobuf:"varint,10,opt,name=created_uid,json=createdUid,proto3" json:"created_uid,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *CoUserData) Reset()         { *m = CoUserData{} }
func (m *CoUserData) String() string { return proto.CompactTextString(m) }
func (*CoUserData) ProtoMessage()    {}
func (*CoUserData) Descriptor() ([]byte, []int) {
	return fileDescriptor_829ee3766b824c5c, []int{57}
}

func (m *CoUserData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CoUserData.Unmarshal(m, b)
}
func (m *CoUserData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CoUserData.Marshal(b, m, deterministic)
}
func (m *CoUserData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CoUserData.Merge(m, src)
}
func (m *CoUserData) XXX_Size() int {
	return xxx_messageInfo_CoUserData.Size(m)
}
func (m *CoUserData) XXX_DiscardUnknown() {
	xxx_messageInfo_CoUserData.DiscardUnknown(m)
}

var xxx_messageInfo_CoUserData proto.InternalMessageInfo

func (m *CoUserData) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *CoUserData) GetLoc() []float64 {
	if m != nil {
		return m.Loc
	}
	return nil
}

func (m *CoUserData) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *CoUserData) GetCertId() int64 {
	if m != nil {
		return m.CertId
	}
	return 0
}

func (m *CoUserData) GetChainMax() int32 {
	if m != nil {
		return m.ChainMax
	}
	return 0
}

func (m *CoUserData) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

func (m *CoUserData) GetQq() string {
	if m != nil {
		return m.Qq
	}
	return ""
}

func (m *CoUserData) GetWeChat() string {
	if m != nil {
		return m.WeChat
	}
	return ""
}

func (m *CoUserData) GetIntro() string {
	if m != nil {
		return m.Intro
	}
	return ""
}

func (m *CoUserData) GetCreatedUid() int64 {
	if m != nil {
		return m.CreatedUid
	}
	return 0
}

// 更新企业联系我们信息 请求
type ReqUserContactData struct {
	User                 *CoUser     `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	Data                 *CoUserData `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *ReqUserContactData) Reset()         { *m = ReqUserContactData{} }
func (m *ReqUserContactData) String() string { return proto.CompactTextString(m) }
func (*ReqUserContactData) ProtoMessage()    {}
func (*ReqUserContactData) Descriptor() ([]byte, []int) {
	return fileDescriptor_829ee3766b824c5c, []int{58}
}

func (m *ReqUserContactData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReqUserContactData.Unmarshal(m, b)
}
func (m *ReqUserContactData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReqUserContactData.Marshal(b, m, deterministic)
}
func (m *ReqUserContactData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqUserContactData.Merge(m, src)
}
func (m *ReqUserContactData) XXX_Size() int {
	return xxx_messageInfo_ReqUserContactData.Size(m)
}
func (m *ReqUserContactData) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqUserContactData.DiscardUnknown(m)
}

var xxx_messageInfo_ReqUserContactData proto.InternalMessageInfo

func (m *ReqUserContactData) GetUser() *CoUser {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *ReqUserContactData) GetData() *CoUserData {
	if m != nil {
		return m.Data
	}
	return nil
}

// TODO: 企业用户地址库
// co_user_address
type CoUserAddress struct {
	Id                   int64                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	CreatedAt            int32                 `protobuf:"varint,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt            int32                 `protobuf:"varint,3,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	Coid                 int64                 `protobuf:"varint,4,opt,name=coid,proto3" json:"coid,omitempty"`
	Name                 string                `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	Phone                string                `protobuf:"bytes,6,opt,name=phone,proto3" json:"phone,omitempty"`
	Province             int32                 `protobuf:"varint,7,opt,name=province,proto3" json:"province,omitempty"`
	City                 int32                 `protobuf:"varint,8,opt,name=city,proto3" json:"city,omitempty"`
	County               int32                 `protobuf:"varint,9,opt,name=county,proto3" json:"county,omitempty"`
	Address              string                `protobuf:"bytes,10,opt,name=address,proto3" json:"address,omitempty"`
	Link                 []*CoUserAddress_Link `protobuf:"bytes,11,rep,name=link,proto3" json:"link,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *CoUserAddress) Reset()         { *m = CoUserAddress{} }
func (m *CoUserAddress) String() string { return proto.CompactTextString(m) }
func (*CoUserAddress) ProtoMessage()    {}
func (*CoUserAddress) Descriptor() ([]byte, []int) {
	return fileDescriptor_829ee3766b824c5c, []int{59}
}

func (m *CoUserAddress) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CoUserAddress.Unmarshal(m, b)
}
func (m *CoUserAddress) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CoUserAddress.Marshal(b, m, deterministic)
}
func (m *CoUserAddress) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CoUserAddress.Merge(m, src)
}
func (m *CoUserAddress) XXX_Size() int {
	return xxx_messageInfo_CoUserAddress.Size(m)
}
func (m *CoUserAddress) XXX_DiscardUnknown() {
	xxx_messageInfo_CoUserAddress.DiscardUnknown(m)
}

var xxx_messageInfo_CoUserAddress proto.InternalMessageInfo

func (m *CoUserAddress) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *CoUserAddress) GetCreatedAt() int32 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *CoUserAddress) GetUpdatedAt() int32 {
	if m != nil {
		return m.UpdatedAt
	}
	return 0
}

func (m *CoUserAddress) GetCoid() int64 {
	if m != nil {
		return m.Coid
	}
	return 0
}

func (m *CoUserAddress) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CoUserAddress) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

func (m *CoUserAddress) GetProvince() int32 {
	if m != nil {
		return m.Province
	}
	return 0
}

func (m *CoUserAddress) GetCity() int32 {
	if m != nil {
		return m.City
	}
	return 0
}

func (m *CoUserAddress) GetCounty() int32 {
	if m != nil {
		return m.County
	}
	return 0
}

func (m *CoUserAddress) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *CoUserAddress) GetLink() []*CoUserAddress_Link {
	if m != nil {
		return m.Link
	}
	return nil
}

type CoUserAddress_Link struct {
	AddressId            int64    `protobuf:"varint,1,opt,name=address_id,json=addressId,proto3" json:"address_id,omitempty"`
	Type                 int32    `protobuf:"varint,2,opt,name=type,proto3" json:"type,omitempty"`
	Default              int32    `protobuf:"varint,3,opt,name=default,proto3" json:"default,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CoUserAddress_Link) Reset()         { *m = CoUserAddress_Link{} }
func (m *CoUserAddress_Link) String() string { return proto.CompactTextString(m) }
func (*CoUserAddress_Link) ProtoMessage()    {}
func (*CoUserAddress_Link) Descriptor() ([]byte, []int) {
	return fileDescriptor_829ee3766b824c5c, []int{59, 0}
}

func (m *CoUserAddress_Link) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CoUserAddress_Link.Unmarshal(m, b)
}
func (m *CoUserAddress_Link) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CoUserAddress_Link.Marshal(b, m, deterministic)
}
func (m *CoUserAddress_Link) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CoUserAddress_Link.Merge(m, src)
}
func (m *CoUserAddress_Link) XXX_Size() int {
	return xxx_messageInfo_CoUserAddress_Link.Size(m)
}
func (m *CoUserAddress_Link) XXX_DiscardUnknown() {
	xxx_messageInfo_CoUserAddress_Link.DiscardUnknown(m)
}

var xxx_messageInfo_CoUserAddress_Link proto.InternalMessageInfo

func (m *CoUserAddress_Link) GetAddressId() int64 {
	if m != nil {
		return m.AddressId
	}
	return 0
}

func (m *CoUserAddress_Link) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *CoUserAddress_Link) GetDefault() int32 {
	if m != nil {
		return m.Default
	}
	return 0
}

type ReqCoUserAddress struct {
	Page                 *PageInfo      `protobuf:"bytes,1,opt,name=page,proto3" json:"page,omitempty"`
	Req                  *CoUserAddress `protobuf:"bytes,2,opt,name=req,proto3" json:"req,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *ReqCoUserAddress) Reset()         { *m = ReqCoUserAddress{} }
func (m *ReqCoUserAddress) String() string { return proto.CompactTextString(m) }
func (*ReqCoUserAddress) ProtoMessage()    {}
func (*ReqCoUserAddress) Descriptor() ([]byte, []int) {
	return fileDescriptor_829ee3766b824c5c, []int{60}
}

func (m *ReqCoUserAddress) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReqCoUserAddress.Unmarshal(m, b)
}
func (m *ReqCoUserAddress) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReqCoUserAddress.Marshal(b, m, deterministic)
}
func (m *ReqCoUserAddress) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqCoUserAddress.Merge(m, src)
}
func (m *ReqCoUserAddress) XXX_Size() int {
	return xxx_messageInfo_ReqCoUserAddress.Size(m)
}
func (m *ReqCoUserAddress) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqCoUserAddress.DiscardUnknown(m)
}

var xxx_messageInfo_ReqCoUserAddress proto.InternalMessageInfo

func (m *ReqCoUserAddress) GetPage() *PageInfo {
	if m != nil {
		return m.Page
	}
	return nil
}

func (m *ReqCoUserAddress) GetReq() *CoUserAddress {
	if m != nil {
		return m.Req
	}
	return nil
}

type ResCoUserAddress struct {
	List                 []*CoUserAddress `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	Count                int32            `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *ResCoUserAddress) Reset()         { *m = ResCoUserAddress{} }
func (m *ResCoUserAddress) String() string { return proto.CompactTextString(m) }
func (*ResCoUserAddress) ProtoMessage()    {}
func (*ResCoUserAddress) Descriptor() ([]byte, []int) {
	return fileDescriptor_829ee3766b824c5c, []int{61}
}

func (m *ResCoUserAddress) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResCoUserAddress.Unmarshal(m, b)
}
func (m *ResCoUserAddress) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResCoUserAddress.Marshal(b, m, deterministic)
}
func (m *ResCoUserAddress) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResCoUserAddress.Merge(m, src)
}
func (m *ResCoUserAddress) XXX_Size() int {
	return xxx_messageInfo_ResCoUserAddress.Size(m)
}
func (m *ResCoUserAddress) XXX_DiscardUnknown() {
	xxx_messageInfo_ResCoUserAddress.DiscardUnknown(m)
}

var xxx_messageInfo_ResCoUserAddress proto.InternalMessageInfo

func (m *ResCoUserAddress) GetList() []*CoUserAddress {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *ResCoUserAddress) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

// TODO: 企业用户 企业权益部分
// co_user_benefit
type CoUserBenefit struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	CreatedAt            int32    `protobuf:"varint,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt            int32    `protobuf:"varint,3,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	Coid                 int64    `protobuf:"varint,4,opt,name=coid,proto3" json:"coid,omitempty"`
	Name                 string   `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	ColorCode            string   `protobuf:"bytes,6,opt,name=color_code,json=colorCode,proto3" json:"color_code,omitempty"`
	CoverUrl             string   `protobuf:"bytes,7,opt,name=cover_url,json=coverUrl,proto3" json:"cover_url,omitempty"`
	ClaimType            int32    `protobuf:"varint,8,opt,name=claim_type,json=claimType,proto3" json:"claim_type,omitempty"`
	Price                float64  `protobuf:"fixed64,11,opt,name=price,proto3" json:"price,omitempty"`
	StockNum             int32    `protobuf:"varint,12,opt,name=stock_num,json=stockNum,proto3" json:"stock_num,omitempty"`
	TermType             int32    `protobuf:"varint,13,opt,name=term_type,json=termType,proto3" json:"term_type,omitempty"`
	TermDays             int64    `protobuf:"varint,14,opt,name=term_days,json=termDays,proto3" json:"term_days,omitempty"`
	TermBeginAt          int64    `protobuf:"varint,15,opt,name=term_begin_at,json=termBeginAt,proto3" json:"term_begin_at,omitempty"`
	TermEndAt            int64    `protobuf:"varint,16,opt,name=term_end_at,json=termEndAt,proto3" json:"term_end_at,omitempty"`
	IsRepeatable         int32    `protobuf:"varint,17,opt,name=is_repeatable,json=isRepeatable,proto3" json:"is_repeatable,omitempty"`
	RepeatableLimit      int32    `protobuf:"varint,18,opt,name=repeatable_limit,json=repeatableLimit,proto3" json:"repeatable_limit,omitempty"`
	RequireMobile        int32    `protobuf:"varint,19,opt,name=require_mobile,json=requireMobile,proto3" json:"require_mobile,omitempty"`
	RequireProfile       int32    `protobuf:"varint,20,opt,name=require_profile,json=requireProfile,proto3" json:"require_profile,omitempty"`
	GoodsNo              string   `protobuf:"bytes,21,opt,name=goods_no,json=goodsNo,proto3" json:"goods_no,omitempty"`
	ServicePhone         string   `protobuf:"bytes,22,opt,name=service_phone,json=servicePhone,proto3" json:"service_phone,omitempty"`
	Description          string   `protobuf:"bytes,23,opt,name=description,proto3" json:"description,omitempty"`
	State                int32    `protobuf:"varint,24,opt,name=state,proto3" json:"state,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CoUserBenefit) Reset()         { *m = CoUserBenefit{} }
func (m *CoUserBenefit) String() string { return proto.CompactTextString(m) }
func (*CoUserBenefit) ProtoMessage()    {}
func (*CoUserBenefit) Descriptor() ([]byte, []int) {
	return fileDescriptor_829ee3766b824c5c, []int{62}
}

func (m *CoUserBenefit) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CoUserBenefit.Unmarshal(m, b)
}
func (m *CoUserBenefit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CoUserBenefit.Marshal(b, m, deterministic)
}
func (m *CoUserBenefit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CoUserBenefit.Merge(m, src)
}
func (m *CoUserBenefit) XXX_Size() int {
	return xxx_messageInfo_CoUserBenefit.Size(m)
}
func (m *CoUserBenefit) XXX_DiscardUnknown() {
	xxx_messageInfo_CoUserBenefit.DiscardUnknown(m)
}

var xxx_messageInfo_CoUserBenefit proto.InternalMessageInfo

func (m *CoUserBenefit) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *CoUserBenefit) GetCreatedAt() int32 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *CoUserBenefit) GetUpdatedAt() int32 {
	if m != nil {
		return m.UpdatedAt
	}
	return 0
}

func (m *CoUserBenefit) GetCoid() int64 {
	if m != nil {
		return m.Coid
	}
	return 0
}

func (m *CoUserBenefit) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CoUserBenefit) GetColorCode() string {
	if m != nil {
		return m.ColorCode
	}
	return ""
}

func (m *CoUserBenefit) GetCoverUrl() string {
	if m != nil {
		return m.CoverUrl
	}
	return ""
}

func (m *CoUserBenefit) GetClaimType() int32 {
	if m != nil {
		return m.ClaimType
	}
	return 0
}

func (m *CoUserBenefit) GetPrice() float64 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *CoUserBenefit) GetStockNum() int32 {
	if m != nil {
		return m.StockNum
	}
	return 0
}

func (m *CoUserBenefit) GetTermType() int32 {
	if m != nil {
		return m.TermType
	}
	return 0
}

func (m *CoUserBenefit) GetTermDays() int64 {
	if m != nil {
		return m.TermDays
	}
	return 0
}

func (m *CoUserBenefit) GetTermBeginAt() int64 {
	if m != nil {
		return m.TermBeginAt
	}
	return 0
}

func (m *CoUserBenefit) GetTermEndAt() int64 {
	if m != nil {
		return m.TermEndAt
	}
	return 0
}

func (m *CoUserBenefit) GetIsRepeatable() int32 {
	if m != nil {
		return m.IsRepeatable
	}
	return 0
}

func (m *CoUserBenefit) GetRepeatableLimit() int32 {
	if m != nil {
		return m.RepeatableLimit
	}
	return 0
}

func (m *CoUserBenefit) GetRequireMobile() int32 {
	if m != nil {
		return m.RequireMobile
	}
	return 0
}

func (m *CoUserBenefit) GetRequireProfile() int32 {
	if m != nil {
		return m.RequireProfile
	}
	return 0
}

func (m *CoUserBenefit) GetGoodsNo() string {
	if m != nil {
		return m.GoodsNo
	}
	return ""
}

func (m *CoUserBenefit) GetServicePhone() string {
	if m != nil {
		return m.ServicePhone
	}
	return ""
}

func (m *CoUserBenefit) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *CoUserBenefit) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

// 企业权益卡保存
type SaveCoUserBenefit struct {
	Info                 *CoUserBenefit               `protobuf:"bytes,1,opt,name=info,proto3" json:"info,omitempty"`
	MeetBag              []*SaveCoUserBenefit_MeetBag `protobuf:"bytes,2,rep,name=meet_bag,json=meetBag,proto3" json:"meet_bag,omitempty"`
	BenefitBag           []byte                       `protobuf:"bytes,3,opt,name=benefit_bag,json=benefitBag,proto3" json:"benefit_bag,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-"`
	XXX_unrecognized     []byte                       `json:"-"`
	XXX_sizecache        int32                        `json:"-"`
}

func (m *SaveCoUserBenefit) Reset()         { *m = SaveCoUserBenefit{} }
func (m *SaveCoUserBenefit) String() string { return proto.CompactTextString(m) }
func (*SaveCoUserBenefit) ProtoMessage()    {}
func (*SaveCoUserBenefit) Descriptor() ([]byte, []int) {
	return fileDescriptor_829ee3766b824c5c, []int{63}
}

func (m *SaveCoUserBenefit) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SaveCoUserBenefit.Unmarshal(m, b)
}
func (m *SaveCoUserBenefit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SaveCoUserBenefit.Marshal(b, m, deterministic)
}
func (m *SaveCoUserBenefit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SaveCoUserBenefit.Merge(m, src)
}
func (m *SaveCoUserBenefit) XXX_Size() int {
	return xxx_messageInfo_SaveCoUserBenefit.Size(m)
}
func (m *SaveCoUserBenefit) XXX_DiscardUnknown() {
	xxx_messageInfo_SaveCoUserBenefit.DiscardUnknown(m)
}

var xxx_messageInfo_SaveCoUserBenefit proto.InternalMessageInfo

func (m *SaveCoUserBenefit) GetInfo() *CoUserBenefit {
	if m != nil {
		return m.Info
	}
	return nil
}

func (m *SaveCoUserBenefit) GetMeetBag() []*SaveCoUserBenefit_MeetBag {
	if m != nil {
		return m.MeetBag
	}
	return nil
}

func (m *SaveCoUserBenefit) GetBenefitBag() []byte {
	if m != nil {
		return m.BenefitBag
	}
	return nil
}

type SaveCoUserBenefit_MeetBag struct {
	MeetType             int64    `protobuf:"varint,1,opt,name=meet_type,json=meetType,proto3" json:"meet_type,omitempty"`
	MeetValue            int32    `protobuf:"varint,2,opt,name=meet_value,json=meetValue,proto3" json:"meet_value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SaveCoUserBenefit_MeetBag) Reset()         { *m = SaveCoUserBenefit_MeetBag{} }
func (m *SaveCoUserBenefit_MeetBag) String() string { return proto.CompactTextString(m) }
func (*SaveCoUserBenefit_MeetBag) ProtoMessage()    {}
func (*SaveCoUserBenefit_MeetBag) Descriptor() ([]byte, []int) {
	return fileDescriptor_829ee3766b824c5c, []int{63, 0}
}

func (m *SaveCoUserBenefit_MeetBag) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SaveCoUserBenefit_MeetBag.Unmarshal(m, b)
}
func (m *SaveCoUserBenefit_MeetBag) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SaveCoUserBenefit_MeetBag.Marshal(b, m, deterministic)
}
func (m *SaveCoUserBenefit_MeetBag) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SaveCoUserBenefit_MeetBag.Merge(m, src)
}
func (m *SaveCoUserBenefit_MeetBag) XXX_Size() int {
	return xxx_messageInfo_SaveCoUserBenefit_MeetBag.Size(m)
}
func (m *SaveCoUserBenefit_MeetBag) XXX_DiscardUnknown() {
	xxx_messageInfo_SaveCoUserBenefit_MeetBag.DiscardUnknown(m)
}

var xxx_messageInfo_SaveCoUserBenefit_MeetBag proto.InternalMessageInfo

func (m *SaveCoUserBenefit_MeetBag) GetMeetType() int64 {
	if m != nil {
		return m.MeetType
	}
	return 0
}

func (m *SaveCoUserBenefit_MeetBag) GetMeetValue() int32 {
	if m != nil {
		return m.MeetValue
	}
	return 0
}

type ReqCoUserBenefit struct {
	Page                 *PageInfo      `protobuf:"bytes,1,opt,name=page,proto3" json:"page,omitempty"`
	Req                  *CoUserBenefit `protobuf:"bytes,2,opt,name=req,proto3" json:"req,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *ReqCoUserBenefit) Reset()         { *m = ReqCoUserBenefit{} }
func (m *ReqCoUserBenefit) String() string { return proto.CompactTextString(m) }
func (*ReqCoUserBenefit) ProtoMessage()    {}
func (*ReqCoUserBenefit) Descriptor() ([]byte, []int) {
	return fileDescriptor_829ee3766b824c5c, []int{64}
}

func (m *ReqCoUserBenefit) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReqCoUserBenefit.Unmarshal(m, b)
}
func (m *ReqCoUserBenefit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReqCoUserBenefit.Marshal(b, m, deterministic)
}
func (m *ReqCoUserBenefit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqCoUserBenefit.Merge(m, src)
}
func (m *ReqCoUserBenefit) XXX_Size() int {
	return xxx_messageInfo_ReqCoUserBenefit.Size(m)
}
func (m *ReqCoUserBenefit) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqCoUserBenefit.DiscardUnknown(m)
}

var xxx_messageInfo_ReqCoUserBenefit proto.InternalMessageInfo

func (m *ReqCoUserBenefit) GetPage() *PageInfo {
	if m != nil {
		return m.Page
	}
	return nil
}

func (m *ReqCoUserBenefit) GetReq() *CoUserBenefit {
	if m != nil {
		return m.Req
	}
	return nil
}

type ResCoUserBenefit struct {
	List                 []*CoUserBenefit `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	Count                int32            `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *ResCoUserBenefit) Reset()         { *m = ResCoUserBenefit{} }
func (m *ResCoUserBenefit) String() string { return proto.CompactTextString(m) }
func (*ResCoUserBenefit) ProtoMessage()    {}
func (*ResCoUserBenefit) Descriptor() ([]byte, []int) {
	return fileDescriptor_829ee3766b824c5c, []int{65}
}

func (m *ResCoUserBenefit) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResCoUserBenefit.Unmarshal(m, b)
}
func (m *ResCoUserBenefit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResCoUserBenefit.Marshal(b, m, deterministic)
}
func (m *ResCoUserBenefit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResCoUserBenefit.Merge(m, src)
}
func (m *ResCoUserBenefit) XXX_Size() int {
	return xxx_messageInfo_ResCoUserBenefit.Size(m)
}
func (m *ResCoUserBenefit) XXX_DiscardUnknown() {
	xxx_messageInfo_ResCoUserBenefit.DiscardUnknown(m)
}

var xxx_messageInfo_ResCoUserBenefit proto.InternalMessageInfo

func (m *ResCoUserBenefit) GetList() []*CoUserBenefit {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *ResCoUserBenefit) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

// co_user_benefit_diy
type CoUserBenefitDiy struct {
	Id                   int64         `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	CreatedAt            int32         `protobuf:"varint,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt            int32         `protobuf:"varint,3,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	Coid                 int64         `protobuf:"varint,4,opt,name=coid,proto3" json:"coid,omitempty"`
	BenefitId            int64         `protobuf:"varint,5,opt,name=benefit_id,json=benefitId,proto3" json:"benefit_id,omitempty"`
	Type                 int32         `protobuf:"varint,6,opt,name=type,proto3" json:"type,omitempty"`
	Mode                 int32         `protobuf:"varint,7,opt,name=mode,proto3" json:"mode,omitempty"`
	Name                 string        `protobuf:"bytes,8,opt,name=name,proto3" json:"name,omitempty"`
	Icon                 string        `protobuf:"bytes,9,opt,name=icon,proto3" json:"icon,omitempty"`
	Description          string        `protobuf:"bytes,10,opt,name=description,proto3" json:"description,omitempty"`
	UseState             int32         `protobuf:"varint,11,opt,name=use_state,json=useState,proto3" json:"use_state,omitempty"`
	BenefitInfo          *CoSysBenefit `protobuf:"bytes,12,opt,name=benefit_info,json=benefitInfo,proto3" json:"benefit_info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *CoUserBenefitDiy) Reset()         { *m = CoUserBenefitDiy{} }
func (m *CoUserBenefitDiy) String() string { return proto.CompactTextString(m) }
func (*CoUserBenefitDiy) ProtoMessage()    {}
func (*CoUserBenefitDiy) Descriptor() ([]byte, []int) {
	return fileDescriptor_829ee3766b824c5c, []int{66}
}

func (m *CoUserBenefitDiy) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CoUserBenefitDiy.Unmarshal(m, b)
}
func (m *CoUserBenefitDiy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CoUserBenefitDiy.Marshal(b, m, deterministic)
}
func (m *CoUserBenefitDiy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CoUserBenefitDiy.Merge(m, src)
}
func (m *CoUserBenefitDiy) XXX_Size() int {
	return xxx_messageInfo_CoUserBenefitDiy.Size(m)
}
func (m *CoUserBenefitDiy) XXX_DiscardUnknown() {
	xxx_messageInfo_CoUserBenefitDiy.DiscardUnknown(m)
}

var xxx_messageInfo_CoUserBenefitDiy proto.InternalMessageInfo

func (m *CoUserBenefitDiy) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *CoUserBenefitDiy) GetCreatedAt() int32 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *CoUserBenefitDiy) GetUpdatedAt() int32 {
	if m != nil {
		return m.UpdatedAt
	}
	return 0
}

func (m *CoUserBenefitDiy) GetCoid() int64 {
	if m != nil {
		return m.Coid
	}
	return 0
}

func (m *CoUserBenefitDiy) GetBenefitId() int64 {
	if m != nil {
		return m.BenefitId
	}
	return 0
}

func (m *CoUserBenefitDiy) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *CoUserBenefitDiy) GetMode() int32 {
	if m != nil {
		return m.Mode
	}
	return 0
}

func (m *CoUserBenefitDiy) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CoUserBenefitDiy) GetIcon() string {
	if m != nil {
		return m.Icon
	}
	return ""
}

func (m *CoUserBenefitDiy) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *CoUserBenefitDiy) GetUseState() int32 {
	if m != nil {
		return m.UseState
	}
	return 0
}

func (m *CoUserBenefitDiy) GetBenefitInfo() *CoSysBenefit {
	if m != nil {
		return m.BenefitInfo
	}
	return nil
}

type ReqCoUserBenefitDiy struct {
	Page                 *PageInfo         `protobuf:"bytes,1,opt,name=page,proto3" json:"page,omitempty"`
	Req                  *CoUserBenefitDiy `protobuf:"bytes,2,opt,name=req,proto3" json:"req,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *ReqCoUserBenefitDiy) Reset()         { *m = ReqCoUserBenefitDiy{} }
func (m *ReqCoUserBenefitDiy) String() string { return proto.CompactTextString(m) }
func (*ReqCoUserBenefitDiy) ProtoMessage()    {}
func (*ReqCoUserBenefitDiy) Descriptor() ([]byte, []int) {
	return fileDescriptor_829ee3766b824c5c, []int{67}
}

func (m *ReqCoUserBenefitDiy) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReqCoUserBenefitDiy.Unmarshal(m, b)
}
func (m *ReqCoUserBenefitDiy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReqCoUserBenefitDiy.Marshal(b, m, deterministic)
}
func (m *ReqCoUserBenefitDiy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqCoUserBenefitDiy.Merge(m, src)
}
func (m *ReqCoUserBenefitDiy) XXX_Size() int {
	return xxx_messageInfo_ReqCoUserBenefitDiy.Size(m)
}
func (m *ReqCoUserBenefitDiy) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqCoUserBenefitDiy.DiscardUnknown(m)
}

var xxx_messageInfo_ReqCoUserBenefitDiy proto.InternalMessageInfo

func (m *ReqCoUserBenefitDiy) GetPage() *PageInfo {
	if m != nil {
		return m.Page
	}
	return nil
}

func (m *ReqCoUserBenefitDiy) GetReq() *CoUserBenefitDiy {
	if m != nil {
		return m.Req
	}
	return nil
}

type ResCoUserBenefitDiy struct {
	List                 []byte   `protobuf:"bytes,1,opt,name=list,proto3" json:"list,omitempty"`
	Count                int32    `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ResCoUserBenefitDiy) Reset()         { *m = ResCoUserBenefitDiy{} }
func (m *ResCoUserBenefitDiy) String() string { return proto.CompactTextString(m) }
func (*ResCoUserBenefitDiy) ProtoMessage()    {}
func (*ResCoUserBenefitDiy) Descriptor() ([]byte, []int) {
	return fileDescriptor_829ee3766b824c5c, []int{68}
}

func (m *ResCoUserBenefitDiy) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResCoUserBenefitDiy.Unmarshal(m, b)
}
func (m *ResCoUserBenefitDiy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResCoUserBenefitDiy.Marshal(b, m, deterministic)
}
func (m *ResCoUserBenefitDiy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResCoUserBenefitDiy.Merge(m, src)
}
func (m *ResCoUserBenefitDiy) XXX_Size() int {
	return xxx_messageInfo_ResCoUserBenefitDiy.Size(m)
}
func (m *ResCoUserBenefitDiy) XXX_DiscardUnknown() {
	xxx_messageInfo_ResCoUserBenefitDiy.DiscardUnknown(m)
}

var xxx_messageInfo_ResCoUserBenefitDiy proto.InternalMessageInfo

func (m *ResCoUserBenefitDiy) GetList() []byte {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *ResCoUserBenefitDiy) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

// 企业拥有的权益列表
type ResUserBenefitOwn struct {
	List                 []*ResUserBenefitOwn_List    `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	UseList              []*ResUserBenefitOwn_UseList `protobuf:"bytes,2,rep,name=use_list,json=useList,proto3" json:"use_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-"`
	XXX_unrecognized     []byte                       `json:"-"`
	XXX_sizecache        int32                        `json:"-"`
}

func (m *ResUserBenefitOwn) Reset()         { *m = ResUserBenefitOwn{} }
func (m *ResUserBenefitOwn) String() string { return proto.CompactTextString(m) }
func (*ResUserBenefitOwn) ProtoMessage()    {}
func (*ResUserBenefitOwn) Descriptor() ([]byte, []int) {
	return fileDescriptor_829ee3766b824c5c, []int{69}
}

func (m *ResUserBenefitOwn) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResUserBenefitOwn.Unmarshal(m, b)
}
func (m *ResUserBenefitOwn) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResUserBenefitOwn.Marshal(b, m, deterministic)
}
func (m *ResUserBenefitOwn) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResUserBenefitOwn.Merge(m, src)
}
func (m *ResUserBenefitOwn) XXX_Size() int {
	return xxx_messageInfo_ResUserBenefitOwn.Size(m)
}
func (m *ResUserBenefitOwn) XXX_DiscardUnknown() {
	xxx_messageInfo_ResUserBenefitOwn.DiscardUnknown(m)
}

var xxx_messageInfo_ResUserBenefitOwn proto.InternalMessageInfo

func (m *ResUserBenefitOwn) GetList() []*ResUserBenefitOwn_List {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *ResUserBenefitOwn) GetUseList() []*ResUserBenefitOwn_UseList {
	if m != nil {
		return m.UseList
	}
	return nil
}

type ResUserBenefitOwn_List struct {
	Id                   int64           `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string          `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	List                 []*CoSysBenefit `protobuf:"bytes,3,rep,name=list,proto3" json:"list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *ResUserBenefitOwn_List) Reset()         { *m = ResUserBenefitOwn_List{} }
func (m *ResUserBenefitOwn_List) String() string { return proto.CompactTextString(m) }
func (*ResUserBenefitOwn_List) ProtoMessage()    {}
func (*ResUserBenefitOwn_List) Descriptor() ([]byte, []int) {
	return fileDescriptor_829ee3766b824c5c, []int{69, 0}
}

func (m *ResUserBenefitOwn_List) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResUserBenefitOwn_List.Unmarshal(m, b)
}
func (m *ResUserBenefitOwn_List) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResUserBenefitOwn_List.Marshal(b, m, deterministic)
}
func (m *ResUserBenefitOwn_List) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResUserBenefitOwn_List.Merge(m, src)
}
func (m *ResUserBenefitOwn_List) XXX_Size() int {
	return xxx_messageInfo_ResUserBenefitOwn_List.Size(m)
}
func (m *ResUserBenefitOwn_List) XXX_DiscardUnknown() {
	xxx_messageInfo_ResUserBenefitOwn_List.DiscardUnknown(m)
}

var xxx_messageInfo_ResUserBenefitOwn_List proto.InternalMessageInfo

func (m *ResUserBenefitOwn_List) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ResUserBenefitOwn_List) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ResUserBenefitOwn_List) GetList() []*CoSysBenefit {
	if m != nil {
		return m.List
	}
	return nil
}

type ResUserBenefitOwn_UseList struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	BenefitId            int64    `protobuf:"varint,2,opt,name=benefit_id,json=benefitId,proto3" json:"benefit_id,omitempty"`
	UseState             int32    `protobuf:"varint,3,opt,name=use_state,json=useState,proto3" json:"use_state,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ResUserBenefitOwn_UseList) Reset()         { *m = ResUserBenefitOwn_UseList{} }
func (m *ResUserBenefitOwn_UseList) String() string { return proto.CompactTextString(m) }
func (*ResUserBenefitOwn_UseList) ProtoMessage()    {}
func (*ResUserBenefitOwn_UseList) Descriptor() ([]byte, []int) {
	return fileDescriptor_829ee3766b824c5c, []int{69, 1}
}

func (m *ResUserBenefitOwn_UseList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResUserBenefitOwn_UseList.Unmarshal(m, b)
}
func (m *ResUserBenefitOwn_UseList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResUserBenefitOwn_UseList.Marshal(b, m, deterministic)
}
func (m *ResUserBenefitOwn_UseList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResUserBenefitOwn_UseList.Merge(m, src)
}
func (m *ResUserBenefitOwn_UseList) XXX_Size() int {
	return xxx_messageInfo_ResUserBenefitOwn_UseList.Size(m)
}
func (m *ResUserBenefitOwn_UseList) XXX_DiscardUnknown() {
	xxx_messageInfo_ResUserBenefitOwn_UseList.DiscardUnknown(m)
}

var xxx_messageInfo_ResUserBenefitOwn_UseList proto.InternalMessageInfo

func (m *ResUserBenefitOwn_UseList) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ResUserBenefitOwn_UseList) GetBenefitId() int64 {
	if m != nil {
		return m.BenefitId
	}
	return 0
}

func (m *ResUserBenefitOwn_UseList) GetUseState() int32 {
	if m != nil {
		return m.UseState
	}
	return 0
}

// TODO: 企业证书材料及申请
// co_user_cert
type CoUserCert struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	CreatedAt            int32    `protobuf:"varint,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt            int32    `protobuf:"varint,3,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	TypeId               []int64  `protobuf:"varint,4,rep,packed,name=type_id,json=typeId,proto3" json:"type_id,omitempty"`
	Type                 int32    `protobuf:"varint,5,opt,name=type,proto3" json:"type,omitempty"`
	Uid                  int64    `protobuf:"varint,6,opt,name=uid,proto3" json:"uid,omitempty"`
	Name                 string   `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty"`
	RegionId             int64    `protobuf:"varint,8,opt,name=region_id,json=regionId,proto3" json:"region_id,omitempty"`
	Chain                int32    `protobuf:"varint,9,opt,name=chain,proto3" json:"chain,omitempty"`
	CardId               string   `protobuf:"bytes,10,opt,name=card_id,json=cardId,proto3" json:"card_id,omitempty"`
	CardPros             string   `protobuf:"bytes,11,opt,name=card_pros,json=cardPros,proto3" json:"card_pros,omitempty"`
	CardCons             string   `protobuf:"bytes,12,opt,name=card_cons,json=cardCons,proto3" json:"card_cons,omitempty"`
	Msg                  string   `protobuf:"bytes,13,opt,name=msg,proto3" json:"msg,omitempty"`
	State                int32    `protobuf:"varint,14,opt,name=state,proto3" json:"state,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CoUserCert) Reset()         { *m = CoUserCert{} }
func (m *CoUserCert) String() string { return proto.CompactTextString(m) }
func (*CoUserCert) ProtoMessage()    {}
func (*CoUserCert) Descriptor() ([]byte, []int) {
	return fileDescriptor_829ee3766b824c5c, []int{70}
}

func (m *CoUserCert) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CoUserCert.Unmarshal(m, b)
}
func (m *CoUserCert) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CoUserCert.Marshal(b, m, deterministic)
}
func (m *CoUserCert) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CoUserCert.Merge(m, src)
}
func (m *CoUserCert) XXX_Size() int {
	return xxx_messageInfo_CoUserCert.Size(m)
}
func (m *CoUserCert) XXX_DiscardUnknown() {
	xxx_messageInfo_CoUserCert.DiscardUnknown(m)
}

var xxx_messageInfo_CoUserCert proto.InternalMessageInfo

func (m *CoUserCert) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *CoUserCert) GetCreatedAt() int32 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *CoUserCert) GetUpdatedAt() int32 {
	if m != nil {
		return m.UpdatedAt
	}
	return 0
}

func (m *CoUserCert) GetTypeId() []int64 {
	if m != nil {
		return m.TypeId
	}
	return nil
}

func (m *CoUserCert) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *CoUserCert) GetUid() int64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *CoUserCert) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CoUserCert) GetRegionId() int64 {
	if m != nil {
		return m.RegionId
	}
	return 0
}

func (m *CoUserCert) GetChain() int32 {
	if m != nil {
		return m.Chain
	}
	return 0
}

func (m *CoUserCert) GetCardId() string {
	if m != nil {
		return m.CardId
	}
	return ""
}

func (m *CoUserCert) GetCardPros() string {
	if m != nil {
		return m.CardPros
	}
	return ""
}

func (m *CoUserCert) GetCardCons() string {
	if m != nil {
		return m.CardCons
	}
	return ""
}

func (m *CoUserCert) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *CoUserCert) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

type ReqCoUserCert struct {
	Page                 *PageInfo   `protobuf:"bytes,1,opt,name=page,proto3" json:"page,omitempty"`
	Req                  *CoUserCert `protobuf:"bytes,2,opt,name=req,proto3" json:"req,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *ReqCoUserCert) Reset()         { *m = ReqCoUserCert{} }
func (m *ReqCoUserCert) String() string { return proto.CompactTextString(m) }
func (*ReqCoUserCert) ProtoMessage()    {}
func (*ReqCoUserCert) Descriptor() ([]byte, []int) {
	return fileDescriptor_829ee3766b824c5c, []int{71}
}

func (m *ReqCoUserCert) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReqCoUserCert.Unmarshal(m, b)
}
func (m *ReqCoUserCert) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReqCoUserCert.Marshal(b, m, deterministic)
}
func (m *ReqCoUserCert) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqCoUserCert.Merge(m, src)
}
func (m *ReqCoUserCert) XXX_Size() int {
	return xxx_messageInfo_ReqCoUserCert.Size(m)
}
func (m *ReqCoUserCert) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqCoUserCert.DiscardUnknown(m)
}

var xxx_messageInfo_ReqCoUserCert proto.InternalMessageInfo

func (m *ReqCoUserCert) GetPage() *PageInfo {
	if m != nil {
		return m.Page
	}
	return nil
}

func (m *ReqCoUserCert) GetReq() *CoUserCert {
	if m != nil {
		return m.Req
	}
	return nil
}

type ResCoUserCert struct {
	List                 []*CoUserCert `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	Count                int32         `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *ResCoUserCert) Reset()         { *m = ResCoUserCert{} }
func (m *ResCoUserCert) String() string { return proto.CompactTextString(m) }
func (*ResCoUserCert) ProtoMessage()    {}
func (*ResCoUserCert) Descriptor() ([]byte, []int) {
	return fileDescriptor_829ee3766b824c5c, []int{72}
}

func (m *ResCoUserCert) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResCoUserCert.Unmarshal(m, b)
}
func (m *ResCoUserCert) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResCoUserCert.Marshal(b, m, deterministic)
}
func (m *ResCoUserCert) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResCoUserCert.Merge(m, src)
}
func (m *ResCoUserCert) XXX_Size() int {
	return xxx_messageInfo_ResCoUserCert.Size(m)
}
func (m *ResCoUserCert) XXX_DiscardUnknown() {
	xxx_messageInfo_ResCoUserCert.DiscardUnknown(m)
}

var xxx_messageInfo_ResCoUserCert proto.InternalMessageInfo

func (m *ResCoUserCert) GetList() []*CoUserCert {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *ResCoUserCert) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

// TODO: 连锁店关联 到期解除绑定关系
// co_user_chain
type CoUserChain struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	CreatedAt            int32    `protobuf:"varint,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt            int32    `protobuf:"varint,3,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	Coid                 int64    `protobuf:"varint,4,opt,name=coid,proto3" json:"coid,omitempty"`
	Sonid                int64    `protobuf:"varint,5,opt,name=sonid,proto3" json:"sonid,omitempty"`
	State                int32    `protobuf:"varint,6,opt,name=state,proto3" json:"state,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CoUserChain) Reset()         { *m = CoUserChain{} }
func (m *CoUserChain) String() string { return proto.CompactTextString(m) }
func (*CoUserChain) ProtoMessage()    {}
func (*CoUserChain) Descriptor() ([]byte, []int) {
	return fileDescriptor_829ee3766b824c5c, []int{73}
}

func (m *CoUserChain) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CoUserChain.Unmarshal(m, b)
}
func (m *CoUserChain) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CoUserChain.Marshal(b, m, deterministic)
}
func (m *CoUserChain) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CoUserChain.Merge(m, src)
}
func (m *CoUserChain) XXX_Size() int {
	return xxx_messageInfo_CoUserChain.Size(m)
}
func (m *CoUserChain) XXX_DiscardUnknown() {
	xxx_messageInfo_CoUserChain.DiscardUnknown(m)
}

var xxx_messageInfo_CoUserChain proto.InternalMessageInfo

func (m *CoUserChain) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *CoUserChain) GetCreatedAt() int32 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *CoUserChain) GetUpdatedAt() int32 {
	if m != nil {
		return m.UpdatedAt
	}
	return 0
}

func (m *CoUserChain) GetCoid() int64 {
	if m != nil {
		return m.Coid
	}
	return 0
}

func (m *CoUserChain) GetSonid() int64 {
	if m != nil {
		return m.Sonid
	}
	return 0
}

func (m *CoUserChain) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

type ReqCoUserChain struct {
	Page                 *PageInfo    `protobuf:"bytes,1,opt,name=page,proto3" json:"page,omitempty"`
	Req                  *CoUserChain `protobuf:"bytes,2,opt,name=req,proto3" json:"req,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *ReqCoUserChain) Reset()         { *m = ReqCoUserChain{} }
func (m *ReqCoUserChain) String() string { return proto.CompactTextString(m) }
func (*ReqCoUserChain) ProtoMessage()    {}
func (*ReqCoUserChain) Descriptor() ([]byte, []int) {
	return fileDescriptor_829ee3766b824c5c, []int{74}
}

func (m *ReqCoUserChain) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReqCoUserChain.Unmarshal(m, b)
}
func (m *ReqCoUserChain) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReqCoUserChain.Marshal(b, m, deterministic)
}
func (m *ReqCoUserChain) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqCoUserChain.Merge(m, src)
}
func (m *ReqCoUserChain) XXX_Size() int {
	return xxx_messageInfo_ReqCoUserChain.Size(m)
}
func (m *ReqCoUserChain) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqCoUserChain.DiscardUnknown(m)
}

var xxx_messageInfo_ReqCoUserChain proto.InternalMessageInfo

func (m *ReqCoUserChain) GetPage() *PageInfo {
	if m != nil {
		return m.Page
	}
	return nil
}

func (m *ReqCoUserChain) GetReq() *CoUserChain {
	if m != nil {
		return m.Req
	}
	return nil
}

type ResCoUserChain struct {
	List                 []*CoUserChain `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	Count                int32          `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *ResCoUserChain) Reset()         { *m = ResCoUserChain{} }
func (m *ResCoUserChain) String() string { return proto.CompactTextString(m) }
func (*ResCoUserChain) ProtoMessage()    {}
func (*ResCoUserChain) Descriptor() ([]byte, []int) {
	return fileDescriptor_829ee3766b824c5c, []int{75}
}

func (m *ResCoUserChain) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResCoUserChain.Unmarshal(m, b)
}
func (m *ResCoUserChain) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResCoUserChain.Marshal(b, m, deterministic)
}
func (m *ResCoUserChain) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResCoUserChain.Merge(m, src)
}
func (m *ResCoUserChain) XXX_Size() int {
	return xxx_messageInfo_ResCoUserChain.Size(m)
}
func (m *ResCoUserChain) XXX_DiscardUnknown() {
	xxx_messageInfo_ResCoUserChain.DiscardUnknown(m)
}

var xxx_messageInfo_ResCoUserChain proto.InternalMessageInfo

func (m *ResCoUserChain) GetList() []*CoUserChain {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *ResCoUserChain) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

// TODO: 企业用户 拥有的角色列表
// co_user_group_role
type CoUserGroupRole struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	CreatedAt            int32    `protobuf:"varint,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt            int32    `protobuf:"varint,3,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	Coid                 int64    `protobuf:"varint,4,opt,name=coid,proto3" json:"coid,omitempty"`
	Name                 string   `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	Tips                 string   `protobuf:"bytes,6,opt,name=tips,proto3" json:"tips,omitempty"`
	RoleType             int32    `protobuf:"varint,7,opt,name=role_type,json=roleType,proto3" json:"role_type,omitempty"`
	StaffCount           int32    `protobuf:"varint,8,opt,name=staff_count,json=staffCount,proto3" json:"staff_count,omitempty"`
	MenuId               []int64  `protobuf:"varint,9,rep,packed,name=menu_id,json=menuId,proto3" json:"menu_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CoUserGroupRole) Reset()         { *m = CoUserGroupRole{} }
func (m *CoUserGroupRole) String() string { return proto.CompactTextString(m) }
func (*CoUserGroupRole) ProtoMessage()    {}
func (*CoUserGroupRole) Descriptor() ([]byte, []int) {
	return fileDescriptor_829ee3766b824c5c, []int{76}
}

func (m *CoUserGroupRole) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CoUserGroupRole.Unmarshal(m, b)
}
func (m *CoUserGroupRole) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CoUserGroupRole.Marshal(b, m, deterministic)
}
func (m *CoUserGroupRole) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CoUserGroupRole.Merge(m, src)
}
func (m *CoUserGroupRole) XXX_Size() int {
	return xxx_messageInfo_CoUserGroupRole.Size(m)
}
func (m *CoUserGroupRole) XXX_DiscardUnknown() {
	xxx_messageInfo_CoUserGroupRole.DiscardUnknown(m)
}

var xxx_messageInfo_CoUserGroupRole proto.InternalMessageInfo

func (m *CoUserGroupRole) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *CoUserGroupRole) GetCreatedAt() int32 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *CoUserGroupRole) GetUpdatedAt() int32 {
	if m != nil {
		return m.UpdatedAt
	}
	return 0
}

func (m *CoUserGroupRole) GetCoid() int64 {
	if m != nil {
		return m.Coid
	}
	return 0
}

func (m *CoUserGroupRole) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CoUserGroupRole) GetTips() string {
	if m != nil {
		return m.Tips
	}
	return ""
}

func (m *CoUserGroupRole) GetRoleType() int32 {
	if m != nil {
		return m.RoleType
	}
	return 0
}

func (m *CoUserGroupRole) GetStaffCount() int32 {
	if m != nil {
		return m.StaffCount
	}
	return 0
}

func (m *CoUserGroupRole) GetMenuId() []int64 {
	if m != nil {
		return m.MenuId
	}
	return nil
}

type ReqCoUserGroupRole struct {
	Page                 *PageInfo        `protobuf:"bytes,1,opt,name=page,proto3" json:"page,omitempty"`
	IsSys                int32            `protobuf:"varint,2,opt,name=is_sys,json=isSys,proto3" json:"is_sys,omitempty"`
	Req                  *CoUserGroupRole `protobuf:"bytes,3,opt,name=req,proto3" json:"req,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *ReqCoUserGroupRole) Reset()         { *m = ReqCoUserGroupRole{} }
func (m *ReqCoUserGroupRole) String() string { return proto.CompactTextString(m) }
func (*ReqCoUserGroupRole) ProtoMessage()    {}
func (*ReqCoUserGroupRole) Descriptor() ([]byte, []int) {
	return fileDescriptor_829ee3766b824c5c, []int{77}
}

func (m *ReqCoUserGroupRole) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReqCoUserGroupRole.Unmarshal(m, b)
}
func (m *ReqCoUserGroupRole) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReqCoUserGroupRole.Marshal(b, m, deterministic)
}
func (m *ReqCoUserGroupRole) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqCoUserGroupRole.Merge(m, src)
}
func (m *ReqCoUserGroupRole) XXX_Size() int {
	return xxx_messageInfo_ReqCoUserGroupRole.Size(m)
}
func (m *ReqCoUserGroupRole) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqCoUserGroupRole.DiscardUnknown(m)
}

var xxx_messageInfo_ReqCoUserGroupRole proto.InternalMessageInfo

func (m *ReqCoUserGroupRole) GetPage() *PageInfo {
	if m != nil {
		return m.Page
	}
	return nil
}

func (m *ReqCoUserGroupRole) GetIsSys() int32 {
	if m != nil {
		return m.IsSys
	}
	return 0
}

func (m *ReqCoUserGroupRole) GetReq() *CoUserGroupRole {
	if m != nil {
		return m.Req
	}
	return nil
}

type ResCoUserGroupRole struct {
	List                 []*CoUserGroupRole `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	Count                int32              `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *ResCoUserGroupRole) Reset()         { *m = ResCoUserGroupRole{} }
func (m *ResCoUserGroupRole) String() string { return proto.CompactTextString(m) }
func (*ResCoUserGroupRole) ProtoMessage()    {}
func (*ResCoUserGroupRole) Descriptor() ([]byte, []int) {
	return fileDescriptor_829ee3766b824c5c, []int{78}
}

func (m *ResCoUserGroupRole) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResCoUserGroupRole.Unmarshal(m, b)
}
func (m *ResCoUserGroupRole) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResCoUserGroupRole.Marshal(b, m, deterministic)
}
func (m *ResCoUserGroupRole) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResCoUserGroupRole.Merge(m, src)
}
func (m *ResCoUserGroupRole) XXX_Size() int {
	return xxx_messageInfo_ResCoUserGroupRole.Size(m)
}
func (m *ResCoUserGroupRole) XXX_DiscardUnknown() {
	xxx_messageInfo_ResCoUserGroupRole.DiscardUnknown(m)
}

var xxx_messageInfo_ResCoUserGroupRole proto.InternalMessageInfo

func (m *ResCoUserGroupRole) GetList() []*CoUserGroupRole {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *ResCoUserGroupRole) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

// TODO: 拥有的用户绑定关系
// co_user_customer
type CoUserCustomer struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	CreatedAt            int32    `protobuf:"varint,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt            int32    `protobuf:"varint,3,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	Coid                 int64    `protobuf:"varint,4,opt,name=coid,proto3" json:"coid,omitempty"`
	Uid                  int64    `protobuf:"varint,5,opt,name=uid,proto3" json:"uid,omitempty"`
	Sort                 int64    `protobuf:"varint,6,opt,name=sort,proto3" json:"sort,omitempty"`
	Points               int64    `protobuf:"varint,7,opt,name=points,proto3" json:"points,omitempty"`
	PointsAll            int64    `protobuf:"varint,8,opt,name=points_all,json=pointsAll,proto3" json:"points_all,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CoUserCustomer) Reset()         { *m = CoUserCustomer{} }
func (m *CoUserCustomer) String() string { return proto.CompactTextString(m) }
func (*CoUserCustomer) ProtoMessage()    {}
func (*CoUserCustomer) Descriptor() ([]byte, []int) {
	return fileDescriptor_829ee3766b824c5c, []int{79}
}

func (m *CoUserCustomer) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CoUserCustomer.Unmarshal(m, b)
}
func (m *CoUserCustomer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CoUserCustomer.Marshal(b, m, deterministic)
}
func (m *CoUserCustomer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CoUserCustomer.Merge(m, src)
}
func (m *CoUserCustomer) XXX_Size() int {
	return xxx_messageInfo_CoUserCustomer.Size(m)
}
func (m *CoUserCustomer) XXX_DiscardUnknown() {
	xxx_messageInfo_CoUserCustomer.DiscardUnknown(m)
}

var xxx_messageInfo_CoUserCustomer proto.InternalMessageInfo

func (m *CoUserCustomer) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *CoUserCustomer) GetCreatedAt() int32 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *CoUserCustomer) GetUpdatedAt() int32 {
	if m != nil {
		return m.UpdatedAt
	}
	return 0
}

func (m *CoUserCustomer) GetCoid() int64 {
	if m != nil {
		return m.Coid
	}
	return 0
}

func (m *CoUserCustomer) GetUid() int64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *CoUserCustomer) GetSort() int64 {
	if m != nil {
		return m.Sort
	}
	return 0
}

func (m *CoUserCustomer) GetPoints() int64 {
	if m != nil {
		return m.Points
	}
	return 0
}

func (m *CoUserCustomer) GetPointsAll() int64 {
	if m != nil {
		return m.PointsAll
	}
	return 0
}

type ReqCoUserCustomer struct {
	Page                 *PageInfo       `protobuf:"bytes,1,opt,name=page,proto3" json:"page,omitempty"`
	Req                  *CoUserCustomer `protobuf:"bytes,2,opt,name=req,proto3" json:"req,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *ReqCoUserCustomer) Reset()         { *m = ReqCoUserCustomer{} }
func (m *ReqCoUserCustomer) String() string { return proto.CompactTextString(m) }
func (*ReqCoUserCustomer) ProtoMessage()    {}
func (*ReqCoUserCustomer) Descriptor() ([]byte, []int) {
	return fileDescriptor_829ee3766b824c5c, []int{80}
}

func (m *ReqCoUserCustomer) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReqCoUserCustomer.Unmarshal(m, b)
}
func (m *ReqCoUserCustomer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReqCoUserCustomer.Marshal(b, m, deterministic)
}
func (m *ReqCoUserCustomer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqCoUserCustomer.Merge(m, src)
}
func (m *ReqCoUserCustomer) XXX_Size() int {
	return xxx_messageInfo_ReqCoUserCustomer.Size(m)
}
func (m *ReqCoUserCustomer) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqCoUserCustomer.DiscardUnknown(m)
}

var xxx_messageInfo_ReqCoUserCustomer proto.InternalMessageInfo

func (m *ReqCoUserCustomer) GetPage() *PageInfo {
	if m != nil {
		return m.Page
	}
	return nil
}

func (m *ReqCoUserCustomer) GetReq() *CoUserCustomer {
	if m != nil {
		return m.Req
	}
	return nil
}

type ResCoUserCustomer struct {
	List                 []*CoUserCustomer `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	Count                int32             `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *ResCoUserCustomer) Reset()         { *m = ResCoUserCustomer{} }
func (m *ResCoUserCustomer) String() string { return proto.CompactTextString(m) }
func (*ResCoUserCustomer) ProtoMessage()    {}
func (*ResCoUserCustomer) Descriptor() ([]byte, []int) {
	return fileDescriptor_829ee3766b824c5c, []int{81}
}

func (m *ResCoUserCustomer) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResCoUserCustomer.Unmarshal(m, b)
}
func (m *ResCoUserCustomer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResCoUserCustomer.Marshal(b, m, deterministic)
}
func (m *ResCoUserCustomer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResCoUserCustomer.Merge(m, src)
}
func (m *ResCoUserCustomer) XXX_Size() int {
	return xxx_messageInfo_ResCoUserCustomer.Size(m)
}
func (m *ResCoUserCustomer) XXX_DiscardUnknown() {
	xxx_messageInfo_ResCoUserCustomer.DiscardUnknown(m)
}

var xxx_messageInfo_ResCoUserCustomer proto.InternalMessageInfo

func (m *ResCoUserCustomer) GetList() []*CoUserCustomer {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *ResCoUserCustomer) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

// TODO: 企业用户 购买订单
// co_user_order
type CoUserOrder struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	CreatedAt            int32    `protobuf:"varint,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt            int32    `protobuf:"varint,3,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	Coid                 int64    `protobuf:"varint,4,opt,name=coid,proto3" json:"coid,omitempty"`
	Type                 int32    `protobuf:"varint,5,opt,name=type,proto3" json:"type,omitempty"`
	Aid                  int64    `protobuf:"varint,6,opt,name=aid,proto3" json:"aid,omitempty"`
	Price                float64  `protobuf:"fixed64,7,opt,name=price,proto3" json:"price,omitempty"`
	State                int32    `protobuf:"varint,8,opt,name=state,proto3" json:"state,omitempty"`
	PayTime              int64    `protobuf:"varint,9,opt,name=pay_time,json=payTime,proto3" json:"pay_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CoUserOrder) Reset()         { *m = CoUserOrder{} }
func (m *CoUserOrder) String() string { return proto.CompactTextString(m) }
func (*CoUserOrder) ProtoMessage()    {}
func (*CoUserOrder) Descriptor() ([]byte, []int) {
	return fileDescriptor_829ee3766b824c5c, []int{82}
}

func (m *CoUserOrder) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CoUserOrder.Unmarshal(m, b)
}
func (m *CoUserOrder) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CoUserOrder.Marshal(b, m, deterministic)
}
func (m *CoUserOrder) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CoUserOrder.Merge(m, src)
}
func (m *CoUserOrder) XXX_Size() int {
	return xxx_messageInfo_CoUserOrder.Size(m)
}
func (m *CoUserOrder) XXX_DiscardUnknown() {
	xxx_messageInfo_CoUserOrder.DiscardUnknown(m)
}

var xxx_messageInfo_CoUserOrder proto.InternalMessageInfo

func (m *CoUserOrder) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *CoUserOrder) GetCreatedAt() int32 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *CoUserOrder) GetUpdatedAt() int32 {
	if m != nil {
		return m.UpdatedAt
	}
	return 0
}

func (m *CoUserOrder) GetCoid() int64 {
	if m != nil {
		return m.Coid
	}
	return 0
}

func (m *CoUserOrder) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *CoUserOrder) GetAid() int64 {
	if m != nil {
		return m.Aid
	}
	return 0
}

func (m *CoUserOrder) GetPrice() float64 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *CoUserOrder) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *CoUserOrder) GetPayTime() int64 {
	if m != nil {
		return m.PayTime
	}
	return 0
}

type ReqCoUserOrder struct {
	Page                 *PageInfo    `protobuf:"bytes,1,opt,name=page,proto3" json:"page,omitempty"`
	Req                  *CoUserOrder `protobuf:"bytes,2,opt,name=req,proto3" json:"req,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *ReqCoUserOrder) Reset()         { *m = ReqCoUserOrder{} }
func (m *ReqCoUserOrder) String() string { return proto.CompactTextString(m) }
func (*ReqCoUserOrder) ProtoMessage()    {}
func (*ReqCoUserOrder) Descriptor() ([]byte, []int) {
	return fileDescriptor_829ee3766b824c5c, []int{83}
}

func (m *ReqCoUserOrder) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReqCoUserOrder.Unmarshal(m, b)
}
func (m *ReqCoUserOrder) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReqCoUserOrder.Marshal(b, m, deterministic)
}
func (m *ReqCoUserOrder) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqCoUserOrder.Merge(m, src)
}
func (m *ReqCoUserOrder) XXX_Size() int {
	return xxx_messageInfo_ReqCoUserOrder.Size(m)
}
func (m *ReqCoUserOrder) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqCoUserOrder.DiscardUnknown(m)
}

var xxx_messageInfo_ReqCoUserOrder proto.InternalMessageInfo

func (m *ReqCoUserOrder) GetPage() *PageInfo {
	if m != nil {
		return m.Page
	}
	return nil
}

func (m *ReqCoUserOrder) GetReq() *CoUserOrder {
	if m != nil {
		return m.Req
	}
	return nil
}

type ResCoUserOrder struct {
	List                 []*CoUserOrder `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	Count                int32          `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *ResCoUserOrder) Reset()         { *m = ResCoUserOrder{} }
func (m *ResCoUserOrder) String() string { return proto.CompactTextString(m) }
func (*ResCoUserOrder) ProtoMessage()    {}
func (*ResCoUserOrder) Descriptor() ([]byte, []int) {
	return fileDescriptor_829ee3766b824c5c, []int{84}
}

func (m *ResCoUserOrder) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResCoUserOrder.Unmarshal(m, b)
}
func (m *ResCoUserOrder) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResCoUserOrder.Marshal(b, m, deterministic)
}
func (m *ResCoUserOrder) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResCoUserOrder.Merge(m, src)
}
func (m *ResCoUserOrder) XXX_Size() int {
	return xxx_messageInfo_ResCoUserOrder.Size(m)
}
func (m *ResCoUserOrder) XXX_DiscardUnknown() {
	xxx_messageInfo_ResCoUserOrder.DiscardUnknown(m)
}

var xxx_messageInfo_ResCoUserOrder proto.InternalMessageInfo

func (m *ResCoUserOrder) GetList() []*CoUserOrder {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *ResCoUserOrder) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

// TODO: 企业用户 积分及规则设置
// co_user_points
type CoUserPoints struct {
	Coid                 int64                     `protobuf:"varint,1,opt,name=coid,proto3" json:"coid,omitempty"`
	CreatedAt            int32                     `protobuf:"varint,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt            int32                     `protobuf:"varint,3,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	Name                 string                    `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	LimitPerDay          int32                     `protobuf:"varint,6,opt,name=limit_per_day,json=limitPerDay,proto3" json:"limit_per_day,omitempty"`
	ProtectedTime        int32                     `protobuf:"varint,7,opt,name=protected_time,json=protectedTime,proto3" json:"protected_time,omitempty"`
	GeneralRatio         int32                     `protobuf:"varint,8,opt,name=general_ratio,json=generalRatio,proto3" json:"general_ratio,omitempty"`
	Deduct               *CoUserPointsDeduct       `protobuf:"bytes,9,opt,name=deduct,proto3" json:"deduct,omitempty"`
	ExpireDetail         *CoUserPointsExpireDetail `protobuf:"bytes,10,opt,name=expire_detail,json=expireDetail,proto3" json:"expire_detail,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *CoUserPoints) Reset()         { *m = CoUserPoints{} }
func (m *CoUserPoints) String() string { return proto.CompactTextString(m) }
func (*CoUserPoints) ProtoMessage()    {}
func (*CoUserPoints) Descriptor() ([]byte, []int) {
	return fileDescriptor_829ee3766b824c5c, []int{85}
}

func (m *CoUserPoints) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CoUserPoints.Unmarshal(m, b)
}
func (m *CoUserPoints) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CoUserPoints.Marshal(b, m, deterministic)
}
func (m *CoUserPoints) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CoUserPoints.Merge(m, src)
}
func (m *CoUserPoints) XXX_Size() int {
	return xxx_messageInfo_CoUserPoints.Size(m)
}
func (m *CoUserPoints) XXX_DiscardUnknown() {
	xxx_messageInfo_CoUserPoints.DiscardUnknown(m)
}

var xxx_messageInfo_CoUserPoints proto.InternalMessageInfo

func (m *CoUserPoints) GetCoid() int64 {
	if m != nil {
		return m.Coid
	}
	return 0
}

func (m *CoUserPoints) GetCreatedAt() int32 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *CoUserPoints) GetUpdatedAt() int32 {
	if m != nil {
		return m.UpdatedAt
	}
	return 0
}

func (m *CoUserPoints) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CoUserPoints) GetLimitPerDay() int32 {
	if m != nil {
		return m.LimitPerDay
	}
	return 0
}

func (m *CoUserPoints) GetProtectedTime() int32 {
	if m != nil {
		return m.ProtectedTime
	}
	return 0
}

func (m *CoUserPoints) GetGeneralRatio() int32 {
	if m != nil {
		return m.GeneralRatio
	}
	return 0
}

func (m *CoUserPoints) GetDeduct() *CoUserPointsDeduct {
	if m != nil {
		return m.Deduct
	}
	return nil
}

func (m *CoUserPoints) GetExpireDetail() *CoUserPointsExpireDetail {
	if m != nil {
		return m.ExpireDetail
	}
	return nil
}

type CoUserPointsDeduct struct {
	DeductAmountLimit    int32    `protobuf:"varint,1,opt,name=deduct_amount_limit,json=deductAmountLimit,proto3" json:"deduct_amount_limit,omitempty"`
	MinOrderAmount       int32    `protobuf:"varint,2,opt,name=min_order_amount,json=minOrderAmount,proto3" json:"min_order_amount,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CoUserPointsDeduct) Reset()         { *m = CoUserPointsDeduct{} }
func (m *CoUserPointsDeduct) String() string { return proto.CompactTextString(m) }
func (*CoUserPointsDeduct) ProtoMessage()    {}
func (*CoUserPointsDeduct) Descriptor() ([]byte, []int) {
	return fileDescriptor_829ee3766b824c5c, []int{86}
}

func (m *CoUserPointsDeduct) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CoUserPointsDeduct.Unmarshal(m, b)
}
func (m *CoUserPointsDeduct) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CoUserPointsDeduct.Marshal(b, m, deterministic)
}
func (m *CoUserPointsDeduct) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CoUserPointsDeduct.Merge(m, src)
}
func (m *CoUserPointsDeduct) XXX_Size() int {
	return xxx_messageInfo_CoUserPointsDeduct.Size(m)
}
func (m *CoUserPointsDeduct) XXX_DiscardUnknown() {
	xxx_messageInfo_CoUserPointsDeduct.DiscardUnknown(m)
}

var xxx_messageInfo_CoUserPointsDeduct proto.InternalMessageInfo

func (m *CoUserPointsDeduct) GetDeductAmountLimit() int32 {
	if m != nil {
		return m.DeductAmountLimit
	}
	return 0
}

func (m *CoUserPointsDeduct) GetMinOrderAmount() int32 {
	if m != nil {
		return m.MinOrderAmount
	}
	return 0
}

type CoUserPointsExpireDetail struct {
	ExpireType           int32    `protobuf:"varint,1,opt,name=expire_type,json=expireType,proto3" json:"expire_type,omitempty"`
	TimePeriod           string   `protobuf:"bytes,2,opt,name=time_period,json=timePeriod,proto3" json:"time_period,omitempty"`
	TimeDay              int32    `protobuf:"varint,3,opt,name=time_day,json=timeDay,proto3" json:"time_day,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CoUserPointsExpireDetail) Reset()         { *m = CoUserPointsExpireDetail{} }
func (m *CoUserPointsExpireDetail) String() string { return proto.CompactTextString(m) }
func (*CoUserPointsExpireDetail) ProtoMessage()    {}
func (*CoUserPointsExpireDetail) Descriptor() ([]byte, []int) {
	return fileDescriptor_829ee3766b824c5c, []int{87}
}

func (m *CoUserPointsExpireDetail) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CoUserPointsExpireDetail.Unmarshal(m, b)
}
func (m *CoUserPointsExpireDetail) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CoUserPointsExpireDetail.Marshal(b, m, deterministic)
}
func (m *CoUserPointsExpireDetail) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CoUserPointsExpireDetail.Merge(m, src)
}
func (m *CoUserPointsExpireDetail) XXX_Size() int {
	return xxx_messageInfo_CoUserPointsExpireDetail.Size(m)
}
func (m *CoUserPointsExpireDetail) XXX_DiscardUnknown() {
	xxx_messageInfo_CoUserPointsExpireDetail.DiscardUnknown(m)
}

var xxx_messageInfo_CoUserPointsExpireDetail proto.InternalMessageInfo

func (m *CoUserPointsExpireDetail) GetExpireType() int32 {
	if m != nil {
		return m.ExpireType
	}
	return 0
}

func (m *CoUserPointsExpireDetail) GetTimePeriod() string {
	if m != nil {
		return m.TimePeriod
	}
	return ""
}

func (m *CoUserPointsExpireDetail) GetTimeDay() int32 {
	if m != nil {
		return m.TimeDay
	}
	return 0
}

// co_user_points_rule
type CoUserPointsRule struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	CreatedAt            int32    `protobuf:"varint,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt            int32    `protobuf:"varint,3,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	Coid                 int64    `protobuf:"varint,4,opt,name=coid,proto3" json:"coid,omitempty"`
	Points               int64    `protobuf:"varint,5,opt,name=points,proto3" json:"points,omitempty"`
	RuleType             int32    `protobuf:"varint,6,opt,name=rule_type,json=ruleType,proto3" json:"rule_type,omitempty"`
	PointsLimit          int64    `protobuf:"varint,7,opt,name=points_limit,json=pointsLimit,proto3" json:"points_limit,omitempty"`
	SendMessage          bool     `protobuf:"varint,8,opt,name=send_message,json=sendMessage,proto3" json:"send_message,omitempty"`
	BonusPoints          int64    `protobuf:"varint,9,opt,name=bonus_points,json=bonusPoints,proto3" json:"bonus_points,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CoUserPointsRule) Reset()         { *m = CoUserPointsRule{} }
func (m *CoUserPointsRule) String() string { return proto.CompactTextString(m) }
func (*CoUserPointsRule) ProtoMessage()    {}
func (*CoUserPointsRule) Descriptor() ([]byte, []int) {
	return fileDescriptor_829ee3766b824c5c, []int{88}
}

func (m *CoUserPointsRule) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CoUserPointsRule.Unmarshal(m, b)
}
func (m *CoUserPointsRule) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CoUserPointsRule.Marshal(b, m, deterministic)
}
func (m *CoUserPointsRule) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CoUserPointsRule.Merge(m, src)
}
func (m *CoUserPointsRule) XXX_Size() int {
	return xxx_messageInfo_CoUserPointsRule.Size(m)
}
func (m *CoUserPointsRule) XXX_DiscardUnknown() {
	xxx_messageInfo_CoUserPointsRule.DiscardUnknown(m)
}

var xxx_messageInfo_CoUserPointsRule proto.InternalMessageInfo

func (m *CoUserPointsRule) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *CoUserPointsRule) GetCreatedAt() int32 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *CoUserPointsRule) GetUpdatedAt() int32 {
	if m != nil {
		return m.UpdatedAt
	}
	return 0
}

func (m *CoUserPointsRule) GetCoid() int64 {
	if m != nil {
		return m.Coid
	}
	return 0
}

func (m *CoUserPointsRule) GetPoints() int64 {
	if m != nil {
		return m.Points
	}
	return 0
}

func (m *CoUserPointsRule) GetRuleType() int32 {
	if m != nil {
		return m.RuleType
	}
	return 0
}

func (m *CoUserPointsRule) GetPointsLimit() int64 {
	if m != nil {
		return m.PointsLimit
	}
	return 0
}

func (m *CoUserPointsRule) GetSendMessage() bool {
	if m != nil {
		return m.SendMessage
	}
	return false
}

func (m *CoUserPointsRule) GetBonusPoints() int64 {
	if m != nil {
		return m.BonusPoints
	}
	return 0
}

type ReqCoUserPointsRule struct {
	Page                 *PageInfo `protobuf:"bytes,1,opt,name=page,proto3" json:"page,omitempty"`
	Coid                 int64     `protobuf:"varint,2,opt,name=coid,proto3" json:"coid,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *ReqCoUserPointsRule) Reset()         { *m = ReqCoUserPointsRule{} }
func (m *ReqCoUserPointsRule) String() string { return proto.CompactTextString(m) }
func (*ReqCoUserPointsRule) ProtoMessage()    {}
func (*ReqCoUserPointsRule) Descriptor() ([]byte, []int) {
	return fileDescriptor_829ee3766b824c5c, []int{89}
}

func (m *ReqCoUserPointsRule) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReqCoUserPointsRule.Unmarshal(m, b)
}
func (m *ReqCoUserPointsRule) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReqCoUserPointsRule.Marshal(b, m, deterministic)
}
func (m *ReqCoUserPointsRule) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqCoUserPointsRule.Merge(m, src)
}
func (m *ReqCoUserPointsRule) XXX_Size() int {
	return xxx_messageInfo_ReqCoUserPointsRule.Size(m)
}
func (m *ReqCoUserPointsRule) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqCoUserPointsRule.DiscardUnknown(m)
}

var xxx_messageInfo_ReqCoUserPointsRule proto.InternalMessageInfo

func (m *ReqCoUserPointsRule) GetPage() *PageInfo {
	if m != nil {
		return m.Page
	}
	return nil
}

func (m *ReqCoUserPointsRule) GetCoid() int64 {
	if m != nil {
		return m.Coid
	}
	return 0
}

type ResCoUserPointsRule struct {
	List                 []*CoUserPointsRule `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	Count                int32               `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *ResCoUserPointsRule) Reset()         { *m = ResCoUserPointsRule{} }
func (m *ResCoUserPointsRule) String() string { return proto.CompactTextString(m) }
func (*ResCoUserPointsRule) ProtoMessage()    {}
func (*ResCoUserPointsRule) Descriptor() ([]byte, []int) {
	return fileDescriptor_829ee3766b824c5c, []int{90}
}

func (m *ResCoUserPointsRule) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResCoUserPointsRule.Unmarshal(m, b)
}
func (m *ResCoUserPointsRule) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResCoUserPointsRule.Marshal(b, m, deterministic)
}
func (m *ResCoUserPointsRule) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResCoUserPointsRule.Merge(m, src)
}
func (m *ResCoUserPointsRule) XXX_Size() int {
	return xxx_messageInfo_ResCoUserPointsRule.Size(m)
}
func (m *ResCoUserPointsRule) XXX_DiscardUnknown() {
	xxx_messageInfo_ResCoUserPointsRule.DiscardUnknown(m)
}

var xxx_messageInfo_ResCoUserPointsRule proto.InternalMessageInfo

func (m *ResCoUserPointsRule) GetList() []*CoUserPointsRule {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *ResCoUserPointsRule) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

// TODO: 企业用户 员工管理
// co_user_staff
type CoUserStaff struct {
	Id                   int64               `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	CreatedAt            int32               `protobuf:"varint,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt            int32               `protobuf:"varint,3,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	Coid                 int64               `protobuf:"varint,4,opt,name=coid,proto3" json:"coid,omitempty"`
	Uid                  int64               `protobuf:"varint,5,opt,name=uid,proto3" json:"uid,omitempty"`
	StaffNo              string              `protobuf:"bytes,6,opt,name=staff_no,json=staffNo,proto3" json:"staff_no,omitempty"`
	RealName             string              `protobuf:"bytes,7,opt,name=real_name,json=realName,proto3" json:"real_name,omitempty"`
	Phone                string              `protobuf:"bytes,8,opt,name=phone,proto3" json:"phone,omitempty"`
	Sort                 int32               `protobuf:"varint,9,opt,name=sort,proto3" json:"sort,omitempty"`
	Group                []*CoUserStaffGroup `protobuf:"bytes,10,rep,name=group,proto3" json:"group,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *CoUserStaff) Reset()         { *m = CoUserStaff{} }
func (m *CoUserStaff) String() string { return proto.CompactTextString(m) }
func (*CoUserStaff) ProtoMessage()    {}
func (*CoUserStaff) Descriptor() ([]byte, []int) {
	return fileDescriptor_829ee3766b824c5c, []int{91}
}

func (m *CoUserStaff) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CoUserStaff.Unmarshal(m, b)
}
func (m *CoUserStaff) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CoUserStaff.Marshal(b, m, deterministic)
}
func (m *CoUserStaff) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CoUserStaff.Merge(m, src)
}
func (m *CoUserStaff) XXX_Size() int {
	return xxx_messageInfo_CoUserStaff.Size(m)
}
func (m *CoUserStaff) XXX_DiscardUnknown() {
	xxx_messageInfo_CoUserStaff.DiscardUnknown(m)
}

var xxx_messageInfo_CoUserStaff proto.InternalMessageInfo

func (m *CoUserStaff) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *CoUserStaff) GetCreatedAt() int32 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *CoUserStaff) GetUpdatedAt() int32 {
	if m != nil {
		return m.UpdatedAt
	}
	return 0
}

func (m *CoUserStaff) GetCoid() int64 {
	if m != nil {
		return m.Coid
	}
	return 0
}

func (m *CoUserStaff) GetUid() int64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *CoUserStaff) GetStaffNo() string {
	if m != nil {
		return m.StaffNo
	}
	return ""
}

func (m *CoUserStaff) GetRealName() string {
	if m != nil {
		return m.RealName
	}
	return ""
}

func (m *CoUserStaff) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

func (m *CoUserStaff) GetSort() int32 {
	if m != nil {
		return m.Sort
	}
	return 0
}

func (m *CoUserStaff) GetGroup() []*CoUserStaffGroup {
	if m != nil {
		return m.Group
	}
	return nil
}

// co_user_staff_group
type CoUserStaffGroup struct {
	RoleType             int32    `protobuf:"varint,1,opt,name=role_type,json=roleType,proto3" json:"role_type,omitempty"`
	RoleId               int64    `protobuf:"varint,2,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty"`
	RoleName             string   `protobuf:"bytes,3,opt,name=role_name,json=roleName,proto3" json:"role_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CoUserStaffGroup) Reset()         { *m = CoUserStaffGroup{} }
func (m *CoUserStaffGroup) String() string { return proto.CompactTextString(m) }
func (*CoUserStaffGroup) ProtoMessage()    {}
func (*CoUserStaffGroup) Descriptor() ([]byte, []int) {
	return fileDescriptor_829ee3766b824c5c, []int{92}
}

func (m *CoUserStaffGroup) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CoUserStaffGroup.Unmarshal(m, b)
}
func (m *CoUserStaffGroup) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CoUserStaffGroup.Marshal(b, m, deterministic)
}
func (m *CoUserStaffGroup) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CoUserStaffGroup.Merge(m, src)
}
func (m *CoUserStaffGroup) XXX_Size() int {
	return xxx_messageInfo_CoUserStaffGroup.Size(m)
}
func (m *CoUserStaffGroup) XXX_DiscardUnknown() {
	xxx_messageInfo_CoUserStaffGroup.DiscardUnknown(m)
}

var xxx_messageInfo_CoUserStaffGroup proto.InternalMessageInfo

func (m *CoUserStaffGroup) GetRoleType() int32 {
	if m != nil {
		return m.RoleType
	}
	return 0
}

func (m *CoUserStaffGroup) GetRoleId() int64 {
	if m != nil {
		return m.RoleId
	}
	return 0
}

func (m *CoUserStaffGroup) GetRoleName() string {
	if m != nil {
		return m.RoleName
	}
	return ""
}

type ReqCoUserStaff struct {
	Page                 *PageInfo    `protobuf:"bytes,1,opt,name=page,proto3" json:"page,omitempty"`
	Req                  *CoUserStaff `protobuf:"bytes,2,opt,name=req,proto3" json:"req,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *ReqCoUserStaff) Reset()         { *m = ReqCoUserStaff{} }
func (m *ReqCoUserStaff) String() string { return proto.CompactTextString(m) }
func (*ReqCoUserStaff) ProtoMessage()    {}
func (*ReqCoUserStaff) Descriptor() ([]byte, []int) {
	return fileDescriptor_829ee3766b824c5c, []int{93}
}

func (m *ReqCoUserStaff) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReqCoUserStaff.Unmarshal(m, b)
}
func (m *ReqCoUserStaff) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReqCoUserStaff.Marshal(b, m, deterministic)
}
func (m *ReqCoUserStaff) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqCoUserStaff.Merge(m, src)
}
func (m *ReqCoUserStaff) XXX_Size() int {
	return xxx_messageInfo_ReqCoUserStaff.Size(m)
}
func (m *ReqCoUserStaff) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqCoUserStaff.DiscardUnknown(m)
}

var xxx_messageInfo_ReqCoUserStaff proto.InternalMessageInfo

func (m *ReqCoUserStaff) GetPage() *PageInfo {
	if m != nil {
		return m.Page
	}
	return nil
}

func (m *ReqCoUserStaff) GetReq() *CoUserStaff {
	if m != nil {
		return m.Req
	}
	return nil
}

type ResCoUserStaff struct {
	List                 []*CoUserStaff `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	Count                int32          `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *ResCoUserStaff) Reset()         { *m = ResCoUserStaff{} }
func (m *ResCoUserStaff) String() string { return proto.CompactTextString(m) }
func (*ResCoUserStaff) ProtoMessage()    {}
func (*ResCoUserStaff) Descriptor() ([]byte, []int) {
	return fileDescriptor_829ee3766b824c5c, []int{94}
}

func (m *ResCoUserStaff) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResCoUserStaff.Unmarshal(m, b)
}
func (m *ResCoUserStaff) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResCoUserStaff.Marshal(b, m, deterministic)
}
func (m *ResCoUserStaff) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResCoUserStaff.Merge(m, src)
}
func (m *ResCoUserStaff) XXX_Size() int {
	return xxx_messageInfo_ResCoUserStaff.Size(m)
}
func (m *ResCoUserStaff) XXX_DiscardUnknown() {
	xxx_messageInfo_ResCoUserStaff.DiscardUnknown(m)
}

var xxx_messageInfo_ResCoUserStaff proto.InternalMessageInfo

func (m *ResCoUserStaff) GetList() []*CoUserStaff {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *ResCoUserStaff) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

// TODO: 企业用户 门店管理
// co_user_store
type CoUserStore struct {
	Id                   int64     `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	CreatedAt            int32     `protobuf:"varint,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt            int32     `protobuf:"varint,3,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	Coid                 int64     `protobuf:"varint,4,opt,name=coid,proto3" json:"coid,omitempty"`
	Name                 string    `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	Phone                string    `protobuf:"bytes,6,opt,name=phone,proto3" json:"phone,omitempty"`
	Pic                  []string  `protobuf:"bytes,7,rep,name=pic,proto3" json:"pic,omitempty"`
	Province             int32     `protobuf:"varint,8,opt,name=province,proto3" json:"province,omitempty"`
	City                 int32     `protobuf:"varint,9,opt,name=city,proto3" json:"city,omitempty"`
	County               int32     `protobuf:"varint,10,opt,name=county,proto3" json:"county,omitempty"`
	Address              string    `protobuf:"bytes,11,opt,name=address,proto3" json:"address,omitempty"`
	Loc                  []float64 `protobuf:"fixed64,12,rep,packed,name=loc,proto3" json:"loc,omitempty"`
	Description          string    `protobuf:"bytes,13,opt,name=description,proto3" json:"description,omitempty"`
	BusinessType         int32     `protobuf:"varint,14,opt,name=business_type,json=businessType,proto3" json:"business_type,omitempty"`
	BusinessTime         []byte    `protobuf:"bytes,15,opt,name=business_time,json=businessTime,proto3" json:"business_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *CoUserStore) Reset()         { *m = CoUserStore{} }
func (m *CoUserStore) String() string { return proto.CompactTextString(m) }
func (*CoUserStore) ProtoMessage()    {}
func (*CoUserStore) Descriptor() ([]byte, []int) {
	return fileDescriptor_829ee3766b824c5c, []int{95}
}

func (m *CoUserStore) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CoUserStore.Unmarshal(m, b)
}
func (m *CoUserStore) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CoUserStore.Marshal(b, m, deterministic)
}
func (m *CoUserStore) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CoUserStore.Merge(m, src)
}
func (m *CoUserStore) XXX_Size() int {
	return xxx_messageInfo_CoUserStore.Size(m)
}
func (m *CoUserStore) XXX_DiscardUnknown() {
	xxx_messageInfo_CoUserStore.DiscardUnknown(m)
}

var xxx_messageInfo_CoUserStore proto.InternalMessageInfo

func (m *CoUserStore) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *CoUserStore) GetCreatedAt() int32 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *CoUserStore) GetUpdatedAt() int32 {
	if m != nil {
		return m.UpdatedAt
	}
	return 0
}

func (m *CoUserStore) GetCoid() int64 {
	if m != nil {
		return m.Coid
	}
	return 0
}

func (m *CoUserStore) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CoUserStore) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

func (m *CoUserStore) GetPic() []string {
	if m != nil {
		return m.Pic
	}
	return nil
}

func (m *CoUserStore) GetProvince() int32 {
	if m != nil {
		return m.Province
	}
	return 0
}

func (m *CoUserStore) GetCity() int32 {
	if m != nil {
		return m.City
	}
	return 0
}

func (m *CoUserStore) GetCounty() int32 {
	if m != nil {
		return m.County
	}
	return 0
}

func (m *CoUserStore) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *CoUserStore) GetLoc() []float64 {
	if m != nil {
		return m.Loc
	}
	return nil
}

func (m *CoUserStore) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *CoUserStore) GetBusinessType() int32 {
	if m != nil {
		return m.BusinessType
	}
	return 0
}

func (m *CoUserStore) GetBusinessTime() []byte {
	if m != nil {
		return m.BusinessTime
	}
	return nil
}

type ReqCoUserStore struct {
	Page                 *PageInfo    `protobuf:"bytes,1,opt,name=page,proto3" json:"page,omitempty"`
	Req                  *CoUserStore `protobuf:"bytes,2,opt,name=req,proto3" json:"req,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *ReqCoUserStore) Reset()         { *m = ReqCoUserStore{} }
func (m *ReqCoUserStore) String() string { return proto.CompactTextString(m) }
func (*ReqCoUserStore) ProtoMessage()    {}
func (*ReqCoUserStore) Descriptor() ([]byte, []int) {
	return fileDescriptor_829ee3766b824c5c, []int{96}
}

func (m *ReqCoUserStore) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReqCoUserStore.Unmarshal(m, b)
}
func (m *ReqCoUserStore) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReqCoUserStore.Marshal(b, m, deterministic)
}
func (m *ReqCoUserStore) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqCoUserStore.Merge(m, src)
}
func (m *ReqCoUserStore) XXX_Size() int {
	return xxx_messageInfo_ReqCoUserStore.Size(m)
}
func (m *ReqCoUserStore) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqCoUserStore.DiscardUnknown(m)
}

var xxx_messageInfo_ReqCoUserStore proto.InternalMessageInfo

func (m *ReqCoUserStore) GetPage() *PageInfo {
	if m != nil {
		return m.Page
	}
	return nil
}

func (m *ReqCoUserStore) GetReq() *CoUserStore {
	if m != nil {
		return m.Req
	}
	return nil
}

type ResCoUserStore struct {
	List                 []*CoUserStore `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	Count                int32          `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *ResCoUserStore) Reset()         { *m = ResCoUserStore{} }
func (m *ResCoUserStore) String() string { return proto.CompactTextString(m) }
func (*ResCoUserStore) ProtoMessage()    {}
func (*ResCoUserStore) Descriptor() ([]byte, []int) {
	return fileDescriptor_829ee3766b824c5c, []int{97}
}

func (m *ResCoUserStore) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResCoUserStore.Unmarshal(m, b)
}
func (m *ResCoUserStore) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResCoUserStore.Marshal(b, m, deterministic)
}
func (m *ResCoUserStore) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResCoUserStore.Merge(m, src)
}
func (m *ResCoUserStore) XXX_Size() int {
	return xxx_messageInfo_ResCoUserStore.Size(m)
}
func (m *ResCoUserStore) XXX_DiscardUnknown() {
	xxx_messageInfo_ResCoUserStore.DiscardUnknown(m)
}

var xxx_messageInfo_ResCoUserStore proto.InternalMessageInfo

func (m *ResCoUserStore) GetList() []*CoUserStore {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *ResCoUserStore) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

// TODO: 企业用户 企业配置数据读取及修改
// 企业用户 读取配置
type CoUserSetting struct {
	Id                   int64            `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Coid                 int64            `protobuf:"varint,2,opt,name=coid,proto3" json:"coid,omitempty"`
	MenuId               int64            `protobuf:"varint,3,opt,name=menu_id,json=menuId,proto3" json:"menu_id,omitempty"`
	RuleData             map[int64][]byte `protobuf:"bytes,4,rep,name=rule_data,json=ruleData,proto3" json:"rule_data,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *CoUserSetting) Reset()         { *m = CoUserSetting{} }
func (m *CoUserSetting) String() string { return proto.CompactTextString(m) }
func (*CoUserSetting) ProtoMessage()    {}
func (*CoUserSetting) Descriptor() ([]byte, []int) {
	return fileDescriptor_829ee3766b824c5c, []int{98}
}

func (m *CoUserSetting) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CoUserSetting.Unmarshal(m, b)
}
func (m *CoUserSetting) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CoUserSetting.Marshal(b, m, deterministic)
}
func (m *CoUserSetting) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CoUserSetting.Merge(m, src)
}
func (m *CoUserSetting) XXX_Size() int {
	return xxx_messageInfo_CoUserSetting.Size(m)
}
func (m *CoUserSetting) XXX_DiscardUnknown() {
	xxx_messageInfo_CoUserSetting.DiscardUnknown(m)
}

var xxx_messageInfo_CoUserSetting proto.InternalMessageInfo

func (m *CoUserSetting) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *CoUserSetting) GetCoid() int64 {
	if m != nil {
		return m.Coid
	}
	return 0
}

func (m *CoUserSetting) GetMenuId() int64 {
	if m != nil {
		return m.MenuId
	}
	return 0
}

func (m *CoUserSetting) GetRuleData() map[int64][]byte {
	if m != nil {
		return m.RuleData
	}
	return nil
}

// 企业用户保存配置
type SaveCoUserSetting struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Coid                 int64    `protobuf:"varint,2,opt,name=coid,proto3" json:"coid,omitempty"`
	SettingData          []byte   `protobuf:"bytes,3,opt,name=setting_data,json=settingData,proto3" json:"setting_data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SaveCoUserSetting) Reset()         { *m = SaveCoUserSetting{} }
func (m *SaveCoUserSetting) String() string { return proto.CompactTextString(m) }
func (*SaveCoUserSetting) ProtoMessage()    {}
func (*SaveCoUserSetting) Descriptor() ([]byte, []int) {
	return fileDescriptor_829ee3766b824c5c, []int{99}
}

func (m *SaveCoUserSetting) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SaveCoUserSetting.Unmarshal(m, b)
}
func (m *SaveCoUserSetting) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SaveCoUserSetting.Marshal(b, m, deterministic)
}
func (m *SaveCoUserSetting) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SaveCoUserSetting.Merge(m, src)
}
func (m *SaveCoUserSetting) XXX_Size() int {
	return xxx_messageInfo_SaveCoUserSetting.Size(m)
}
func (m *SaveCoUserSetting) XXX_DiscardUnknown() {
	xxx_messageInfo_SaveCoUserSetting.DiscardUnknown(m)
}

var xxx_messageInfo_SaveCoUserSetting proto.InternalMessageInfo

func (m *SaveCoUserSetting) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *SaveCoUserSetting) GetCoid() int64 {
	if m != nil {
		return m.Coid
	}
	return 0
}

func (m *SaveCoUserSetting) GetSettingData() []byte {
	if m != nil {
		return m.SettingData
	}
	return nil
}

type ResCoUserSettingValue struct {
	Coid                 int64    `protobuf:"varint,2,opt,name=coid,proto3" json:"coid,omitempty"`
	SettingId            []int64  `protobuf:"varint,1,rep,packed,name=setting_id,json=settingId,proto3" json:"setting_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ResCoUserSettingValue) Reset()         { *m = ResCoUserSettingValue{} }
func (m *ResCoUserSettingValue) String() string { return proto.CompactTextString(m) }
func (*ResCoUserSettingValue) ProtoMessage()    {}
func (*ResCoUserSettingValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_829ee3766b824c5c, []int{100}
}

func (m *ResCoUserSettingValue) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResCoUserSettingValue.Unmarshal(m, b)
}
func (m *ResCoUserSettingValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResCoUserSettingValue.Marshal(b, m, deterministic)
}
func (m *ResCoUserSettingValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResCoUserSettingValue.Merge(m, src)
}
func (m *ResCoUserSettingValue) XXX_Size() int {
	return xxx_messageInfo_ResCoUserSettingValue.Size(m)
}
func (m *ResCoUserSettingValue) XXX_DiscardUnknown() {
	xxx_messageInfo_ResCoUserSettingValue.DiscardUnknown(m)
}

var xxx_messageInfo_ResCoUserSettingValue proto.InternalMessageInfo

func (m *ResCoUserSettingValue) GetCoid() int64 {
	if m != nil {
		return m.Coid
	}
	return 0
}

func (m *ResCoUserSettingValue) GetSettingId() []int64 {
	if m != nil {
		return m.SettingId
	}
	return nil
}

// TODO: 企业用户 VIP开通权限
// co_user_vip
type CoUserVip struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	CreatedAt            int32    `protobuf:"varint,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt            int32    `protobuf:"varint,3,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	Coid                 int64    `protobuf:"varint,4,opt,name=coid,proto3" json:"coid,omitempty"`
	Type                 int32    `protobuf:"varint,5,opt,name=type,proto3" json:"type,omitempty"`
	PayType              int32    `protobuf:"varint,6,opt,name=pay_type,json=payType,proto3" json:"pay_type,omitempty"`
	LimitId              int64    `protobuf:"varint,7,opt,name=limit_id,json=limitId,proto3" json:"limit_id,omitempty"`
	LimitValue           int32    `protobuf:"varint,8,opt,name=limit_value,json=limitValue,proto3" json:"limit_value,omitempty"`
	DueDate              int64    `protobuf:"varint,9,opt,name=due_date,json=dueDate,proto3" json:"due_date,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CoUserVip) Reset()         { *m = CoUserVip{} }
func (m *CoUserVip) String() string { return proto.CompactTextString(m) }
func (*CoUserVip) ProtoMessage()    {}
func (*CoUserVip) Descriptor() ([]byte, []int) {
	return fileDescriptor_829ee3766b824c5c, []int{101}
}

func (m *CoUserVip) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CoUserVip.Unmarshal(m, b)
}
func (m *CoUserVip) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CoUserVip.Marshal(b, m, deterministic)
}
func (m *CoUserVip) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CoUserVip.Merge(m, src)
}
func (m *CoUserVip) XXX_Size() int {
	return xxx_messageInfo_CoUserVip.Size(m)
}
func (m *CoUserVip) XXX_DiscardUnknown() {
	xxx_messageInfo_CoUserVip.DiscardUnknown(m)
}

var xxx_messageInfo_CoUserVip proto.InternalMessageInfo

func (m *CoUserVip) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *CoUserVip) GetCreatedAt() int32 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *CoUserVip) GetUpdatedAt() int32 {
	if m != nil {
		return m.UpdatedAt
	}
	return 0
}

func (m *CoUserVip) GetCoid() int64 {
	if m != nil {
		return m.Coid
	}
	return 0
}

func (m *CoUserVip) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *CoUserVip) GetPayType() int32 {
	if m != nil {
		return m.PayType
	}
	return 0
}

func (m *CoUserVip) GetLimitId() int64 {
	if m != nil {
		return m.LimitId
	}
	return 0
}

func (m *CoUserVip) GetLimitValue() int32 {
	if m != nil {
		return m.LimitValue
	}
	return 0
}

func (m *CoUserVip) GetDueDate() int64 {
	if m != nil {
		return m.DueDate
	}
	return 0
}

type ReqCoUserVip struct {
	Page                 *PageInfo  `protobuf:"bytes,1,opt,name=page,proto3" json:"page,omitempty"`
	Req                  *CoUserVip `protobuf:"bytes,2,opt,name=req,proto3" json:"req,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *ReqCoUserVip) Reset()         { *m = ReqCoUserVip{} }
func (m *ReqCoUserVip) String() string { return proto.CompactTextString(m) }
func (*ReqCoUserVip) ProtoMessage()    {}
func (*ReqCoUserVip) Descriptor() ([]byte, []int) {
	return fileDescriptor_829ee3766b824c5c, []int{102}
}

func (m *ReqCoUserVip) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReqCoUserVip.Unmarshal(m, b)
}
func (m *ReqCoUserVip) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReqCoUserVip.Marshal(b, m, deterministic)
}
func (m *ReqCoUserVip) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqCoUserVip.Merge(m, src)
}
func (m *ReqCoUserVip) XXX_Size() int {
	return xxx_messageInfo_ReqCoUserVip.Size(m)
}
func (m *ReqCoUserVip) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqCoUserVip.DiscardUnknown(m)
}

var xxx_messageInfo_ReqCoUserVip proto.InternalMessageInfo

func (m *ReqCoUserVip) GetPage() *PageInfo {
	if m != nil {
		return m.Page
	}
	return nil
}

func (m *ReqCoUserVip) GetReq() *CoUserVip {
	if m != nil {
		return m.Req
	}
	return nil
}

type ResCoUserVip struct {
	List                 []*CoUserVip `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	Count                int32        `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *ResCoUserVip) Reset()         { *m = ResCoUserVip{} }
func (m *ResCoUserVip) String() string { return proto.CompactTextString(m) }
func (*ResCoUserVip) ProtoMessage()    {}
func (*ResCoUserVip) Descriptor() ([]byte, []int) {
	return fileDescriptor_829ee3766b824c5c, []int{103}
}

func (m *ResCoUserVip) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResCoUserVip.Unmarshal(m, b)
}
func (m *ResCoUserVip) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResCoUserVip.Marshal(b, m, deterministic)
}
func (m *ResCoUserVip) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResCoUserVip.Merge(m, src)
}
func (m *ResCoUserVip) XXX_Size() int {
	return xxx_messageInfo_ResCoUserVip.Size(m)
}
func (m *ResCoUserVip) XXX_DiscardUnknown() {
	xxx_messageInfo_ResCoUserVip.DiscardUnknown(m)
}

var xxx_messageInfo_ResCoUserVip proto.InternalMessageInfo

func (m *ResCoUserVip) GetList() []*CoUserVip {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *ResCoUserVip) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

// TODO: 企业用户 企业VIP商品
type ReqCoSysVipChoose struct {
	Coid                 int64    `protobuf:"varint,1,opt,name=coid,proto3" json:"coid,omitempty"`
	Type                 int32    `protobuf:"varint,2,opt,name=type,proto3" json:"type,omitempty"`
	MenuId               int64    `protobuf:"varint,3,opt,name=menu_id,json=menuId,proto3" json:"menu_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqCoSysVipChoose) Reset()         { *m = ReqCoSysVipChoose{} }
func (m *ReqCoSysVipChoose) String() string { return proto.CompactTextString(m) }
func (*ReqCoSysVipChoose) ProtoMessage()    {}
func (*ReqCoSysVipChoose) Descriptor() ([]byte, []int) {
	return fileDescriptor_829ee3766b824c5c, []int{104}
}

func (m *ReqCoSysVipChoose) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReqCoSysVipChoose.Unmarshal(m, b)
}
func (m *ReqCoSysVipChoose) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReqCoSysVipChoose.Marshal(b, m, deterministic)
}
func (m *ReqCoSysVipChoose) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqCoSysVipChoose.Merge(m, src)
}
func (m *ReqCoSysVipChoose) XXX_Size() int {
	return xxx_messageInfo_ReqCoSysVipChoose.Size(m)
}
func (m *ReqCoSysVipChoose) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqCoSysVipChoose.DiscardUnknown(m)
}

var xxx_messageInfo_ReqCoSysVipChoose proto.InternalMessageInfo

func (m *ReqCoSysVipChoose) GetCoid() int64 {
	if m != nil {
		return m.Coid
	}
	return 0
}

func (m *ReqCoSysVipChoose) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *ReqCoSysVipChoose) GetMenuId() int64 {
	if m != nil {
		return m.MenuId
	}
	return 0
}

// TODO: 企业用户 企业装饰
type ReqCoUserDecoFeature struct {
	Coid                 int64    `protobuf:"varint,1,opt,name=coid,proto3" json:"coid,omitempty"`
	TplType              int32    `protobuf:"varint,2,opt,name=tpl_type,json=tplType,proto3" json:"tpl_type,omitempty"`
	TplId                int64    `protobuf:"varint,3,opt,name=tpl_id,json=tplId,proto3" json:"tpl_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqCoUserDecoFeature) Reset()         { *m = ReqCoUserDecoFeature{} }
func (m *ReqCoUserDecoFeature) String() string { return proto.CompactTextString(m) }
func (*ReqCoUserDecoFeature) ProtoMessage()    {}
func (*ReqCoUserDecoFeature) Descriptor() ([]byte, []int) {
	return fileDescriptor_829ee3766b824c5c, []int{105}
}

func (m *ReqCoUserDecoFeature) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReqCoUserDecoFeature.Unmarshal(m, b)
}
func (m *ReqCoUserDecoFeature) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReqCoUserDecoFeature.Marshal(b, m, deterministic)
}
func (m *ReqCoUserDecoFeature) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqCoUserDecoFeature.Merge(m, src)
}
func (m *ReqCoUserDecoFeature) XXX_Size() int {
	return xxx_messageInfo_ReqCoUserDecoFeature.Size(m)
}
func (m *ReqCoUserDecoFeature) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqCoUserDecoFeature.DiscardUnknown(m)
}

var xxx_messageInfo_ReqCoUserDecoFeature proto.InternalMessageInfo

func (m *ReqCoUserDecoFeature) GetCoid() int64 {
	if m != nil {
		return m.Coid
	}
	return 0
}

func (m *ReqCoUserDecoFeature) GetTplType() int32 {
	if m != nil {
		return m.TplType
	}
	return 0
}

func (m *ReqCoUserDecoFeature) GetTplId() int64 {
	if m != nil {
		return m.TplId
	}
	return 0
}

type ReqCoUserDecoUsePos struct {
	Coid                 int64    `protobuf:"varint,1,opt,name=coid,proto3" json:"coid,omitempty"`
	UsePos               int64    `protobuf:"varint,2,opt,name=use_pos,json=usePos,proto3" json:"use_pos,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqCoUserDecoUsePos) Reset()         { *m = ReqCoUserDecoUsePos{} }
func (m *ReqCoUserDecoUsePos) String() string { return proto.CompactTextString(m) }
func (*ReqCoUserDecoUsePos) ProtoMessage()    {}
func (*ReqCoUserDecoUsePos) Descriptor() ([]byte, []int) {
	return fileDescriptor_829ee3766b824c5c, []int{106}
}

func (m *ReqCoUserDecoUsePos) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReqCoUserDecoUsePos.Unmarshal(m, b)
}
func (m *ReqCoUserDecoUsePos) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReqCoUserDecoUsePos.Marshal(b, m, deterministic)
}
func (m *ReqCoUserDecoUsePos) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqCoUserDecoUsePos.Merge(m, src)
}
func (m *ReqCoUserDecoUsePos) XXX_Size() int {
	return xxx_messageInfo_ReqCoUserDecoUsePos.Size(m)
}
func (m *ReqCoUserDecoUsePos) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqCoUserDecoUsePos.DiscardUnknown(m)
}

var xxx_messageInfo_ReqCoUserDecoUsePos proto.InternalMessageInfo

func (m *ReqCoUserDecoUsePos) GetCoid() int64 {
	if m != nil {
		return m.Coid
	}
	return 0
}

func (m *ReqCoUserDecoUsePos) GetUsePos() int64 {
	if m != nil {
		return m.UsePos
	}
	return 0
}

type ReqCoUserDecoOperate struct {
	Coid                 int64    `protobuf:"varint,1,opt,name=coid,proto3" json:"coid,omitempty"`
	Type                 int32    `protobuf:"varint,2,opt,name=type,proto3" json:"type,omitempty"`
	FeatureId            int64    `protobuf:"varint,3,opt,name=feature_id,json=featureId,proto3" json:"feature_id,omitempty"`
	FeatureList          []int64  `protobuf:"varint,4,rep,packed,name=feature_list,json=featureList,proto3" json:"feature_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqCoUserDecoOperate) Reset()         { *m = ReqCoUserDecoOperate{} }
func (m *ReqCoUserDecoOperate) String() string { return proto.CompactTextString(m) }
func (*ReqCoUserDecoOperate) ProtoMessage()    {}
func (*ReqCoUserDecoOperate) Descriptor() ([]byte, []int) {
	return fileDescriptor_829ee3766b824c5c, []int{107}
}

func (m *ReqCoUserDecoOperate) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReqCoUserDecoOperate.Unmarshal(m, b)
}
func (m *ReqCoUserDecoOperate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReqCoUserDecoOperate.Marshal(b, m, deterministic)
}
func (m *ReqCoUserDecoOperate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqCoUserDecoOperate.Merge(m, src)
}
func (m *ReqCoUserDecoOperate) XXX_Size() int {
	return xxx_messageInfo_ReqCoUserDecoOperate.Size(m)
}
func (m *ReqCoUserDecoOperate) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqCoUserDecoOperate.DiscardUnknown(m)
}

var xxx_messageInfo_ReqCoUserDecoOperate proto.InternalMessageInfo

func (m *ReqCoUserDecoOperate) GetCoid() int64 {
	if m != nil {
		return m.Coid
	}
	return 0
}

func (m *ReqCoUserDecoOperate) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *ReqCoUserDecoOperate) GetFeatureId() int64 {
	if m != nil {
		return m.FeatureId
	}
	return 0
}

func (m *ReqCoUserDecoOperate) GetFeatureList() []int64 {
	if m != nil {
		return m.FeatureList
	}
	return nil
}

// 企业页面
type CoUserFeature struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	CreatedAt            int32    `protobuf:"varint,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt            int32    `protobuf:"varint,3,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	Coid                 int64    `protobuf:"varint,4,opt,name=coid,proto3" json:"coid,omitempty"`
	Name                 string   `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	Platform             int32    `protobuf:"varint,6,opt,name=platform,proto3" json:"platform,omitempty"`
	Source               int32    `protobuf:"varint,7,opt,name=source,proto3" json:"source,omitempty"`
	IsDelete             bool     `protobuf:"varint,8,opt,name=is_delete,json=isDelete,proto3" json:"is_delete,omitempty"`
	PageType             int32    `protobuf:"varint,9,opt,name=page_type,json=pageType,proto3" json:"page_type,omitempty"`
	State                int32    `protobuf:"varint,10,opt,name=state,proto3" json:"state,omitempty"`
	OperateType          int32    `protobuf:"varint,11,opt,name=operate_type,json=operateType,proto3" json:"operate_type,omitempty"`
	Components           []byte   `protobuf:"bytes,12,opt,name=components,proto3" json:"components,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CoUserFeature) Reset()         { *m = CoUserFeature{} }
func (m *CoUserFeature) String() string { return proto.CompactTextString(m) }
func (*CoUserFeature) ProtoMessage()    {}
func (*CoUserFeature) Descriptor() ([]byte, []int) {
	return fileDescriptor_829ee3766b824c5c, []int{108}
}

func (m *CoUserFeature) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CoUserFeature.Unmarshal(m, b)
}
func (m *CoUserFeature) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CoUserFeature.Marshal(b, m, deterministic)
}
func (m *CoUserFeature) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CoUserFeature.Merge(m, src)
}
func (m *CoUserFeature) XXX_Size() int {
	return xxx_messageInfo_CoUserFeature.Size(m)
}
func (m *CoUserFeature) XXX_DiscardUnknown() {
	xxx_messageInfo_CoUserFeature.DiscardUnknown(m)
}

var xxx_messageInfo_CoUserFeature proto.InternalMessageInfo

func (m *CoUserFeature) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *CoUserFeature) GetCreatedAt() int32 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *CoUserFeature) GetUpdatedAt() int32 {
	if m != nil {
		return m.UpdatedAt
	}
	return 0
}

func (m *CoUserFeature) GetCoid() int64 {
	if m != nil {
		return m.Coid
	}
	return 0
}

func (m *CoUserFeature) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CoUserFeature) GetPlatform() int32 {
	if m != nil {
		return m.Platform
	}
	return 0
}

func (m *CoUserFeature) GetSource() int32 {
	if m != nil {
		return m.Source
	}
	return 0
}

func (m *CoUserFeature) GetIsDelete() bool {
	if m != nil {
		return m.IsDelete
	}
	return false
}

func (m *CoUserFeature) GetPageType() int32 {
	if m != nil {
		return m.PageType
	}
	return 0
}

func (m *CoUserFeature) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *CoUserFeature) GetOperateType() int32 {
	if m != nil {
		return m.OperateType
	}
	return 0
}

func (m *CoUserFeature) GetComponents() []byte {
	if m != nil {
		return m.Components
	}
	return nil
}

// 企业拥有的权益列表
type ResCoUserDecoModuleList struct {
	List                 []*ResCoUserDecoModuleList_List `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                        `json:"-"`
	XXX_unrecognized     []byte                          `json:"-"`
	XXX_sizecache        int32                           `json:"-"`
}

func (m *ResCoUserDecoModuleList) Reset()         { *m = ResCoUserDecoModuleList{} }
func (m *ResCoUserDecoModuleList) String() string { return proto.CompactTextString(m) }
func (*ResCoUserDecoModuleList) ProtoMessage()    {}
func (*ResCoUserDecoModuleList) Descriptor() ([]byte, []int) {
	return fileDescriptor_829ee3766b824c5c, []int{109}
}

func (m *ResCoUserDecoModuleList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResCoUserDecoModuleList.Unmarshal(m, b)
}
func (m *ResCoUserDecoModuleList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResCoUserDecoModuleList.Marshal(b, m, deterministic)
}
func (m *ResCoUserDecoModuleList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResCoUserDecoModuleList.Merge(m, src)
}
func (m *ResCoUserDecoModuleList) XXX_Size() int {
	return xxx_messageInfo_ResCoUserDecoModuleList.Size(m)
}
func (m *ResCoUserDecoModuleList) XXX_DiscardUnknown() {
	xxx_messageInfo_ResCoUserDecoModuleList.DiscardUnknown(m)
}

var xxx_messageInfo_ResCoUserDecoModuleList proto.InternalMessageInfo

func (m *ResCoUserDecoModuleList) GetList() []*ResCoUserDecoModuleList_List {
	if m != nil {
		return m.List
	}
	return nil
}

type ResCoUserDecoModuleList_List struct {
	Id                   int64                                       `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string                                      `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	List                 []*ResCoUserDecoModuleList_List_CoSysModule `protobuf:"bytes,3,rep,name=list,proto3" json:"list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                    `json:"-"`
	XXX_unrecognized     []byte                                      `json:"-"`
	XXX_sizecache        int32                                       `json:"-"`
}

func (m *ResCoUserDecoModuleList_List) Reset()         { *m = ResCoUserDecoModuleList_List{} }
func (m *ResCoUserDecoModuleList_List) String() string { return proto.CompactTextString(m) }
func (*ResCoUserDecoModuleList_List) ProtoMessage()    {}
func (*ResCoUserDecoModuleList_List) Descriptor() ([]byte, []int) {
	return fileDescriptor_829ee3766b824c5c, []int{109, 0}
}

func (m *ResCoUserDecoModuleList_List) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResCoUserDecoModuleList_List.Unmarshal(m, b)
}
func (m *ResCoUserDecoModuleList_List) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResCoUserDecoModuleList_List.Marshal(b, m, deterministic)
}
func (m *ResCoUserDecoModuleList_List) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResCoUserDecoModuleList_List.Merge(m, src)
}
func (m *ResCoUserDecoModuleList_List) XXX_Size() int {
	return xxx_messageInfo_ResCoUserDecoModuleList_List.Size(m)
}
func (m *ResCoUserDecoModuleList_List) XXX_DiscardUnknown() {
	xxx_messageInfo_ResCoUserDecoModuleList_List.DiscardUnknown(m)
}

var xxx_messageInfo_ResCoUserDecoModuleList_List proto.InternalMessageInfo

func (m *ResCoUserDecoModuleList_List) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ResCoUserDecoModuleList_List) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ResCoUserDecoModuleList_List) GetList() []*ResCoUserDecoModuleList_List_CoSysModule {
	if m != nil {
		return m.List
	}
	return nil
}

type ResCoUserDecoModuleList_List_CoSysModule struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string   `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
	Icon                 string   `protobuf:"bytes,7,opt,name=icon,proto3" json:"icon,omitempty"`
	Alias                string   `protobuf:"bytes,8,opt,name=alias,proto3" json:"alias,omitempty"`
	MaxNum               int32    `protobuf:"varint,9,opt,name=max_num,json=maxNum,proto3" json:"max_num,omitempty"`
	IsSort               bool     `protobuf:"varint,10,opt,name=is_sort,json=isSort,proto3" json:"is_sort,omitempty"`
	FixSort              int32    `protobuf:"varint,11,opt,name=fix_sort,json=fixSort,proto3" json:"fix_sort,omitempty"`
	IsDelete             bool     `protobuf:"varint,12,opt,name=is_delete,json=isDelete,proto3" json:"is_delete,omitempty"`
	IsConfig             bool     `protobuf:"varint,13,opt,name=is_config,json=isConfig,proto3" json:"is_config,omitempty"`
	State                int32    `protobuf:"varint,14,opt,name=state,proto3" json:"state,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ResCoUserDecoModuleList_List_CoSysModule) Reset() {
	*m = ResCoUserDecoModuleList_List_CoSysModule{}
}
func (m *ResCoUserDecoModuleList_List_CoSysModule) String() string { return proto.CompactTextString(m) }
func (*ResCoUserDecoModuleList_List_CoSysModule) ProtoMessage()    {}
func (*ResCoUserDecoModuleList_List_CoSysModule) Descriptor() ([]byte, []int) {
	return fileDescriptor_829ee3766b824c5c, []int{109, 0, 0}
}

func (m *ResCoUserDecoModuleList_List_CoSysModule) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResCoUserDecoModuleList_List_CoSysModule.Unmarshal(m, b)
}
func (m *ResCoUserDecoModuleList_List_CoSysModule) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResCoUserDecoModuleList_List_CoSysModule.Marshal(b, m, deterministic)
}
func (m *ResCoUserDecoModuleList_List_CoSysModule) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResCoUserDecoModuleList_List_CoSysModule.Merge(m, src)
}
func (m *ResCoUserDecoModuleList_List_CoSysModule) XXX_Size() int {
	return xxx_messageInfo_ResCoUserDecoModuleList_List_CoSysModule.Size(m)
}
func (m *ResCoUserDecoModuleList_List_CoSysModule) XXX_DiscardUnknown() {
	xxx_messageInfo_ResCoUserDecoModuleList_List_CoSysModule.DiscardUnknown(m)
}

var xxx_messageInfo_ResCoUserDecoModuleList_List_CoSysModule proto.InternalMessageInfo

func (m *ResCoUserDecoModuleList_List_CoSysModule) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ResCoUserDecoModuleList_List_CoSysModule) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ResCoUserDecoModuleList_List_CoSysModule) GetIcon() string {
	if m != nil {
		return m.Icon
	}
	return ""
}

func (m *ResCoUserDecoModuleList_List_CoSysModule) GetAlias() string {
	if m != nil {
		return m.Alias
	}
	return ""
}

func (m *ResCoUserDecoModuleList_List_CoSysModule) GetMaxNum() int32 {
	if m != nil {
		return m.MaxNum
	}
	return 0
}

func (m *ResCoUserDecoModuleList_List_CoSysModule) GetIsSort() bool {
	if m != nil {
		return m.IsSort
	}
	return false
}

func (m *ResCoUserDecoModuleList_List_CoSysModule) GetFixSort() int32 {
	if m != nil {
		return m.FixSort
	}
	return 0
}

func (m *ResCoUserDecoModuleList_List_CoSysModule) GetIsDelete() bool {
	if m != nil {
		return m.IsDelete
	}
	return false
}

func (m *ResCoUserDecoModuleList_List_CoSysModule) GetIsConfig() bool {
	if m != nil {
		return m.IsConfig
	}
	return false
}

func (m *ResCoUserDecoModuleList_List_CoSysModule) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

// 企业装饰 公共模板
type CoUserShopCommon struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	CreatedAt            int32    `protobuf:"varint,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt            int32    `protobuf:"varint,3,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	Coid                 int64    `protobuf:"varint,4,opt,name=coid,proto3" json:"coid,omitempty"`
	PageType             int32    `protobuf:"varint,7,opt,name=page_type,json=pageType,proto3" json:"page_type,omitempty"`
	Platform             int32    `protobuf:"varint,6,opt,name=platform,proto3" json:"platform,omitempty"`
	Components           []byte   `protobuf:"bytes,12,opt,name=components,proto3" json:"components,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CoUserShopCommon) Reset()         { *m = CoUserShopCommon{} }
func (m *CoUserShopCommon) String() string { return proto.CompactTextString(m) }
func (*CoUserShopCommon) ProtoMessage()    {}
func (*CoUserShopCommon) Descriptor() ([]byte, []int) {
	return fileDescriptor_829ee3766b824c5c, []int{110}
}

func (m *CoUserShopCommon) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CoUserShopCommon.Unmarshal(m, b)
}
func (m *CoUserShopCommon) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CoUserShopCommon.Marshal(b, m, deterministic)
}
func (m *CoUserShopCommon) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CoUserShopCommon.Merge(m, src)
}
func (m *CoUserShopCommon) XXX_Size() int {
	return xxx_messageInfo_CoUserShopCommon.Size(m)
}
func (m *CoUserShopCommon) XXX_DiscardUnknown() {
	xxx_messageInfo_CoUserShopCommon.DiscardUnknown(m)
}

var xxx_messageInfo_CoUserShopCommon proto.InternalMessageInfo

func (m *CoUserShopCommon) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *CoUserShopCommon) GetCreatedAt() int32 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *CoUserShopCommon) GetUpdatedAt() int32 {
	if m != nil {
		return m.UpdatedAt
	}
	return 0
}

func (m *CoUserShopCommon) GetCoid() int64 {
	if m != nil {
		return m.Coid
	}
	return 0
}

func (m *CoUserShopCommon) GetPageType() int32 {
	if m != nil {
		return m.PageType
	}
	return 0
}

func (m *CoUserShopCommon) GetPlatform() int32 {
	if m != nil {
		return m.Platform
	}
	return 0
}

func (m *CoUserShopCommon) GetComponents() []byte {
	if m != nil {
		return m.Components
	}
	return nil
}

// 企业装饰 改变全局样式
type ReqCoUserDecoStyle struct {
	Coid                 int64    `protobuf:"varint,1,opt,name=coid,proto3" json:"coid,omitempty"`
	Style                string   `protobuf:"bytes,2,opt,name=style,proto3" json:"style,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqCoUserDecoStyle) Reset()         { *m = ReqCoUserDecoStyle{} }
func (m *ReqCoUserDecoStyle) String() string { return proto.CompactTextString(m) }
func (*ReqCoUserDecoStyle) ProtoMessage()    {}
func (*ReqCoUserDecoStyle) Descriptor() ([]byte, []int) {
	return fileDescriptor_829ee3766b824c5c, []int{111}
}

func (m *ReqCoUserDecoStyle) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReqCoUserDecoStyle.Unmarshal(m, b)
}
func (m *ReqCoUserDecoStyle) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReqCoUserDecoStyle.Marshal(b, m, deterministic)
}
func (m *ReqCoUserDecoStyle) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqCoUserDecoStyle.Merge(m, src)
}
func (m *ReqCoUserDecoStyle) XXX_Size() int {
	return xxx_messageInfo_ReqCoUserDecoStyle.Size(m)
}
func (m *ReqCoUserDecoStyle) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqCoUserDecoStyle.DiscardUnknown(m)
}

var xxx_messageInfo_ReqCoUserDecoStyle proto.InternalMessageInfo

func (m *ReqCoUserDecoStyle) GetCoid() int64 {
	if m != nil {
		return m.Coid
	}
	return 0
}

func (m *ReqCoUserDecoStyle) GetStyle() string {
	if m != nil {
		return m.Style
	}
	return ""
}

// 初始化企业页面
type CoUserShopInit struct {
	Coid                 int64               `protobuf:"varint,1,opt,name=coid,proto3" json:"coid,omitempty"`
	Type                 int32               `protobuf:"varint,2,opt,name=type,proto3" json:"type,omitempty"`
	ShopFeature          []*CoUserFeature    `protobuf:"bytes,3,rep,name=shop_feature,json=shopFeature,proto3" json:"shop_feature,omitempty"`
	ShopCommon           []*CoUserShopCommon `protobuf:"bytes,4,rep,name=shop_common,json=shopCommon,proto3" json:"shop_common,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *CoUserShopInit) Reset()         { *m = CoUserShopInit{} }
func (m *CoUserShopInit) String() string { return proto.CompactTextString(m) }
func (*CoUserShopInit) ProtoMessage()    {}
func (*CoUserShopInit) Descriptor() ([]byte, []int) {
	return fileDescriptor_829ee3766b824c5c, []int{112}
}

func (m *CoUserShopInit) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CoUserShopInit.Unmarshal(m, b)
}
func (m *CoUserShopInit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CoUserShopInit.Marshal(b, m, deterministic)
}
func (m *CoUserShopInit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CoUserShopInit.Merge(m, src)
}
func (m *CoUserShopInit) XXX_Size() int {
	return xxx_messageInfo_CoUserShopInit.Size(m)
}
func (m *CoUserShopInit) XXX_DiscardUnknown() {
	xxx_messageInfo_CoUserShopInit.DiscardUnknown(m)
}

var xxx_messageInfo_CoUserShopInit proto.InternalMessageInfo

func (m *CoUserShopInit) GetCoid() int64 {
	if m != nil {
		return m.Coid
	}
	return 0
}

func (m *CoUserShopInit) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *CoUserShopInit) GetShopFeature() []*CoUserFeature {
	if m != nil {
		return m.ShopFeature
	}
	return nil
}

func (m *CoUserShopInit) GetShopCommon() []*CoUserShopCommon {
	if m != nil {
		return m.ShopCommon
	}
	return nil
}

// 企业页面读取
type CoFeatureConfig struct {
	Coid                 int64    `protobuf:"varint,1,opt,name=coid,proto3" json:"coid,omitempty"`
	PageType             int32    `protobuf:"varint,2,opt,name=page_type,json=pageType,proto3" json:"page_type,omitempty"`
	FeatureId            int64    `protobuf:"varint,3,opt,name=feature_id,json=featureId,proto3" json:"feature_id,omitempty"`
	Source               int32    `protobuf:"varint,4,opt,name=source,proto3" json:"source,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CoFeatureConfig) Reset()         { *m = CoFeatureConfig{} }
func (m *CoFeatureConfig) String() string { return proto.CompactTextString(m) }
func (*CoFeatureConfig) ProtoMessage()    {}
func (*CoFeatureConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_829ee3766b824c5c, []int{113}
}

func (m *CoFeatureConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CoFeatureConfig.Unmarshal(m, b)
}
func (m *CoFeatureConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CoFeatureConfig.Marshal(b, m, deterministic)
}
func (m *CoFeatureConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CoFeatureConfig.Merge(m, src)
}
func (m *CoFeatureConfig) XXX_Size() int {
	return xxx_messageInfo_CoFeatureConfig.Size(m)
}
func (m *CoFeatureConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_CoFeatureConfig.DiscardUnknown(m)
}

var xxx_messageInfo_CoFeatureConfig proto.InternalMessageInfo

func (m *CoFeatureConfig) GetCoid() int64 {
	if m != nil {
		return m.Coid
	}
	return 0
}

func (m *CoFeatureConfig) GetPageType() int32 {
	if m != nil {
		return m.PageType
	}
	return 0
}

func (m *CoFeatureConfig) GetFeatureId() int64 {
	if m != nil {
		return m.FeatureId
	}
	return 0
}

func (m *CoFeatureConfig) GetSource() int32 {
	if m != nil {
		return m.Source
	}
	return 0
}

func init() {
	proto.RegisterType((*ResultEmpty)(nil), "serverCo.ResultEmpty")
	proto.RegisterType((*PageInfo)(nil), "serverCo.PageInfo")
	proto.RegisterType((*Result)(nil), "serverCo.Result")
	proto.RegisterMapType((map[string]string)(nil), "serverCo.Result.HeaderEntry")
	proto.RegisterType((*ReqId)(nil), "serverCo.ReqId")
	proto.RegisterType((*CoType)(nil), "serverCo.CoType")
	proto.RegisterType((*CoTypeSimple)(nil), "serverCo.CoTypeSimple")
	proto.RegisterType((*ResCoType)(nil), "serverCo.ResCoType")
	proto.RegisterType((*CoSysBinding)(nil), "serverCo.CoSysBinding")
	proto.RegisterType((*ResCoSysBinding)(nil), "serverCo.ResCoSysBinding")
	proto.RegisterType((*CoSysBindingVip)(nil), "serverCo.CoSysBindingVip")
	proto.RegisterType((*ResCoSysBindingVip)(nil), "serverCo.ResCoSysBindingVip")
	proto.RegisterType((*CoMenu)(nil), "serverCo.CoMenu")
	proto.RegisterType((*ReqCoMenu)(nil), "serverCo.ReqCoMenu")
	proto.RegisterType((*ResCoMenu)(nil), "serverCo.ResCoMenu")
	proto.RegisterType((*CoMenuAPI)(nil), "serverCo.CoMenuAPI")
	proto.RegisterType((*ReqCoMenuAPI)(nil), "serverCo.ReqCoMenuAPI")
	proto.RegisterType((*ResCoMenuAPI)(nil), "serverCo.ResCoMenuAPI")
	proto.RegisterType((*CoMenuGroup)(nil), "serverCo.CoMenuGroup")
	proto.RegisterType((*ReqCoMenuGroup)(nil), "serverCo.ReqCoMenuGroup")
	proto.RegisterType((*ResCoMenuGroup)(nil), "serverCo.ResCoMenuGroup")
	proto.RegisterType((*CoMenuGroupLimit)(nil), "serverCo.CoMenuGroupLimit")
	proto.RegisterType((*ResCoMenuGroupLimit)(nil), "serverCo.ResCoMenuGroupLimit")
	proto.RegisterType((*CoMenuGroupRole)(nil), "serverCo.CoMenuGroupRole")
	proto.RegisterType((*ResCoMenuGroupRole)(nil), "serverCo.ResCoMenuGroupRole")
	proto.RegisterType((*CoSysModule)(nil), "serverCo.CoSysModule")
	proto.RegisterType((*ReqCoSysModule)(nil), "serverCo.ReqCoSysModule")
	proto.RegisterType((*ResCoSysModule)(nil), "serverCo.ResCoSysModule")
	proto.RegisterType((*CoSysModuleClass)(nil), "serverCo.CoSysModuleClass")
	proto.RegisterType((*ResCoSysModuleClass)(nil), "serverCo.ResCoSysModuleClass")
	proto.RegisterType((*CoSysPlugin)(nil), "serverCo.CoSysPlugin")
	proto.RegisterType((*ReqCoSysPlugin)(nil), "serverCo.ReqCoSysPlugin")
	proto.RegisterType((*ResCoSysPlugin)(nil), "serverCo.ResCoSysPlugin")
	proto.RegisterType((*CoSysSetting)(nil), "serverCo.CoSysSetting")
	proto.RegisterType((*ReqCoSysSetting)(nil), "serverCo.ReqCoSysSetting")
	proto.RegisterType((*ResCoSysSetting)(nil), "serverCo.ResCoSysSetting")
	proto.RegisterType((*CoSysBenefit)(nil), "serverCo.CoSysBenefit")
	proto.RegisterType((*ReqCoSysBenefit)(nil), "serverCo.ReqCoSysBenefit")
	proto.RegisterType((*ResCoSysBenefit)(nil), "serverCo.ResCoSysBenefit")
	proto.RegisterType((*CoSysBenefitClass)(nil), "serverCo.CoSysBenefitClass")
	proto.RegisterType((*ResCoSysBenefitClass)(nil), "serverCo.ResCoSysBenefitClass")
	proto.RegisterType((*CoSysLimit)(nil), "serverCo.CoSysLimit")
	proto.RegisterType((*ReqCoSysLimit)(nil), "serverCo.ReqCoSysLimit")
	proto.RegisterType((*ResCoSysLimit)(nil), "serverCo.ResCoSysLimit")
	proto.RegisterType((*CoSysLimitList)(nil), "serverCo.CoSysLimitList")
	proto.RegisterType((*CoSysVip)(nil), "serverCo.CoSysVip")
	proto.RegisterType((*CoSysVipRule)(nil), "serverCo.CoSysVipRule")
	proto.RegisterType((*CoSysVipList)(nil), "serverCo.CoSysVipList")
	proto.RegisterType((*ReqCoSysVip)(nil), "serverCo.ReqCoSysVip")
	proto.RegisterType((*ResCoSysVip)(nil), "serverCo.ResCoSysVip")
	proto.RegisterType((*Uid)(nil), "serverCo.Uid")
	proto.RegisterType((*IdCoId)(nil), "serverCo.IdCoId")
	proto.RegisterType((*Permissions)(nil), "serverCo.Permissions")
	proto.RegisterType((*User_CoUser)(nil), "serverCo.User_CoUser")
	proto.RegisterType((*Res_User_CoUser)(nil), "serverCo.Res_User_CoUser")
	proto.RegisterType((*CoUser)(nil), "serverCo.CoUser")
	proto.RegisterType((*ReqCoUser)(nil), "serverCo.ReqCoUser")
	proto.RegisterType((*ResCoUser)(nil), "serverCo.ResCoUser")
	proto.RegisterType((*CoUserData)(nil), "serverCo.CoUserData")
	proto.RegisterType((*ReqUserContactData)(nil), "serverCo.ReqUserContactData")
	proto.RegisterType((*CoUserAddress)(nil), "serverCo.CoUserAddress")
	proto.RegisterType((*CoUserAddress_Link)(nil), "serverCo.CoUserAddress.Link")
	proto.RegisterType((*ReqCoUserAddress)(nil), "serverCo.ReqCoUserAddress")
	proto.RegisterType((*ResCoUserAddress)(nil), "serverCo.ResCoUserAddress")
	proto.RegisterType((*CoUserBenefit)(nil), "serverCo.CoUserBenefit")
	proto.RegisterType((*SaveCoUserBenefit)(nil), "serverCo.SaveCoUserBenefit")
	proto.RegisterType((*SaveCoUserBenefit_MeetBag)(nil), "serverCo.SaveCoUserBenefit.MeetBag")
	proto.RegisterType((*ReqCoUserBenefit)(nil), "serverCo.ReqCoUserBenefit")
	proto.RegisterType((*ResCoUserBenefit)(nil), "serverCo.ResCoUserBenefit")
	proto.RegisterType((*CoUserBenefitDiy)(nil), "serverCo.CoUserBenefitDiy")
	proto.RegisterType((*ReqCoUserBenefitDiy)(nil), "serverCo.ReqCoUserBenefitDiy")
	proto.RegisterType((*ResCoUserBenefitDiy)(nil), "serverCo.ResCoUserBenefitDiy")
	proto.RegisterType((*ResUserBenefitOwn)(nil), "serverCo.ResUserBenefitOwn")
	proto.RegisterType((*ResUserBenefitOwn_List)(nil), "serverCo.ResUserBenefitOwn.List")
	proto.RegisterType((*ResUserBenefitOwn_UseList)(nil), "serverCo.ResUserBenefitOwn.UseList")
	proto.RegisterType((*CoUserCert)(nil), "serverCo.CoUserCert")
	proto.RegisterType((*ReqCoUserCert)(nil), "serverCo.ReqCoUserCert")
	proto.RegisterType((*ResCoUserCert)(nil), "serverCo.ResCoUserCert")
	proto.RegisterType((*CoUserChain)(nil), "serverCo.CoUserChain")
	proto.RegisterType((*ReqCoUserChain)(nil), "serverCo.ReqCoUserChain")
	proto.RegisterType((*ResCoUserChain)(nil), "serverCo.ResCoUserChain")
	proto.RegisterType((*CoUserGroupRole)(nil), "serverCo.CoUserGroupRole")
	proto.RegisterType((*ReqCoUserGroupRole)(nil), "serverCo.ReqCoUserGroupRole")
	proto.RegisterType((*ResCoUserGroupRole)(nil), "serverCo.ResCoUserGroupRole")
	proto.RegisterType((*CoUserCustomer)(nil), "serverCo.CoUserCustomer")
	proto.RegisterType((*ReqCoUserCustomer)(nil), "serverCo.ReqCoUserCustomer")
	proto.RegisterType((*ResCoUserCustomer)(nil), "serverCo.ResCoUserCustomer")
	proto.RegisterType((*CoUserOrder)(nil), "serverCo.CoUserOrder")
	proto.RegisterType((*ReqCoUserOrder)(nil), "serverCo.ReqCoUserOrder")
	proto.RegisterType((*ResCoUserOrder)(nil), "serverCo.ResCoUserOrder")
	proto.RegisterType((*CoUserPoints)(nil), "serverCo.CoUserPoints")
	proto.RegisterType((*CoUserPointsDeduct)(nil), "serverCo.CoUserPointsDeduct")
	proto.RegisterType((*CoUserPointsExpireDetail)(nil), "serverCo.CoUserPointsExpireDetail")
	proto.RegisterType((*CoUserPointsRule)(nil), "serverCo.CoUserPointsRule")
	proto.RegisterType((*ReqCoUserPointsRule)(nil), "serverCo.ReqCoUserPointsRule")
	proto.RegisterType((*ResCoUserPointsRule)(nil), "serverCo.ResCoUserPointsRule")
	proto.RegisterType((*CoUserStaff)(nil), "serverCo.CoUserStaff")
	proto.RegisterType((*CoUserStaffGroup)(nil), "serverCo.CoUserStaffGroup")
	proto.RegisterType((*ReqCoUserStaff)(nil), "serverCo.ReqCoUserStaff")
	proto.RegisterType((*ResCoUserStaff)(nil), "serverCo.ResCoUserStaff")
	proto.RegisterType((*CoUserStore)(nil), "serverCo.CoUserStore")
	proto.RegisterType((*ReqCoUserStore)(nil), "serverCo.ReqCoUserStore")
	proto.RegisterType((*ResCoUserStore)(nil), "serverCo.ResCoUserStore")
	proto.RegisterType((*CoUserSetting)(nil), "serverCo.CoUserSetting")
	proto.RegisterMapType((map[int64][]byte)(nil), "serverCo.CoUserSetting.RuleDataEntry")
	proto.RegisterType((*SaveCoUserSetting)(nil), "serverCo.SaveCoUserSetting")
	proto.RegisterType((*ResCoUserSettingValue)(nil), "serverCo.ResCoUserSettingValue")
	proto.RegisterType((*CoUserVip)(nil), "serverCo.CoUserVip")
	proto.RegisterType((*ReqCoUserVip)(nil), "serverCo.ReqCoUserVip")
	proto.RegisterType((*ResCoUserVip)(nil), "serverCo.ResCoUserVip")
	proto.RegisterType((*ReqCoSysVipChoose)(nil), "serverCo.ReqCoSysVipChoose")
	proto.RegisterType((*ReqCoUserDecoFeature)(nil), "serverCo.ReqCoUserDecoFeature")
	proto.RegisterType((*ReqCoUserDecoUsePos)(nil), "serverCo.ReqCoUserDecoUsePos")
	proto.RegisterType((*ReqCoUserDecoOperate)(nil), "serverCo.ReqCoUserDecoOperate")
	proto.RegisterType((*CoUserFeature)(nil), "serverCo.CoUserFeature")
	proto.RegisterType((*ResCoUserDecoModuleList)(nil), "serverCo.ResCoUserDecoModuleList")
	proto.RegisterType((*ResCoUserDecoModuleList_List)(nil), "serverCo.ResCoUserDecoModuleList.List")
	proto.RegisterType((*ResCoUserDecoModuleList_List_CoSysModule)(nil), "serverCo.ResCoUserDecoModuleList.List.CoSysModule")
	proto.RegisterType((*CoUserShopCommon)(nil), "serverCo.CoUserShopCommon")
	proto.RegisterType((*ReqCoUserDecoStyle)(nil), "serverCo.ReqCoUserDecoStyle")
	proto.RegisterType((*CoUserShopInit)(nil), "serverCo.CoUserShopInit")
	proto.RegisterType((*CoFeatureConfig)(nil), "serverCo.CoFeatureConfig")
}

func init() { proto.RegisterFile("serverCo_sys.proto", fileDescriptor_829ee3766b824c5c) }

var fileDescriptor_829ee3766b824c5c = []byte{
	// 6349 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x3d, 0x3b, 0x70, 0x1c, 0xc9,
	0x75, 0xdc, 0x5d, 0xec, 0xaf, 0x17, 0x0b, 0x80, 0xc3, 0xdf, 0x72, 0x49, 0x9e, 0x78, 0x23, 0xe9,
	0x44, 0xe9, 0xce, 0xf4, 0x89, 0xa7, 0xb2, 0xc4, 0xbb, 0x33, 0x4f, 0x20, 0xc0, 0x3b, 0x41, 0x77,
	0xe4, 0x41, 0x03, 0x82, 0x2a, 0x5b, 0x56, 0x6d, 0x0d, 0x76, 0x1a, 0xe0, 0xd4, 0xed, 0xce, 0x2c,
	0x66, 0x66, 0x79, 0x5c, 0x47, 0x2a, 0x97, 0x23, 0x3b, 0x53, 0x95, 0x23, 0x07, 0x76, 0x68, 0x85,
	0x2e, 0x3b, 0x70, 0x39, 0x72, 0xa2, 0xc8, 0x96, 0x9d, 0x38, 0xf3, 0x27, 0x71, 0xe2, 0xc4, 0x89,
	0xcf, 0x81, 0x43, 0xd7, 0x7b, 0xaf, 0x7b, 0xa6, 0x7b, 0xa6, 0x67, 0xb0, 0x38, 0x82, 0x94, 0x23,
	0x4c, 0xbf, 0xee, 0xf7, 0xba, 0xfb, 0xfd, 0xfa, 0xf5, 0xeb, 0xee, 0x05, 0xb3, 0x62, 0x1e, 0x3d,
	0xe3, 0xd1, 0x56, 0x38, 0x8a, 0x17, 0xf1, 0xed, 0x59, 0x14, 0x26, 0xa1, 0xd5, 0x91, 0x30, 0xbb,
	0xcf, 0x7a, 0x0e, 0x8f, 0xe7, 0x93, 0xe4, 0xc1, 0x74, 0x96, 0x2c, 0xec, 0x27, 0xac, 0xb3, 0xeb,
	0x1e, 0xf1, 0x9d, 0xe0, 0x30, 0xb4, 0x2c, 0xb6, 0x32, 0x73, 0x8f, 0xf8, 0xa0, 0x76, 0xb3, 0x76,
	0xab, 0xe9, 0xe0, 0xb7, 0x35, 0x64, 0x1d, 0xf8, 0xbb, 0xe7, 0xff, 0x3e, 0x1f, 0xd4, 0x11, 0x9e,
	0x96, 0xa1, 0x2e, 0x8c, 0x3c, 0x1e, 0x7d, 0xcc, 0x17, 0x83, 0xc6, 0xcd, 0xda, 0xad, 0xae, 0x93,
	0x96, 0xed, 0xbf, 0xaa, 0xb1, 0x16, 0xf5, 0x03, 0x64, 0xc7, 0xa1, 0x97, 0x92, 0x85, 0x6f, 0x6b,
	0x83, 0x35, 0xa6, 0xf1, 0x11, 0x52, 0xec, 0x3a, 0xf0, 0x69, 0x7d, 0x87, 0xb5, 0x9e, 0x72, 0xd7,
	0xe3, 0xd1, 0xa0, 0x71, 0xb3, 0x71, 0xab, 0x77, 0xe7, 0xfa, 0x6d, 0x39, 0xe4, 0xdb, 0x44, 0xe7,
	0xf6, 0x0f, 0xb0, 0xfa, 0x41, 0x90, 0x44, 0x0b, 0x47, 0xb4, 0x05, 0xda, 0x07, 0xa1, 0xb7, 0x18,
	0xac, 0xdc, 0xac, 0xdd, 0x5a, 0x75, 0xf0, 0x7b, 0x78, 0x97, 0xf5, 0x94, 0xa6, 0xd0, 0xd5, 0x67,
	0x7c, 0x81, 0xbd, 0x77, 0x1d, 0xf8, 0xb4, 0x2e, 0xb2, 0xe6, 0x33, 0x77, 0x32, 0xe7, 0xa2, 0x7b,
	0x2a, 0xbc, 0x5b, 0xff, 0x5e, 0xcd, 0xbe, 0xc2, 0x9a, 0x0e, 0x3f, 0xde, 0xf1, 0xac, 0x35, 0x56,
	0xf7, 0x3d, 0xc4, 0x69, 0x38, 0x75, 0xdf, 0xb3, 0x7f, 0x5e, 0x63, 0xad, 0xad, 0xf0, 0xf1, 0x62,
	0xc6, 0xf3, 0x55, 0xd6, 0x0d, 0xc6, 0xc6, 0x11, 0x77, 0x13, 0xee, 0x8d, 0xdc, 0x44, 0xf0, 0xa8,
	0x2b, 0x20, 0x9b, 0x09, 0x54, 0xcf, 0x67, 0x9e, 0xac, 0x6e, 0x50, 0xb5, 0x80, 0x6c, 0x26, 0x30,
	0xba, 0x99, 0xef, 0xe1, 0xf8, 0x1b, 0x0e, 0x7c, 0xc2, 0x94, 0x02, 0x77, 0xca, 0x07, 0x4d, 0x1c,
	0x1c, 0x7e, 0xc3, 0x88, 0xe3, 0xc4, 0x4d, 0xf8, 0xa0, 0x85, 0xf8, 0x54, 0xb0, 0xb7, 0xd9, 0x2a,
	0x8d, 0x69, 0xcf, 0x9f, 0xce, 0x26, 0xc5, 0x91, 0x2d, 0x45, 0xdb, 0xfe, 0x88, 0x75, 0x1d, 0x1e,
	0x8b, 0xc9, 0x7d, 0x8d, 0xad, 0x4c, 0xfc, 0x38, 0x19, 0xd4, 0x50, 0x06, 0x1b, 0x99, 0x0c, 0xa8,
	0xde, 0xc1, 0x5a, 0x18, 0xce, 0x38, 0x9c, 0x07, 0x72, 0xb6, 0x54, 0x00, 0x91, 0xaf, 0x6e, 0x85,
	0x7b, 0x8b, 0xf8, 0xbe, 0x1f, 0x78, 0x7e, 0x70, 0x74, 0xc6, 0x9c, 0xb2, 0xd8, 0x4a, 0xb2, 0x98,
	0x71, 0x9c, 0x4e, 0xd3, 0xc1, 0x6f, 0xeb, 0x0a, 0x6b, 0xc3, 0xdf, 0x91, 0xef, 0xe1, 0x94, 0x1a,
	0x4e, 0x0b, 0x8a, 0x3b, 0x38, 0x51, 0x9c, 0x47, 0xfb, 0x66, 0xe3, 0x56, 0x23, 0x3f, 0xea, 0x8e,
	0x3a, 0xea, 0x3d, 0xb6, 0x8e, 0xd3, 0x57, 0xc6, 0xfd, 0x2d, 0x8d, 0x09, 0x97, 0x55, 0x26, 0x64,
	0xad, 0x2a, 0x59, 0xf1, 0xa7, 0x35, 0xb6, 0xae, 0x36, 0x7e, 0xe2, 0xcf, 0x0a, 0xdc, 0x38, 0xd5,
	0x7c, 0xae, 0xb2, 0xce, 0xc4, 0x9f, 0xfa, 0x09, 0xd4, 0xb4, 0xb0, 0xa6, 0x8d, 0xe5, 0x1d, 0xcf,
	0xba, 0xc4, 0x5a, 0xcf, 0xfc, 0x19, 0x54, 0xd0, 0x64, 0x9b, 0xcf, 0xfc, 0x19, 0x61, 0x00, 0x18,
	0xc5, 0xdd, 0xb9, 0xd9, 0xb8, 0xd5, 0x75, 0xda, 0xcf, 0xfc, 0xd9, 0x23, 0x90, 0xf8, 0xef, 0x30,
	0x2b, 0x37, 0x65, 0x18, 0xdf, 0x6f, 0x68, 0xb3, 0xbe, 0x6a, 0x9e, 0xf5, 0x13, 0x7f, 0x56, 0x39,
	0xf1, 0x7f, 0xaa, 0x83, 0x9d, 0x3c, 0xe4, 0xc1, 0xfc, 0x55, 0xd8, 0x09, 0xf2, 0xaf, 0xa9, 0xf0,
	0xef, 0x22, 0x6b, 0x26, 0x7e, 0x32, 0x21, 0x3b, 0xe9, 0x3a, 0x54, 0x20, 0xbf, 0x96, 0x3c, 0x1d,
	0xb4, 0x49, 0xeb, 0xe1, 0xdb, 0xba, 0xce, 0xba, 0xe3, 0x70, 0x3a, 0x0b, 0x03, 0x2e, 0x14, 0xa2,
	0xeb, 0x64, 0x00, 0xc0, 0xf0, 0xc7, 0x61, 0x30, 0xe8, 0x12, 0x06, 0x7c, 0xc3, 0x00, 0xfd, 0x78,
	0xe4, 0xf9, 0xf1, 0x6c, 0xe2, 0x2e, 0x06, 0xec, 0x66, 0xed, 0x56, 0xc7, 0xe9, 0xfa, 0xf1, 0x36,
	0x01, 0x00, 0x25, 0x0e, 0xa3, 0x64, 0xd0, 0xa3, 0xe1, 0xc0, 0x77, 0x66, 0xb6, 0xab, 0x8a, 0xd9,
	0x5a, 0x6f, 0xb1, 0xce, 0xf8, 0xa9, 0x3f, 0xf1, 0x22, 0x1e, 0x0c, 0xfa, 0x45, 0x3b, 0x03, 0xe6,
	0x39, 0x69, 0x0b, 0xfb, 0xc7, 0x60, 0x9e, 0xc7, 0x82, 0xa7, 0x6f, 0x28, 0x1e, 0xba, 0x77, 0xc7,
	0xca, 0xd0, 0xa4, 0x0f, 0x17, 0x5e, 0xdb, 0x66, 0x8d, 0x88, 0x1f, 0x23, 0x93, 0x4d, 0xd4, 0xa1,
	0x32, 0xb5, 0x7b, 0x24, 0x5c, 0x61, 0xf7, 0x88, 0x51, 0x25, 0xf3, 0xbf, 0xab, 0xb1, 0x2e, 0x35,
	0xdb, 0xdc, 0xdd, 0x39, 0x63, 0xb1, 0x5f, 0x61, 0xed, 0x29, 0x0f, 0xe6, 0xa3, 0x54, 0xf4, 0x2d,
	0x28, 0xee, 0x78, 0xd6, 0x65, 0xd6, 0x9a, 0xf2, 0xe4, 0x69, 0xe8, 0x09, 0x5f, 0x26, 0x4a, 0xa9,
	0xac, 0x5b, 0x8a, 0xac, 0x6f, 0xb2, 0x9e, 0xc7, 0xe3, 0x71, 0xe4, 0xcf, 0x12, 0x3f, 0x0c, 0x84,
	0x1a, 0xa8, 0x20, 0xfb, 0xa7, 0x6c, 0x35, 0x65, 0x32, 0x4c, 0x62, 0x59, 0x3e, 0x7f, 0x5d, 0xe5,
	0xf3, 0x85, 0x3c, 0xd7, 0x36, 0x77, 0x77, 0x88, 0xd5, 0x0f, 0x81, 0x7c, 0x9c, 0x91, 0xff, 0x86,
	0xc6, 0x6d, 0x23, 0x5e, 0x15, 0xc3, 0x7f, 0x59, 0x67, 0x3d, 0x6a, 0xf9, 0x51, 0x14, 0xce, 0x67,
	0x2f, 0xdd, 0xd2, 0xae, 0xb0, 0x76, 0x14, 0x4e, 0x54, 0xaf, 0x04, 0xc5, 0x9d, 0x6c, 0x39, 0x69,
	0x29, 0x4b, 0x15, 0xc0, 0xc2, 0x84, 0x4b, 0x63, 0x83, 0x6f, 0x9c, 0xc6, 0x53, 0xd7, 0x0f, 0x52,
	0xcf, 0x0b, 0x05, 0x70, 0x5c, 0x7e, 0x0c, 0x31, 0x0a, 0x9a, 0x59, 0xc7, 0x69, 0xfa, 0xf1, 0xde,
	0x22, 0x86, 0xc6, 0x13, 0xfe, 0x8c, 0x4f, 0xd0, 0xc4, 0x9a, 0x0e, 0x15, 0xac, 0x6b, 0xac, 0x8b,
	0x8a, 0x80, 0x7c, 0xeb, 0xa1, 0xa3, 0xeb, 0x00, 0xe0, 0x13, 0x60, 0xd3, 0x57, 0x58, 0x6f, 0x36,
	0x99, 0x1f, 0xf9, 0x01, 0x55, 0xaf, 0x62, 0x35, 0x23, 0xd0, 0x27, 0x82, 0x8f, 0x64, 0x88, 0x7d,
	0x75, 0xfd, 0x74, 0xd9, 0x5a, 0x2a, 0x75, 0xe2, 0xe4, 0xb2, 0x72, 0xff, 0x86, 0x2a, 0xf7, 0x4b,
	0x79, 0xf9, 0x21, 0x2d, 0x92, 0xfc, 0x8f, 0xa0, 0x8b, 0x58, 0xed, 0xe2, 0x9b, 0x9a, 0xec, 0x4b,
	0x70, 0xab, 0xa4, 0xff, 0xf7, 0x35, 0xb6, 0xa1, 0xb4, 0xfd, 0x04, 0x96, 0x81, 0x33, 0x56, 0x01,
	0x75, 0xb5, 0x59, 0xd1, 0x57, 0x1b, 0x9b, 0xf5, 0x51, 0x0e, 0x47, 0xd0, 0x77, 0xa6, 0x11, 0xbd,
	0xa9, 0x1c, 0xcf, 0x8e, 0x97, 0x49, 0xb0, 0xa5, 0x4a, 0x30, 0x8d, 0xba, 0xda, 0x04, 0xc5, 0x82,
	0xfd, 0x13, 0x76, 0x41, 0x67, 0x10, 0xcd, 0xe7, 0xb6, 0xc6, 0xa5, 0xa1, 0x91, 0x4b, 0xd8, 0xb2,
	0x92, 0x55, 0x7f, 0x86, 0xcb, 0x70, 0xc6, 0xd6, 0x70, 0xc2, 0xcf, 0x3e, 0x28, 0x41, 0x0b, 0x58,
	0x51, 0x2c, 0xe0, 0x32, 0x6b, 0xc5, 0x3c, 0xf2, 0xdd, 0x89, 0x74, 0x4d, 0x54, 0xc2, 0x05, 0xcb,
	0x9f, 0xc5, 0xd2, 0x5a, 0xe0, 0x3b, 0x5d, 0x8a, 0xf5, 0x31, 0x56, 0x2c, 0xc5, 0x5a, 0xc3, 0xca,
	0xc9, 0xff, 0xf3, 0x0a, 0x78, 0x89, 0xbd, 0x45, 0xfc, 0x30, 0xf4, 0xe6, 0x67, 0x3e, 0xf1, 0xab,
	0xac, 0x33, 0x9e, 0xb8, 0x71, 0xac, 0xa8, 0x08, 0x96, 0x77, 0x3c, 0x30, 0x55, 0x61, 0x8d, 0xa9,
	0x7a, 0x74, 0x08, 0x50, 0xee, 0x32, 0x70, 0xb5, 0x6d, 0x2b, 0xab, 0xed, 0x45, 0xd6, 0x74, 0x27,
	0xbe, 0x1b, 0x8b, 0xb5, 0x99, 0x0a, 0xd0, 0xeb, 0x3c, 0xe6, 0x23, 0x5c, 0xf7, 0xbb, 0x38, 0xa4,
	0xf6, 0x3c, 0xe6, 0x8f, 0x45, 0xe8, 0x04, 0x55, 0xb3, 0x30, 0x1e, 0xb0, 0x9b, 0x8d, 0x5b, 0x4d,
	0xa7, 0x35, 0x8f, 0xf9, 0x6e, 0x18, 0x83, 0x73, 0x20, 0x65, 0x76, 0xbd, 0xa9, 0x1f, 0x08, 0xdf,
	0xc1, 0x10, 0xb4, 0x09, 0x10, 0x5c, 0x63, 0xdc, 0xe7, 0xa3, 0x60, 0x3e, 0x15, 0xeb, 0x74, 0x6b,
	0xea, 0x3e, 0x7f, 0x34, 0x9f, 0x42, 0x85, 0x1f, 0x8f, 0xfc, 0xc0, 0x4f, 0xd0, 0x6f, 0x74, 0x9c,
	0x96, 0x1f, 0xef, 0x04, 0x7e, 0x22, 0x2a, 0x70, 0xb9, 0x5f, 0x93, 0x15, 0x7b, 0xb0, 0xe0, 0x5f,
	0x65, 0x9d, 0x43, 0xff, 0x39, 0xd5, 0xac, 0xd3, 0xf8, 0x0e, 0xfd, 0xe7, 0x58, 0xa5, 0x87, 0x0f,
	0x1b, 0xf9, 0xf0, 0xe1, 0x1a, 0xeb, 0x92, 0x33, 0x4c, 0xf8, 0x74, 0x70, 0x1e, 0x6b, 0x3b, 0xe8,
	0x0f, 0x13, 0x3e, 0x15, 0x95, 0x1e, 0x9f, 0xf0, 0x84, 0x0f, 0x2c, 0x59, 0xb9, 0x8d, 0x65, 0x51,
	0x39, 0x0e, 0x83, 0x43, 0xff, 0x68, 0x70, 0x41, 0x56, 0x6e, 0x61, 0x39, 0x73, 0x7c, 0x17, 0xd5,
	0x08, 0xe4, 0x2b, 0xac, 0x47, 0xed, 0x47, 0xd1, 0x7c, 0xc2, 0x07, 0x97, 0x70, 0xf3, 0xc4, 0x08,
	0xe4, 0x80, 0xae, 0x5c, 0x65, 0x1d, 0xe4, 0x16, 0x48, 0xf0, 0x32, 0x49, 0x17, 0xcb, 0x3b, 0x5e,
	0xea, 0x34, 0x33, 0xc5, 0x7a, 0x71, 0xa7, 0x99, 0xd2, 0xd2, 0x9d, 0x66, 0xd6, 0x45, 0x85, 0xd3,
	0xcc, 0x70, 0xab, 0x8c, 0xe1, 0x8f, 0xd0, 0x69, 0xa6, 0x6d, 0xb7, 0x40, 0x55, 0x5f, 0x81, 0x2b,
	0x48, 0xd9, 0xdf, 0x54, 0xd7, 0x1d, 0xe9, 0xf3, 0x72, 0xc3, 0xa9, 0xf0, 0x79, 0x7a, 0xcb, 0xca,
	0x99, 0xfe, 0x41, 0x43, 0x98, 0xfd, 0x2e, 0x9a, 0xdc, 0x19, 0x4f, 0xf2, 0x22, 0x6b, 0xa2, 0xe7,
	0x17, 0xb3, 0xa4, 0x42, 0x59, 0x28, 0x3e, 0x0d, 0xbd, 0x6c, 0x11, 0xc0, 0x82, 0x66, 0xc0, 0x6d,
	0xdd, 0x80, 0x73, 0x76, 0xda, 0x29, 0xd8, 0xa9, 0x64, 0x70, 0xd7, 0x10, 0x6d, 0x30, 0x3d, 0xda,
	0x20, 0xd7, 0xd1, 0x53, 0x5d, 0xc7, 0x06, 0x6b, 0x3c, 0xe3, 0x11, 0x5a, 0x78, 0xd7, 0x81, 0x4f,
	0xdc, 0x2c, 0x84, 0x33, 0x7f, 0x8c, 0xc6, 0x0d, 0x9b, 0x05, 0x28, 0xa4, 0x01, 0xe4, 0x9a, 0x12,
	0x40, 0xa6, 0x62, 0x5c, 0x57, 0xad, 0x48, 0x35, 0x92, 0x8d, 0x52, 0x23, 0x11, 0x62, 0x38, 0x13,
	0x23, 0x21, 0x5a, 0x05, 0x23, 0x11, 0x5d, 0x54, 0x1b, 0x89, 0xc0, 0xad, 0x52, 0x9d, 0x7f, 0x94,
	0x1b, 0xf8, 0x3d, 0x9e, 0x24, 0x67, 0xbf, 0x81, 0x2f, 0x8d, 0xe5, 0x4d, 0x19, 0x0f, 0x64, 0xae,
	0x47, 0xce, 0xb7, 0x85, 0x4e, 0xad, 0xed, 0x7a, 0x1e, 0x7a, 0x5f, 0x8b, 0xad, 0xa0, 0xdb, 0x6a,
	0x53, 0xce, 0x07, 0xbe, 0x33, 0x09, 0x75, 0x54, 0x43, 0x1b, 0xc3, 0xde, 0xfe, 0x58, 0x9b, 0xd2,
	0xb2, 0x72, 0xb8, 0xa5, 0xca, 0x21, 0x9f, 0x02, 0x10, 0xc4, 0x48, 0x10, 0x4a, 0x02, 0x41, 0x76,
	0x52, 0x9d, 0x40, 0x90, 0xd8, 0x55, 0xa2, 0xf8, 0xdb, 0xba, 0xcc, 0xa5, 0xf0, 0x80, 0x1f, 0xbe,
	0x8c, 0x00, 0xef, 0x2c, 0x57, 0x6f, 0xc5, 0x9c, 0xc9, 0xf8, 0x2d, 0xb6, 0x02, 0xf6, 0x2e, 0xa4,
	0x81, 0xdf, 0xc6, 0x3d, 0xf5, 0x75, 0xd6, 0x9d, 0xb9, 0x91, 0x3b, 0xe5, 0x09, 0x8f, 0xd0, 0x86,
	0x57, 0x9d, 0x0c, 0x90, 0xdf, 0xb7, 0xf5, 0x0a, 0xfb, 0x36, 0xf3, 0x06, 0x5b, 0x15, 0xbb, 0x64,
	0xdf, 0x99, 0x88, 0x5d, 0x10, 0x2b, 0x88, 0x5d, 0x76, 0x72, 0x42, 0xde, 0x48, 0x60, 0x57, 0x89,
	0xfd, 0xe7, 0x35, 0x76, 0x5e, 0x6d, 0xfc, 0xaa, 0xd6, 0xa9, 0x6b, 0xac, 0x0b, 0x6e, 0x99, 0x46,
	0x24, 0x84, 0x3e, 0x8f, 0xf9, 0x16, 0x0e, 0xea, 0xa7, 0xec, 0x62, 0x6e, 0xa6, 0x34, 0xac, 0xdf,
	0xd4, 0xa6, 0x7b, 0xcd, 0x3c, 0xdd, 0x25, 0x16, 0xac, 0x3a, 0x63, 0x88, 0xf1, 0x32, 0x76, 0x32,
	0x59, 0x2c, 0xbe, 0x92, 0x8f, 0xc5, 0x0b, 0x2e, 0x67, 0xc8, 0x3a, 0x7e, 0x90, 0xf0, 0xe8, 0x99,
	0x3b, 0x11, 0x39, 0xb6, 0xb4, 0x0c, 0xed, 0xe7, 0xe0, 0x8a, 0x44, 0x88, 0x0a, 0xdf, 0x98, 0xc3,
	0x16, 0x7b, 0xda, 0x86, 0x03, 0x9f, 0x08, 0x71, 0x9f, 0xa3, 0x86, 0x03, 0xc4, 0x7d, 0x9e, 0xc6,
	0xfc, 0x2c, 0x8b, 0xf9, 0xd3, 0x35, 0xab, 0x97, 0xad, 0x59, 0xf6, 0x88, 0xf5, 0xa5, 0xca, 0x12,
	0x1b, 0x96, 0x55, 0xd8, 0x37, 0x54, 0x85, 0xbd, 0x98, 0x93, 0x01, 0xed, 0x90, 0x50, 0x5d, 0x3f,
	0x85, 0x0e, 0x62, 0xa5, 0x83, 0x5b, 0x9a, 0xf4, 0xcc, 0x98, 0x55, 0x62, 0xfb, 0xe3, 0x1a, 0x5b,
	0xcb, 0x9a, 0xe2, 0x2e, 0x1b, 0x13, 0xfd, 0xa9, 0xf0, 0xf0, 0x5b, 0xdb, 0x4a, 0xd6, 0xf5, 0xad,
	0xe4, 0x35, 0xd6, 0x75, 0xc7, 0xc9, 0x28, 0x4e, 0xdc, 0x48, 0x4a, 0xae, 0xe3, 0x8e, 0x93, 0x3d,
	0x28, 0xc3, 0x62, 0x01, 0x95, 0x3c, 0xf0, 0x44, 0x82, 0xb4, 0xe5, 0x8e, 0x93, 0x07, 0x81, 0x97,
	0x6d, 0x23, 0x9b, 0xea, 0x36, 0xf2, 0xdf, 0x1b, 0xac, 0x83, 0xa3, 0x31, 0x65, 0x5a, 0x5f, 0x4a,
	0x5c, 0x47, 0x79, 0xc6, 0xa6, 0x9a, 0x67, 0x54, 0xb2, 0xb7, 0x2d, 0x8c, 0x5e, 0x64, 0xf6, 0xf6,
	0x3a, 0xeb, 0x46, 0x7c, 0x1c, 0x4e, 0xa7, 0x30, 0x1d, 0xca, 0xd2, 0x66, 0x00, 0xcc, 0x5e, 0x44,
	0xfe, 0x98, 0x8f, 0x26, 0xee, 0x01, 0x9f, 0x88, 0x0d, 0x0f, 0x43, 0xd0, 0x27, 0x00, 0x21, 0x01,
	0x40, 0xf0, 0x42, 0xae, 0x93, 0x0a, 0x00, 0x3d, 0x9e, 0x87, 0x89, 0x2b, 0xf3, 0x24, 0x58, 0x00,
	0xa6, 0xe2, 0x07, 0x6e, 0x67, 0x28, 0x17, 0xd9, 0x41, 0x00, 0x6c, 0x68, 0x06, 0xac, 0x3d, 0x0e,
	0x83, 0x84, 0x07, 0x89, 0x88, 0x83, 0x64, 0x11, 0x5c, 0x17, 0xae, 0xa9, 0x7d, 0xa3, 0xeb, 0x7a,
	0xe2, 0xcf, 0x1c, 0x8c, 0xb0, 0xd3, 0xb5, 0xd6, 0x9d, 0xf0, 0x18, 0x43, 0x24, 0x70, 0xba, 0x50,
	0x48, 0xf3, 0x9f, 0xeb, 0xa6, 0xfc, 0xe7, 0x86, 0x1a, 0x37, 0xbd, 0xc3, 0xba, 0xc4, 0xa6, 0xe0,
	0x30, 0x1c, 0x9c, 0x2f, 0x76, 0x98, 0x9d, 0x68, 0x38, 0x1d, 0x64, 0x60, 0x70, 0x18, 0xda, 0x7f,
	0x2d, 0x63, 0x13, 0x31, 0x96, 0x54, 0x2c, 0x35, 0x93, 0x58, 0xea, 0xaa, 0x58, 0x60, 0x45, 0x43,
	0xfe, 0x7a, 0x61, 0xaa, 0x67, 0x08, 0xd8, 0x0e, 0x71, 0x88, 0xf8, 0x2d, 0xb4, 0x8c, 0x0a, 0xd9,
	0x14, 0x9b, 0xea, 0x14, 0xbf, 0x4d, 0x29, 0x75, 0x34, 0x9b, 0x56, 0x19, 0xa3, 0xc0, 0x12, 0x30,
	0xd5, 0x0e, 0x1f, 0xf6, 0x2f, 0x94, 0x61, 0xcb, 0x4c, 0x14, 0x89, 0x99, 0xc6, 0x4d, 0x85, 0x74,
	0x0d, 0xad, 0xeb, 0x01, 0x34, 0x65, 0x51, 0x1a, 0x6a, 0x16, 0xa5, 0x22, 0x35, 0x73, 0x83, 0x51,
	0xb4, 0x3c, 0xf2, 0xdc, 0x85, 0x1c, 0x79, 0x17, 0x21, 0xdb, 0xee, 0x42, 0xd9, 0x07, 0x93, 0xf9,
	0x50, 0x58, 0x4e, 0x18, 0x4f, 0x44, 0x2a, 0xa6, 0x27, 0x7d, 0x10, 0x58, 0xd1, 0xb2, 0x1e, 0xe8,
	0x6b, 0xaa, 0x07, 0xb2, 0x0c, 0x9a, 0x83, 0xfe, 0xe7, 0x63, 0x3c, 0x76, 0x54, 0x89, 0x2b, 0xde,
	0xc7, 0x84, 0x55, 0xe5, 0x7b, 0xde, 0x64, 0x8d, 0x7d, 0x3a, 0xdf, 0x9a, 0xa7, 0x86, 0x0e, 0x9f,
	0xa9, 0x07, 0xaa, 0x67, 0x1e, 0xc8, 0x7e, 0x8b, 0xb5, 0x76, 0xbc, 0xad, 0xb0, 0x78, 0xa8, 0x67,
	0x6c, 0x3d, 0x62, 0xbd, 0x5d, 0x1e, 0x4d, 0xfd, 0x38, 0xf6, 0xc3, 0x20, 0x36, 0xba, 0x34, 0xd1,
	0x6d, 0x5d, 0xeb, 0x16, 0xf7, 0x0c, 0x0d, 0x65, 0xcf, 0x90, 0x25, 0xa8, 0x57, 0xd4, 0x04, 0xb5,
	0xfd, 0xe7, 0x35, 0xd6, 0xdb, 0x8f, 0x79, 0x34, 0xda, 0x0a, 0xe1, 0x8f, 0x69, 0x50, 0xa8, 0xd7,
	0x75, 0x45, 0xaf, 0xdf, 0x60, 0xeb, 0x68, 0x31, 0x14, 0xb3, 0x61, 0x75, 0x03, 0x8f, 0x74, 0xfa,
	0x00, 0xc6, 0x25, 0xf6, 0x91, 0x08, 0xc5, 0x26, 0xe1, 0x51, 0x28, 0x5d, 0x15, 0x7c, 0x83, 0xf6,
	0x8f, 0x79, 0x94, 0x8c, 0x94, 0x0d, 0x5a, 0x07, 0x00, 0x8f, 0x85, 0x8e, 0x19, 0xce, 0x15, 0xdf,
	0xc7, 0xd0, 0x66, 0xa4, 0x8e, 0xb2, 0x74, 0x6f, 0xa1, 0x34, 0x22, 0x91, 0xd9, 0x7f, 0x81, 0x47,
	0x40, 0xc6, 0xb9, 0x9d, 0xbd, 0x23, 0xd6, 0x0e, 0xcc, 0x1a, 0xb9, 0x03, 0x40, 0x60, 0x45, 0xab,
	0x8c, 0x15, 0xed, 0x22, 0x2b, 0x0c, 0x39, 0xea, 0x21, 0xeb, 0xcc, 0xa2, 0xf0, 0x99, 0x1f, 0x8c,
	0x65, 0xc2, 0x29, 0x2d, 0xa3, 0x6e, 0xf8, 0xc9, 0x42, 0xf8, 0x5f, 0xfc, 0x06, 0xa9, 0xa3, 0x8a,
	0x2e, 0x84, 0xef, 0x15, 0xa5, 0x92, 0x40, 0x55, 0x9e, 0xed, 0x20, 0xb3, 0x5e, 0xfc, 0x6c, 0x07,
	0x85, 0xa0, 0x9d, 0xed, 0x20, 0xe1, 0x8a, 0xb3, 0x9d, 0x4c, 0x6c, 0x25, 0x96, 0xf6, 0x3f, 0x35,
	0x08, 0xce, 0xa0, 0xd9, 0xb6, 0x9b, 0xb8, 0xa6, 0x13, 0xe6, 0x49, 0x38, 0xc6, 0x84, 0x7b, 0xcd,
	0x81, 0x4f, 0x58, 0x62, 0x5c, 0xcf, 0x8b, 0x78, 0x1c, 0x0b, 0x6b, 0x90, 0x45, 0x10, 0x15, 0x72,
	0x3f, 0xdb, 0xfe, 0x41, 0x91, 0xe2, 0x00, 0x64, 0xf6, 0x08, 0x62, 0x27, 0xa9, 0xa1, 0x00, 0x78,
	0xe8, 0x3e, 0x47, 0xff, 0xfc, 0x34, 0x0c, 0xd2, 0x13, 0x3d, 0x2c, 0xc0, 0x38, 0x8e, 0x8f, 0x45,
	0x30, 0x56, 0x3f, 0x3e, 0x06, 0xda, 0x9f, 0xf3, 0xd1, 0xf8, 0xa9, 0x2b, 0xcf, 0xf2, 0x5a, 0x9f,
	0xf3, 0xad, 0xa7, 0x2e, 0xce, 0xca, 0x0f, 0x92, 0x28, 0x94, 0x4b, 0x27, 0x16, 0x30, 0xff, 0x25,
	0xf4, 0x10, 0x2c, 0x99, 0xe1, 0x70, 0xa4, 0x6a, 0xee, 0xfb, 0x9e, 0xed, 0x31, 0xcb, 0xe1, 0xc7,
	0x30, 0xed, 0xad, 0x30, 0x48, 0xdc, 0x71, 0x82, 0xb3, 0xff, 0x1a, 0x5b, 0x99, 0xc7, 0x3c, 0x12,
	0x12, 0x32, 0x30, 0x12, 0x6a, 0x21, 0xb0, 0xf2, 0xdc, 0xc4, 0x35, 0x85, 0x64, 0x92, 0x8f, 0x0e,
	0xb6, 0xb0, 0xff, 0xb0, 0xc1, 0xfa, 0x04, 0xdc, 0x14, 0x3c, 0x3a, 0x73, 0x83, 0x41, 0xe7, 0xb5,
	0xa2, 0x38, 0xaf, 0x92, 0xdb, 0x05, 0x06, 0x1e, 0xab, 0xaa, 0xdf, 0x2e, 0x51, 0xfd, 0x8e, 0x51,
	0xf5, 0xbb, 0x9a, 0xea, 0x2b, 0x1a, 0xc1, 0x74, 0x8d, 0x78, 0x1b, 0x14, 0x33, 0xf8, 0x0c, 0x53,
	0xb2, 0xda, 0x85, 0x0f, 0x8d, 0x29, 0xb7, 0x3f, 0xf1, 0x83, 0xcf, 0x1c, 0x6c, 0x39, 0xdc, 0x63,
	0x2b, 0x50, 0x82, 0x89, 0x0b, 0x22, 0xa3, 0x94, 0x5f, 0x5d, 0x01, 0xd9, 0xf1, 0x8c, 0xcb, 0xe9,
	0x80, 0xb5, 0x3d, 0x7e, 0xe8, 0xce, 0x27, 0x92, 0x51, 0xb2, 0x68, 0x73, 0xb6, 0x91, 0x5a, 0xa1,
	0x14, 0xc4, 0xb2, 0xc6, 0xf8, 0x4d, 0xd5, 0x18, 0xaf, 0x94, 0xcc, 0x80, 0x6c, 0x72, 0x1f, 0xba,
	0x89, 0xf5, 0x6e, 0xde, 0xd4, 0x4c, 0xb3, 0x14, 0xbf, 0xca, 0x42, 0x7f, 0xd1, 0x94, 0x4a, 0xf4,
	0x72, 0x52, 0x05, 0xcb, 0x2a, 0x11, 0xf4, 0x12, 0x4e, 0xc2, 0x68, 0x84, 0x77, 0x7d, 0x5a, 0xf2,
	0x44, 0x7d, 0x12, 0x46, 0x5b, 0xb0, 0xfb, 0x07, 0x23, 0x87, 0xb0, 0x75, 0x34, 0x8f, 0x26, 0xc2,
	0x70, 0x3b, 0x08, 0xd8, 0x8f, 0x26, 0x88, 0x3b, 0x71, 0xfd, 0x29, 0x79, 0xe6, 0x8e, 0x18, 0x21,
	0x40, 0xa4, 0x6b, 0xa6, 0x18, 0x0d, 0x7c, 0x6a, 0x4d, 0xc6, 0x68, 0xd7, 0x58, 0x37, 0x4e, 0xc2,
	0xf1, 0x67, 0x4a, 0xe2, 0xbe, 0x83, 0x00, 0x88, 0x74, 0xaf, 0xb1, 0x6e, 0xc2, 0x23, 0x41, 0x90,
	0x0e, 0xfd, 0x3a, 0x00, 0x40, 0x7a, 0xb2, 0x12, 0xe3, 0xa4, 0x35, 0xda, 0xe9, 0x01, 0x00, 0xc3,
	0x24, 0x9b, 0xf5, 0xb1, 0xf2, 0x80, 0x1f, 0xf9, 0x01, 0x70, 0x64, 0x9d, 0x0e, 0xb8, 0x00, 0x78,
	0x1f, 0x60, 0x9b, 0x89, 0xf5, 0x1a, 0xc3, 0x22, 0xec, 0x4e, 0xa0, 0x05, 0x25, 0xff, 0x90, 0xe6,
	0x83, 0x00, 0x78, 0xf6, 0x55, 0xd6, 0xf7, 0xe3, 0x51, 0xc4, 0x67, 0xdc, 0x4d, 0xdc, 0x83, 0x09,
	0xc7, 0x84, 0x7e, 0xd3, 0x59, 0xf5, 0x63, 0x27, 0x85, 0x59, 0xdf, 0x64, 0x1b, 0x59, 0x8b, 0x11,
	0xc6, 0x61, 0x98, 0xdb, 0x6f, 0x3a, 0xeb, 0x19, 0x9c, 0xf6, 0x6a, 0x5f, 0x67, 0x6b, 0x11, 0x3f,
	0x9e, 0xfb, 0x11, 0x1f, 0x4d, 0xc3, 0x03, 0x7f, 0xc2, 0x31, 0xcf, 0xdf, 0x74, 0xfa, 0x02, 0xfa,
	0x10, 0x81, 0xd6, 0x37, 0xd8, 0xba, 0x6c, 0x36, 0x8b, 0xc2, 0x43, 0x68, 0x47, 0x69, 0x7f, 0x89,
	0xbd, 0x4b, 0x50, 0x08, 0x22, 0x8f, 0xc2, 0xd0, 0x8b, 0x47, 0x41, 0x88, 0xc9, 0xff, 0xae, 0xd3,
	0xc6, 0xf2, 0xa3, 0x10, 0x86, 0x0e, 0x4a, 0x08, 0xe1, 0x32, 0xf9, 0x84, 0xcb, 0x58, 0xbf, 0x2a,
	0x80, 0xbb, 0xe8, 0x1a, 0x72, 0x89, 0x99, 0x2b, 0x15, 0x89, 0x99, 0x81, 0xba, 0xde, 0xfd, 0x67,
	0x8d, 0x9d, 0xdf, 0x73, 0x9f, 0x71, 0x5d, 0x5f, 0xdf, 0x64, 0x2b, 0xb8, 0x15, 0xa8, 0x99, 0x8d,
	0x28, 0xcd, 0x9b, 0x40, 0x23, 0xeb, 0x1e, 0xeb, 0x4c, 0x39, 0x4f, 0x46, 0x07, 0xee, 0xd1, 0xa0,
	0x8e, 0x56, 0xf3, 0xd5, 0x0c, 0xa1, 0x40, 0xfb, 0xf6, 0x43, 0xce, 0x93, 0xfb, 0xee, 0x91, 0xd3,
	0x9e, 0xd2, 0x07, 0xb8, 0xfe, 0x03, 0xaa, 0x43, 0x12, 0x0d, 0x3a, 0xfa, 0x10, 0xa0, 0xfb, 0xee,
	0xd1, 0xf0, 0x01, 0x6b, 0x0b, 0x24, 0x3a, 0x73, 0xe6, 0x22, 0x5e, 0x20, 0x7b, 0xc2, 0xce, 0x51,
	0x89, 0x6e, 0x30, 0x86, 0x95, 0xd9, 0x4d, 0xb2, 0xa6, 0x83, 0xcd, 0x29, 0x98, 0x56, 0x9d, 0xca,
	0x69, 0x93, 0x50, 0xd5, 0x4e, 0x45, 0xcb, 0x42, 0xa9, 0x4e, 0x45, 0xe1, 0x67, 0x95, 0x53, 0x59,
	0x26, 0x0f, 0xf5, 0x6f, 0x75, 0xb6, 0xa1, 0xb5, 0xde, 0xf6, 0x17, 0xaf, 0xc0, 0xaf, 0xdc, 0x60,
	0x52, 0x12, 0x59, 0xf2, 0xb1, 0x2b, 0x20, 0x8a, 0x5b, 0x6f, 0x19, 0x32, 0x8d, 0x6d, 0x3d, 0xd3,
	0x28, 0xae, 0x3d, 0x15, 0xcf, 0x18, 0xd5, 0xec, 0x63, 0x4e, 0x8d, 0x59, 0x51, 0x8d, 0x45, 0x5e,
	0x8c, 0x54, 0x59, 0xec, 0xa6, 0xe7, 0x31, 0xdf, 0xc3, 0x7d, 0xec, 0x5d, 0xb6, 0x9a, 0x8e, 0x16,
	0xf4, 0x77, 0xb5, 0x32, 0x69, 0x28, 0xd5, 0x0e, 0x77, 0xb3, 0x9f, 0xb1, 0x0b, 0x79, 0xed, 0x00,
	0x0e, 0x2f, 0xab, 0x20, 0x6f, 0xa9, 0x0a, 0x32, 0x2c, 0x11, 0xf0, 0xb6, 0xbf, 0x20, 0x1d, 0xf9,
	0x40, 0x1c, 0x37, 0xe5, 0x3a, 0xb3, 0x52, 0x35, 0xc1, 0x34, 0x7a, 0x85, 0x36, 0xfc, 0x4d, 0x9d,
	0x9d, 0x77, 0x78, 0xac, 0xe0, 0x7f, 0xfa, 0x79, 0x60, 0x7d, 0x47, 0x53, 0xb3, 0x9b, 0xda, 0x75,
	0x4d, 0xbd, 0xe9, 0x6d, 0xdc, 0x13, 0x53, 0x0f, 0xf7, 0xe8, 0x00, 0x08, 0x31, 0x0b, 0xf6, 0x5b,
	0xc4, 0xdc, 0x8f, 0x39, 0x6d, 0xa8, 0xe7, 0xf4, 0x31, 0x7c, 0x02, 0x11, 0x40, 0x9c, 0x2c, 0xb5,
	0x6d, 0x92, 0xf9, 0xd8, 0xc6, 0xc9, 0xf9, 0xd8, 0xe1, 0x3e, 0x6b, 0x8b, 0xbe, 0x4c, 0x7a, 0xae,
	0x68, 0x65, 0x3d, 0xaf, 0x95, 0x9a, 0x8e, 0x34, 0x74, 0x1d, 0xb1, 0xff, 0xa5, 0x2e, 0xe3, 0xe7,
	0x2d, 0x1e, 0x25, 0x67, 0x7f, 0xa0, 0x22, 0x37, 0x3f, 0x2b, 0xf9, 0xcd, 0x4f, 0xe1, 0x3c, 0x4e,
	0xec, 0x5a, 0x5b, 0xda, 0xae, 0x15, 0x59, 0xd6, 0xd6, 0x13, 0xc1, 0x11, 0x3f, 0xf2, 0x43, 0xcc,
	0xfe, 0x53, 0x66, 0xb3, 0x43, 0x00, 0xba, 0xd7, 0x41, 0x5b, 0xa4, 0xae, 0xba, 0x45, 0x82, 0xb8,
	0xde, 0x8d, 0xbc, 0x91, 0x08, 0xa4, 0xbb, 0x4e, 0x0b, 0x8a, 0x22, 0xae, 0x87, 0x8a, 0x59, 0x14,
	0xca, 0xb3, 0xb8, 0x0e, 0x00, 0x76, 0xa3, 0x30, 0x4e, 0x2b, 0xc7, 0x61, 0x10, 0x8b, 0x64, 0x14,
	0x56, 0x6e, 0xc1, 0xae, 0x5b, 0xdc, 0x0e, 0xee, 0x67, 0xb7, 0x83, 0xd3, 0xf5, 0x64, 0x4d, 0x5d,
	0x4f, 0x64, 0xd6, 0x34, 0xe5, 0xef, 0x8b, 0x67, 0x4d, 0x25, 0x29, 0x3d, 0x6b, 0x9a, 0x76, 0x50,
	0x91, 0x35, 0x4d, 0x31, 0x4f, 0xb8, 0x18, 0xda, 0x13, 0x4d, 0x91, 0x79, 0x2f, 0xdf, 0xa7, 0x02,
	0xe7, 0xc2, 0x20, 0x75, 0xa7, 0x54, 0x28, 0xd9, 0xf8, 0xcb, 0x63, 0xcb, 0x6c, 0x7c, 0x2f, 0x7e,
	0x6c, 0x99, 0xd2, 0xd2, 0x8f, 0x2d, 0xb3, 0x2e, 0x2a, 0x8e, 0x2d, 0x33, 0xdc, 0x2a, 0x9e, 0xfe,
	0x37, 0xde, 0xf2, 0x81, 0xb6, 0x2f, 0xf1, 0x96, 0xcf, 0x52, 0x31, 0xb0, 0xe1, 0x86, 0x0f, 0x5a,
	0x54, 0x38, 0xd1, 0x8e, 0xbc, 0x3b, 0x00, 0x90, 0x67, 0xde, 0x71, 0xe2, 0x1e, 0x1e, 0x8e, 0xd4,
	0x8b, 0xc9, 0x0c, 0x41, 0x78, 0xf6, 0xa2, 0x9e, 0x99, 0x76, 0xc9, 0xc4, 0xe9, 0xcc, 0xd4, 0xfe,
	0x59, 0x0d, 0xb7, 0xa8, 0xf9, 0x79, 0x2f, 0x2b, 0xaf, 0xec, 0xee, 0x9d, 0x60, 0x25, 0xdd, 0xbd,
	0x7b, 0x93, 0xc4, 0xd8, 0x40, 0xec, 0xab, 0x79, 0x51, 0x64, 0xf7, 0x8e, 0x50, 0x94, 0xf2, 0xee,
	0x92, 0x3e, 0x82, 0x8a, 0xbb, 0x4b, 0x3a, 0x8d, 0xca, 0x6b, 0xc4, 0x78, 0xb8, 0x80, 0xe2, 0x9f,
	0xc7, 0x49, 0x38, 0x7d, 0x19, 0xb9, 0xa4, 0x82, 0x44, 0x85, 0x87, 0x6c, 0x6a, 0x1e, 0x12, 0x73,
	0xda, 0xe4, 0x34, 0x29, 0xa7, 0x7d, 0x99, 0xb5, 0x66, 0xa1, 0x1f, 0x24, 0x31, 0x0a, 0xb3, 0xe1,
	0x88, 0x12, 0x74, 0x48, 0x5f, 0x23, 0x77, 0x32, 0x11, 0xae, 0xb3, 0x4b, 0x90, 0xcd, 0xc9, 0xc4,
	0x3e, 0x82, 0x25, 0xf4, 0x38, 0x37, 0xa7, 0x65, 0xa5, 0xf5, 0x2d, 0xd5, 0xba, 0x06, 0x05, 0x0b,
	0x11, 0xe4, 0x48, 0x2a, 0x3f, 0xc6, 0xb5, 0x3a, 0xd7, 0xd1, 0x5b, 0x9a, 0x50, 0xca, 0x29, 0x54,
	0xc9, 0xe4, 0x5f, 0x53, 0xd7, 0xf5, 0x69, 0xe4, 0xbd, 0x12, 0x81, 0x94, 0x2c, 0x63, 0x6e, 0xb6,
	0x8c, 0xb9, 0xe4, 0xca, 0x68, 0x77, 0xd8, 0x56, 0x77, 0x87, 0xc6, 0x0b, 0x01, 0xb0, 0xf1, 0x99,
	0xb9, 0x8b, 0x51, 0xe2, 0x8b, 0x6b, 0x24, 0x0d, 0xa7, 0x3d, 0x73, 0x17, 0x8f, 0xfd, 0xa9, 0xee,
	0xfb, 0x68, 0x82, 0x67, 0xe3, 0xfb, 0x90, 0x56, 0xd1, 0xf7, 0x51, 0x17, 0x27, 0xf8, 0x3e, 0xc2,
	0xad, 0x12, 0xca, 0x7f, 0xe0, 0x3d, 0x01, 0x68, 0xbb, 0x4b, 0x6a, 0x68, 0x4a, 0x58, 0x9f, 0x4d,
	0xda, 0x55, 0x75, 0x74, 0x36, 0xeb, 0xd3, 0x59, 0xc2, 0x8c, 0x47, 0xb0, 0x8d, 0x16, 0xcb, 0x08,
	0x1d, 0x30, 0xec, 0xf2, 0x68, 0xdb, 0x5d, 0xc0, 0xa6, 0x75, 0x16, 0x85, 0x09, 0x1f, 0x03, 0x61,
	0xe4, 0x38, 0x79, 0xbf, 0x7e, 0x0a, 0x05, 0xbe, 0xc3, 0x86, 0xf3, 0x88, 0x07, 0x3c, 0x72, 0x27,
	0xa3, 0xc8, 0x4d, 0xfc, 0x50, 0x08, 0x6c, 0x55, 0x00, 0x1d, 0x80, 0x59, 0xdf, 0x61, 0x2d, 0x8f,
	0x7b, 0xf3, 0x71, 0x82, 0x52, 0x33, 0xe4, 0x8a, 0x68, 0xf6, 0xdb, 0xd8, 0xc6, 0x11, 0x6d, 0xad,
	0x8f, 0x58, 0x9f, 0x3f, 0x9f, 0xc1, 0x76, 0xd8, 0xe3, 0x89, 0xeb, 0xd3, 0x8d, 0xe2, 0xde, 0x1d,
	0xdb, 0x8c, 0xfc, 0x00, 0x9b, 0x6e, 0x63, 0x4b, 0x67, 0x95, 0x2b, 0x25, 0x3b, 0x60, 0x56, 0xb1,
	0x1b, 0xeb, 0x36, 0xbb, 0x40, 0x1d, 0x8d, 0xdc, 0x29, 0x08, 0x43, 0xec, 0xe1, 0xe9, 0x99, 0xd3,
	0x79, 0xaa, 0xda, 0xc4, 0x1a, 0x79, 0xe2, 0xba, 0x31, 0xf5, 0x83, 0x11, 0x3e, 0x91, 0x12, 0x28,
	0x42, 0x18, 0x6b, 0x53, 0x3f, 0x40, 0x59, 0x53, 0x73, 0xfb, 0x73, 0x36, 0x28, 0x1b, 0x19, 0x2c,
	0x19, 0x62, 0x52, 0xe9, 0xb6, 0xb4, 0xe9, 0x30, 0x02, 0xc9, 0x35, 0x05, 0xb8, 0x0d, 0xa2, 0xf1,
	0x43, 0x4f, 0x04, 0xc4, 0x0c, 0x40, 0xbb, 0x08, 0x01, 0x23, 0xc0, 0x06, 0x20, 0x37, 0x91, 0x0a,
	0x83, 0xf2, 0xb6, 0xbb, 0xb0, 0x7f, 0x9e, 0xee, 0xfb, 0xa8, 0x67, 0x67, 0xfe, 0x4a, 0xd6, 0xd2,
	0xcc, 0xa7, 0x36, 0x35, 0x9f, 0x0a, 0x6b, 0xe7, 0x5c, 0xae, 0x9d, 0x2d, 0xb1, 0x76, 0xce, 0xc5,
	0xda, 0xf9, 0x3a, 0x5b, 0x15, 0x0e, 0x97, 0xf8, 0x4e, 0xee, 0xb8, 0x47, 0x30, 0xe2, 0xf8, 0xeb,
	0x6c, 0x35, 0xe6, 0x81, 0x37, 0x9a, 0xf2, 0x38, 0x06, 0x4b, 0xee, 0xe0, 0x45, 0xa2, 0x1e, 0xc0,
	0x1e, 0x12, 0x08, 0x9a, 0x1c, 0x84, 0xc1, 0x3c, 0x1e, 0x89, 0x01, 0x90, 0x57, 0xe8, 0x21, 0x8c,
	0x78, 0x60, 0xff, 0x48, 0xd9, 0xac, 0x29, 0x6c, 0x59, 0xd6, 0x3d, 0x98, 0x4e, 0x99, 0x7e, 0xa2,
	0x6c, 0xc9, 0x14, 0x92, 0x15, 0x37, 0x00, 0xf5, 0x96, 0x95, 0x3e, 0xe1, 0x4f, 0xea, 0xd2, 0x51,
	0xef, 0x41, 0x20, 0xf1, 0x6b, 0x59, 0x39, 0xaf, 0xb2, 0x0e, 0x05, 0x36, 0x81, 0x3c, 0x82, 0x69,
	0x63, 0xf9, 0x51, 0x48, 0x5b, 0x0c, 0x77, 0x32, 0x52, 0xf6, 0x1e, 0x1d, 0x00, 0x3c, 0xd2, 0x52,
	0xd1, 0x1d, 0x35, 0x15, 0x2d, 0xd7, 0xe1, 0xae, 0x72, 0xb6, 0xfc, 0xb6, 0xbc, 0x89, 0xc8, 0xcc,
	0xcc, 0xc2, 0xb9, 0x53, 0xb4, 0x41, 0x0d, 0x6d, 0x2e, 0x75, 0x3b, 0xab, 0xd2, 0xa3, 0xb3, 0x5a,
	0x2e, 0x3a, 0x53, 0xde, 0x3d, 0xd4, 0xb5, 0x77, 0x0f, 0x12, 0x4b, 0x9c, 0xc4, 0xd1, 0x14, 0xc2,
	0x09, 0xc7, 0xd7, 0x55, 0xea, 0x42, 0x42, 0x02, 0x38, 0x9b, 0x85, 0x04, 0x69, 0x15, 0x17, 0x12,
	0xea, 0xe2, 0x84, 0x85, 0x84, 0x70, 0x2b, 0xaf, 0x73, 0x34, 0x32, 0xa5, 0x09, 0x23, 0xfe, 0xff,
	0xea, 0x24, 0x02, 0x5f, 0xa4, 0x8c, 0xf1, 0xe2, 0x44, 0xd7, 0x81, 0x4f, 0xed, 0x6c, 0xa2, 0x53,
	0x72, 0x36, 0xd1, 0x35, 0x9e, 0x4d, 0xb0, 0xb2, 0xb3, 0x89, 0x9e, 0x7e, 0x36, 0x51, 0x3c, 0xd9,
	0xca, 0x65, 0x8b, 0xfa, 0xc5, 0x6c, 0xd1, 0x57, 0x59, 0xff, 0x60, 0x1e, 0xfb, 0x01, 0x8f, 0x63,
	0x52, 0x28, 0xda, 0xac, 0xae, 0x4a, 0x20, 0x2a, 0x95, 0xd6, 0x08, 0x56, 0xc5, 0x75, 0xcc, 0xbf,
	0x64, 0x8d, 0xfc, 0x82, 0x0e, 0x81, 0x3c, 0xce, 0x4a, 0x87, 0xc2, 0x88, 0x9b, 0x74, 0x08, 0xba,
	0x38, 0x51, 0x87, 0x00, 0xb7, 0x4a, 0x87, 0x7e, 0x55, 0x93, 0x47, 0x11, 0x65, 0x17, 0x48, 0x0d,
	0xbe, 0x50, 0xdd, 0xe2, 0x34, 0xb4, 0x6b, 0xa1, 0xf7, 0x85, 0xf7, 0xc7, 0xd3, 0xb4, 0x15, 0x1c,
	0xd4, 0xd7, 0x0b, 0x83, 0xa2, 0x8e, 0x6e, 0x83, 0x53, 0xdc, 0x76, 0x13, 0x97, 0x5e, 0x07, 0xe3,
	0x22, 0x01, 0xc5, 0xe1, 0x7b, 0xac, 0xaf, 0x55, 0xa9, 0xaf, 0x81, 0x1b, 0x86, 0xd7, 0xc0, 0xab,
	0xea, 0x6b, 0xe0, 0xdf, 0x55, 0xb3, 0xd5, 0xa7, 0x99, 0x12, 0xae, 0x3b, 0xd8, 0x9c, 0x06, 0x4f,
	0x59, 0xe6, 0x9e, 0x80, 0xc1, 0x60, 0xec, 0x1f, 0xb2, 0x4b, 0x19, 0xfb, 0x09, 0x8e, 0x89, 0x63,
	0x23, 0xbd, 0x1b, 0x8c, 0x49, 0x7a, 0xd8, 0x37, 0x5e, 0x20, 0x12, 0x90, 0x1d, 0xcf, 0xfe, 0x02,
	0x1f, 0xe0, 0x01, 0xa5, 0x97, 0x72, 0xfb, 0x69, 0xa9, 0xb8, 0x5c, 0x46, 0xd6, 0xd9, 0x4a, 0x8d,
	0x91, 0xb5, 0xa8, 0x4a, 0xaf, 0xac, 0xb4, 0xf5, 0x2b, 0x2b, 0xb9, 0x3b, 0x29, 0x9d, 0xfc, 0x9d,
	0x14, 0xc0, 0xf5, 0xe6, 0xa8, 0x02, 0x69, 0xc0, 0xee, 0xcd, 0x41, 0x9c, 0x3c, 0x7d, 0xb3, 0x27,
	0xe7, 0xfd, 0xe2, 0x6f, 0xf6, 0x04, 0x25, 0xfd, 0xcd, 0x9e, 0x24, 0x5f, 0xf1, 0x66, 0x4f, 0xe2,
	0x55, 0xd9, 0xc6, 0x63, 0xb1, 0xff, 0xa3, 0xdb, 0x2d, 0x5b, 0x4f, 0xc3, 0x30, 0xe6, 0xc6, 0x60,
	0xdd, 0x74, 0x76, 0x59, 0x66, 0x22, 0xf6, 0xef, 0xb1, 0x8b, 0x29, 0x0f, 0xb6, 0xf9, 0x38, 0xfc,
	0x90, 0xbb, 0xc9, 0x3c, 0xe2, 0x65, 0x37, 0xf1, 0x92, 0xd9, 0x64, 0xa4, 0x10, 0x6f, 0x27, 0xb3,
	0x09, 0x4a, 0xe8, 0x12, 0x6b, 0x41, 0x55, 0x4a, 0xbe, 0x99, 0xcc, 0x26, 0x3b, 0x9e, 0x7d, 0x5f,
	0x09, 0x7c, 0x80, 0xfa, 0x3e, 0x3d, 0xa8, 0x31, 0x11, 0x57, 0x5e, 0xdf, 0x88, 0xa5, 0x92, 0x5e,
	0xdf, 0xd8, 0x3f, 0xab, 0xe5, 0x86, 0xf8, 0xe9, 0x8c, 0x47, 0xb0, 0x15, 0x5b, 0x76, 0xee, 0x37,
	0x18, 0x3b, 0xa4, 0x59, 0x65, 0xe3, 0xeb, 0x0a, 0xc8, 0x0e, 0x9a, 0x9a, 0xac, 0x46, 0xf1, 0x50,
	0x22, 0xb4, 0x27, 0x60, 0x78, 0x07, 0xeb, 0x1f, 0xea, 0xd2, 0x2d, 0x49, 0xf6, 0xfc, 0x7a, 0x16,
	0x37, 0x58, 0xb4, 0x26, 0x6e, 0x72, 0x18, 0x46, 0x53, 0x19, 0xcc, 0xca, 0x32, 0xde, 0x53, 0x0d,
	0xe7, 0x51, 0x7a, 0xd4, 0x2e, 0x4a, 0xfa, 0xcb, 0x9f, 0x4e, 0xf1, 0xe5, 0x0f, 0x68, 0xb4, 0xfa,
	0x1c, 0x0a, 0x7f, 0x9c, 0x41, 0xbf, 0xda, 0xc3, 0xd4, 0x0d, 0xf0, 0xeb, 0x6c, 0x35, 0x24, 0x01,
	0x10, 0x16, 0x9d, 0x69, 0xf4, 0x04, 0x0c, 0x11, 0x5f, 0x63, 0x2c, 0x7d, 0x08, 0x4d, 0xa9, 0x59,
	0x7c, 0x1b, 0x24, 0x21, 0xf6, 0x2f, 0x1b, 0xec, 0x4a, 0x6a, 0x19, 0x20, 0x51, 0x7a, 0x99, 0x82,
	0xa9, 0xf3, 0x77, 0x35, 0x23, 0x79, 0x43, 0xcb, 0xec, 0x9b, 0x10, 0x94, 0x93, 0x81, 0xe1, 0x7f,
	0xd5, 0x4f, 0x91, 0xda, 0xff, 0x50, 0x4b, 0xed, 0xdf, 0x59, 0xae, 0xa3, 0xe2, 0x6b, 0xa1, 0xe1,
	0xff, 0xd6, 0xaa, 0x1f, 0xc9, 0xbd, 0xd8, 0x73, 0x35, 0xe5, 0x65, 0x59, 0xd7, 0xf0, 0xb2, 0x0c,
	0x63, 0x5a, 0x56, 0xfa, 0x80, 0xac, 0xa7, 0x3f, 0x20, 0xd3, 0x54, 0x61, 0xb5, 0xea, 0x11, 0x58,
	0xbf, 0xec, 0x11, 0x98, 0x96, 0x3c, 0xff, 0x55, 0x2d, 0x8d, 0x87, 0x9f, 0x86, 0xb3, 0xad, 0x70,
	0x3a, 0x0d, 0x5f, 0x45, 0x3e, 0x5a, 0x53, 0xda, 0x76, 0x4e, 0x69, 0xab, 0x4c, 0xe4, 0x24, 0xbd,
	0xbc, 0xa7, 0x24, 0x44, 0x41, 0xf8, 0x7b, 0xc9, 0x62, 0x62, 0x76, 0x33, 0xc8, 0x8f, 0x45, 0x76,
	0x4d, 0x14, 0x0b, 0xf6, 0x5f, 0xa6, 0x39, 0x47, 0xe0, 0x87, 0x7c, 0x69, 0xb2, 0x94, 0x8f, 0x7a,
	0x97, 0xad, 0xc6, 0x4f, 0xc3, 0xd9, 0x48, 0x78, 0x1d, 0xa1, 0x95, 0x85, 0x93, 0x57, 0xe1, 0x7e,
	0x9c, 0x1e, 0x34, 0x96, 0xbe, 0xe8, 0x3d, 0x86, 0xc5, 0xd1, 0x18, 0x05, 0x20, 0xe2, 0x9c, 0xe2,
	0x6e, 0x26, 0x15, 0x91, 0xc3, 0xe2, 0xf4, 0xdb, 0x5e, 0xb0, 0xf5, 0x2d, 0xe9, 0xf4, 0x85, 0xb0,
	0x4d, 0x63, 0xd6, 0x78, 0x5e, 0xcf, 0xf1, 0xfc, 0x04, 0x07, 0x9b, 0x79, 0xa6, 0x15, 0xd5, 0x33,
	0xdd, 0xf9, 0xe2, 0x75, 0xd6, 0x88, 0x17, 0xb1, 0xf5, 0x0e, 0xeb, 0x00, 0x19, 0xb4, 0xdc, 0xc2,
	0xef, 0x85, 0x0c, 0x2f, 0xe4, 0x2c, 0x13, 0x80, 0xf6, 0x39, 0xeb, 0x6d, 0x42, 0xc2, 0x5b, 0x55,
	0x45, 0xa4, 0x02, 0x24, 0xc3, 0x80, 0x78, 0x6c, 0x49, 0x8c, 0x3b, 0x8c, 0x61, 0x1f, 0x64, 0x20,
	0x95, 0x38, 0xf4, 0x03, 0x33, 0xf6, 0x39, 0xeb, 0x1e, 0xeb, 0x89, 0x1f, 0xba, 0xd8, 0xc5, 0xad,
	0x7b, 0x31, 0x88, 0x18, 0x5e, 0xcd, 0xcd, 0x28, 0xfb, 0x6d, 0x0c, 0xfb, 0x9c, 0x75, 0x3f, 0xc5,
	0xc7, 0xa9, 0x95, 0xfc, 0x74, 0x48, 0x35, 0x8d, 0x0f, 0x52, 0x1a, 0x38, 0xd9, 0x32, 0x1a, 0x25,
	0x70, 0xfb, 0x9c, 0xf5, 0x1e, 0xeb, 0xcb, 0x41, 0xd0, 0xdc, 0xcb, 0x48, 0x98, 0x38, 0xf0, 0x31,
	0x5b, 0xcb, 0x7e, 0xea, 0x03, 0x85, 0x5a, 0xfe, 0x4b, 0x20, 0xc3, 0xeb, 0xa5, 0xf3, 0x78, 0xe2,
	0xcf, 0xec, 0x73, 0xd6, 0x0f, 0x54, 0x62, 0xc8, 0x91, 0x0a, 0x62, 0xe5, 0x55, 0x79, 0x4a, 0xc8,
	0x97, 0x2f, 0x4b, 0x69, 0x93, 0x6d, 0x28, 0x63, 0x22, 0x06, 0x55, 0xd0, 0x32, 0xf1, 0xe8, 0xbb,
	0xac, 0x8d, 0x3f, 0xd3, 0x30, 0x99, 0x58, 0x97, 0xf2, 0xd5, 0xf8, 0xab, 0x4a, 0x05, 0xb5, 0x87,
	0xe6, 0xf6, 0x39, 0xeb, 0xb7, 0x58, 0x07, 0xbe, 0x50, 0xb7, 0xb4, 0x26, 0xe2, 0x47, 0x08, 0xca,
	0xf0, 0xde, 0x26, 0xbc, 0xa2, 0xb9, 0x20, 0x52, 0x01, 0x92, 0x61, 0x14, 0xcd, 0xa5, 0x14, 0xe3,
	0x0e, 0x63, 0xd8, 0x87, 0xc1, 0x5c, 0xf2, 0x38, 0x29, 0x23, 0x7e, 0x9b, 0xf5, 0x95, 0xd7, 0xf8,
	0xc1, 0x67, 0x96, 0xf9, 0xe7, 0x0c, 0xca, 0xa6, 0xf5, 0x01, 0xeb, 0x21, 0x1f, 0x67, 0x3e, 0x72,
	0xe4, 0xb2, 0x81, 0x23, 0x9b, 0xbb, 0x3b, 0xc3, 0xcb, 0x06, 0xec, 0xcd, 0xdd, 0x1d, 0xfb, 0x9c,
	0x75, 0x37, 0x25, 0x80, 0xac, 0x31, 0xfd, 0x90, 0xc6, 0xd0, 0x04, 0xd4, 0x50, 0x91, 0x47, 0xa7,
	0x41, 0xfd, 0x1e, 0xcd, 0x1a, 0x7a, 0x25, 0x66, 0x19, 0x91, 0x4d, 0xfc, 0x7a, 0xa0, 0xf0, 0x0b,
	0xa7, 0x3c, 0x30, 0x4c, 0x99, 0x58, 0x36, 0x30, 0x4c, 0x1a, 0x6b, 0x90, 0x6f, 0x19, 0x19, 0x9c,
	0x78, 0x09, 0xdb, 0xcd, 0xe0, 0x1c, 0x01, 0x9c, 0xfe, 0x69, 0x09, 0xbc, 0xcf, 0xd6, 0xb3, 0x11,
	0x10, 0x13, 0x4a, 0x48, 0x98, 0xd8, 0xb0, 0xcb, 0xce, 0xeb, 0x3f, 0xe2, 0x00, 0x96, 0x54, 0xf1,
	0x1b, 0x0f, 0xc3, 0x1b, 0x65, 0xcc, 0xc0, 0x6a, 0xfb, 0x9c, 0xf5, 0x88, 0x59, 0x3a, 0x0c, 0xd9,
	0x52, 0x45, 0xb2, 0xa2, 0xce, 0x44, 0x0f, 0xb9, 0xf4, 0xe5, 0xe9, 0x7d, 0xc8, 0x2e, 0xe6, 0xc6,
	0x47, 0x4c, 0xab, 0xa2, 0x68, 0xe2, 0xdc, 0x47, 0x0a, 0xe7, 0x9c, 0x70, 0xc2, 0x4b, 0x57, 0xa9,
	0xeb, 0x65, 0x1c, 0x03, 0x2c, 0x74, 0xf3, 0x3a, 0xa1, 0xa2, 0x4b, 0xd5, 0xaa, 0x87, 0xe5, 0x55,
	0xf6, 0x39, 0x6b, 0x9b, 0x5d, 0xd0, 0x40, 0x26, 0xaf, 0xaa, 0x93, 0x33, 0xcd, 0xed, 0x03, 0xc6,
	0x76, 0xb3, 0x5f, 0x6c, 0x29, 0x71, 0xac, 0x83, 0xe2, 0x8a, 0x43, 0x48, 0xb8, 0xf8, 0x0a, 0x02,
	0x46, 0xd3, 0x4a, 0x5b, 0x56, 0xd2, 0x78, 0x5f, 0xd2, 0x28, 0xda, 0x55, 0x46, 0xc0, 0x0c, 0x56,
	0xb1, 0x8b, 0x46, 0xb5, 0x04, 0xf6, 0x5d, 0xb6, 0x2a, 0xfa, 0x36, 0x58, 0x54, 0x86, 0x6f, 0xe2,
	0xdd, 0x36, 0x5b, 0xa7, 0xda, 0x13, 0x5d, 0x71, 0xd5, 0xe4, 0x1f, 0xb0, 0x9e, 0x48, 0x45, 0x21,
	0x07, 0xaf, 0x16, 0x39, 0x28, 0xaa, 0x4d, 0x01, 0x8c, 0xa8, 0x22, 0xb7, 0xbe, 0x97, 0x65, 0xba,
	0xac, 0x92, 0xe7, 0xcf, 0xc3, 0x12, 0x38, 0xf9, 0x66, 0x51, 0x30, 0x46, 0x40, 0x92, 0x80, 0x89,
	0x11, 0xef, 0xb1, 0xbe, 0xec, 0xdb, 0x1c, 0xfb, 0x54, 0x21, 0xdf, 0x65, 0xed, 0x27, 0x3e, 0x39,
	0xe6, 0x4b, 0xc5, 0xb9, 0x43, 0x34, 0x70, 0xa9, 0x38, 0x6f, 0x8a, 0x2a, 0xde, 0x41, 0x54, 0x9c,
	0xaf, 0xe1, 0x31, 0xd3, 0xd0, 0x00, 0xb3, 0xcf, 0x59, 0xdf, 0x46, 0x24, 0x9c, 0xa3, 0x09, 0xc9,
	0x34, 0xc4, 0x77, 0x58, 0x37, 0x0b, 0x5b, 0x96, 0x45, 0x7a, 0xc0, 0x7a, 0xe2, 0xb2, 0x5b, 0x99,
	0x5c, 0x45, 0xb5, 0x31, 0x30, 0xa5, 0x2a, 0x11, 0x98, 0x8a, 0xeb, 0x83, 0xc6, 0xe0, 0x56, 0xd0,
	0x28, 0x81, 0x6b, 0x04, 0xcc, 0x91, 0xed, 0x89, 0x04, 0x20, 0xb2, 0x15, 0x23, 0x28, 0x89, 0x6c,
	0x05, 0x09, 0x13, 0x17, 0x7e, 0xc8, 0xd6, 0xd5, 0x37, 0xc9, 0x15, 0xd1, 0xdb, 0x6b, 0xa5, 0x5c,
	0x40, 0x4c, 0x5c, 0x1f, 0x36, 0x54, 0x08, 0xf2, 0xa3, 0xea, 0x01, 0xf4, 0xb0, 0xaa, 0xb2, 0x48,
	0x0f, 0xd9, 0xf3, 0x22, 0xf4, 0x1e, 0x30, 0x4b, 0x1b, 0x9f, 0x48, 0x12, 0x54, 0x51, 0x34, 0xb1,
	0xec, 0x3e, 0x63, 0x94, 0x17, 0x29, 0xf3, 0xa8, 0x54, 0x6b, 0x72, 0x2a, 0x54, 0x43, 0x3e, 0x91,
	0xbe, 0x8d, 0x1e, 0x55, 0x10, 0x30, 0x83, 0x55, 0x6c, 0xa3, 0x47, 0x3d, 0x09, 0xfb, 0x2e, 0x5b,
	0x15, 0x7d, 0x9b, 0x3d, 0xaa, 0xc0, 0x37, 0x4d, 0xfd, 0x43, 0xb6, 0xae, 0xfc, 0xe2, 0x4a, 0xe9,
	0x3a, 0x7b, 0xa3, 0x6c, 0xe6, 0x52, 0x12, 0x1f, 0x6b, 0x74, 0x8a, 0x61, 0x89, 0x8e, 0x30, 0xac,
	0xa8, 0x2b, 0x10, 0x2b, 0xc6, 0x24, 0xa7, 0x22, 0xb6, 0xc5, 0xce, 0xab, 0x23, 0x33, 0x04, 0x24,
	0x39, 0x72, 0xe6, 0x45, 0xbb, 0x8b, 0xd1, 0x0a, 0x32, 0xe8, 0x4a, 0x51, 0x41, 0x28, 0x94, 0xb9,
	0x52, 0xe4, 0x92, 0x8c, 0x8c, 0xee, 0x0a, 0x02, 0xc8, 0x19, 0xe3, 0x2b, 0xf4, 0xa1, 0x11, 0xaa,
	0xa0, 0x22, 0x1f, 0x4e, 0x87, 0xfa, 0x5d, 0xd6, 0x53, 0xc3, 0x30, 0x33, 0xb2, 0x61, 0xbe, 0x77,
	0xbe, 0xb8, 0x45, 0x6f, 0xc0, 0xac, 0x4d, 0x76, 0x51, 0x79, 0x27, 0x7a, 0x7f, 0xe1, 0xf0, 0xe3,
	0x39, 0xd7, 0xe3, 0x16, 0xa5, 0xbe, 0x64, 0xad, 0xea, 0x6d, 0x85, 0xf8, 0xd3, 0x36, 0x18, 0xf1,
	0xac, 0x6b, 0xdc, 0xdb, 0xf1, 0x72, 0xce, 0x58, 0x7d, 0x8e, 0x89, 0x99, 0x8a, 0xb5, 0xad, 0x50,
	0xde, 0xdb, 0xfa, 0x12, 0xf8, 0xef, 0xc8, 0xe3, 0x5e, 0x88, 0xc7, 0x62, 0xab, 0xaf, 0xbc, 0xe8,
	0xf4, 0xbd, 0x8a, 0xfd, 0x2b, 0xde, 0x43, 0x30, 0xed, 0x5f, 0xa1, 0xa2, 0x80, 0x27, 0x3a, 0xbb,
	0x8d, 0x97, 0xab, 0xa3, 0x8f, 0xb8, 0x61, 0x94, 0x85, 0x67, 0x74, 0xd8, 0xbe, 0x05, 0x5f, 0xfb,
	0x33, 0xab, 0x50, 0x6b, 0x6c, 0x7f, 0x87, 0x31, 0xca, 0xfa, 0x15, 0xf7, 0xae, 0x79, 0x1c, 0x95,
	0xfb, 0xf2, 0x39, 0x1e, 0x8c, 0xcb, 0xf8, 0x4e, 0x6f, 0x68, 0x84, 0xda, 0xe7, 0xac, 0x77, 0x45,
	0x87, 0x6e, 0xe2, 0xee, 0xcf, 0x4e, 0x89, 0xfb, 0x36, 0x75, 0x0c, 0xee, 0x03, 0x3a, 0xce, 0x71,
	0xde, 0x34, 0xd4, 0x4d, 0xd6, 0x57, 0x9e, 0x22, 0xee, 0xcf, 0x2c, 0x2d, 0xba, 0xcf, 0x3f, 0x53,
	0x2c, 0x49, 0xeb, 0xac, 0x2b, 0x0f, 0xca, 0x50, 0x80, 0x43, 0x83, 0x00, 0x45, 0xfd, 0x70, 0x68,
	0x90, 0xa3, 0xa8, 0xc3, 0xd5, 0x45, 0x25, 0x86, 0x96, 0x5b, 0xf6, 0x74, 0x6d, 0x58, 0x56, 0x51,
	0x20, 0x83, 0x56, 0xfc, 0x65, 0xc8, 0x7c, 0x9f, 0x9d, 0x57, 0x47, 0x43, 0x3a, 0x50, 0x4a, 0xa8,
	0x64, 0x5b, 0x9e, 0xde, 0x34, 0x36, 0xae, 0x74, 0x69, 0x6d, 0x61, 0xa5, 0x4b, 0x6b, 0x68, 0x57,
	0x9d, 0x16, 0x8b, 0x8b, 0x5d, 0x46, 0xc3, 0x0c, 0xce, 0x11, 0x28, 0xae, 0x77, 0x4b, 0x10, 0x78,
	0x9f, 0x38, 0x4a, 0x23, 0x30, 0x2c, 0x79, 0x19, 0x09, 0x73, 0x6c, 0x89, 0x8a, 0x29, 0x53, 0x5b,
	0xcb, 0xb9, 0x84, 0x1f, 0x11, 0xf7, 0xf5, 0x1d, 0xe9, 0x75, 0x03, 0xff, 0xb2, 0xcd, 0xdf, 0x75,
	0x03, 0x0f, 0x73, 0x7b, 0x53, 0x0d, 0x54, 0x4c, 0x1c, 0xea, 0xf4, 0xca, 0xab, 0x0c, 0xc4, 0x8a,
	0x1b, 0xdd, 0x53, 0x10, 0xdb, 0x66, 0x17, 0xf4, 0x91, 0x19, 0x36, 0xba, 0x3a, 0x39, 0x13, 0x9f,
	0x1f, 0xb1, 0x0d, 0xf5, 0xd2, 0x2d, 0x72, 0xec, 0x9a, 0x49, 0xe3, 0x44, 0x83, 0xe1, 0x35, 0x93,
	0xd2, 0x89, 0x4a, 0xcc, 0x8d, 0x6a, 0xf4, 0x90, 0x5d, 0xa5, 0x57, 0x7c, 0x87, 0xa5, 0x35, 0x45,
	0x4a, 0xc8, 0xab, 0x2f, 0x47, 0xe9, 0x3e, 0xb3, 0xb4, 0x31, 0x11, 0xa3, 0xca, 0x69, 0x55, 0x98,
	0x25, 0x5e, 0x8c, 0x2c, 0x35, 0x4b, 0xac, 0x35, 0x9a, 0x25, 0xd6, 0x64, 0x56, 0x85, 0x45, 0xb3,
	0x59, 0x12, 0x0d, 0x33, 0x18, 0xb3, 0x9c, 0xbd, 0xb4, 0xb8, 0x3f, 0x3b, 0x35, 0xba, 0x30, 0x4a,
	0xea, 0xbf, 0xc4, 0x28, 0x89, 0x84, 0x99, 0x09, 0xe7, 0xb3, 0xab, 0x7f, 0x7b, 0x1c, 0x9f, 0x8f,
	0xe9, 0xdb, 0x9e, 0xac, 0x7a, 0x58, 0x02, 0xc7, 0xc4, 0xd1, 0x05, 0x8d, 0xcc, 0x3e, 0x9e, 0xd1,
	0x7d, 0x09, 0x42, 0x8f, 0x49, 0xb0, 0xd9, 0x55, 0x44, 0x8c, 0x3d, 0x6e, 0x18, 0x24, 0x93, 0x35,
	0x29, 0x44, 0xc9, 0x7a, 0x35, 0xe5, 0xdb, 0x74, 0x58, 0x31, 0x50, 0xce, 0x91, 0xac, 0xa8, 0x33,
	0xd1, 0x2b, 0xc6, 0xca, 0xa7, 0xa2, 0xf7, 0x21, 0xbb, 0x98, 0x1b, 0x9f, 0x21, 0x5c, 0xce, 0x51,
	0x34, 0x9f, 0x2f, 0xad, 0xe5, 0x5e, 0xd1, 0xe5, 0xbc, 0xec, 0xb5, 0x8a, 0xc7, 0x70, 0x19, 0xf7,
	0xb3, 0x57, 0x7c, 0x68, 0x17, 0x26, 0xee, 0x67, 0x4d, 0x8c, 0xdc, 0xcf, 0xaa, 0x33, 0x6e, 0x65,
	0x30, 0x33, 0xf7, 0x15, 0x92, 0x15, 0x75, 0x26, 0x7a, 0x66, 0xee, 0x2f, 0x4d, 0x4f, 0x70, 0x5f,
	0x19, 0x5f, 0x09, 0xf7, 0x15, 0x8a, 0xe6, 0x38, 0x6a, 0x5d, 0x69, 0x55, 0x1a, 0x04, 0x55, 0x25,
	0x11, 0xee, 0x69, 0x24, 0xcc, 0xa1, 0x4f, 0x15, 0xfe, 0x7d, 0x0d, 0x3f, 0xbf, 0xcf, 0x2f, 0xbc,
	0x5f, 0x36, 0xd2, 0x10, 0x01, 0x8f, 0x9e, 0x09, 0x39, 0xd5, 0x28, 0x84, 0x67, 0xc5, 0x5b, 0xa1,
	0xa5, 0x9e, 0x15, 0x6b, 0x8d, 0x9e, 0x15, 0x6b, 0x32, 0xcf, 0x8a, 0x45, 0xb3, 0x67, 0x25, 0x1a,
	0x66, 0x70, 0x8e, 0x80, 0x39, 0xe0, 0x39, 0x81, 0x80, 0xf0, 0xad, 0x34, 0x82, 0x12, 0xdf, 0x4a,
	0x24, 0x2a, 0xd9, 0x10, 0x46, 0xbc, 0x82, 0x0d, 0x61, 0xc4, 0x4b, 0xd8, 0x10, 0x46, 0x5c, 0x9d,
	0x45, 0x18, 0xf1, 0x32, 0x36, 0x00, 0x0d, 0x33, 0x38, 0x47, 0xa0, 0x8c, 0x0d, 0x95, 0x04, 0x52,
	0x36, 0xc0, 0x08, 0x4a, 0xd9, 0x00, 0x24, 0x2a, 0x74, 0x5a, 0x64, 0x46, 0x71, 0x81, 0xb9, 0x52,
	0x72, 0xcf, 0xb2, 0x4a, 0xa7, 0xd5, 0x94, 0xad, 0x51, 0xa7, 0xab, 0x68, 0x7c, 0x44, 0x91, 0x87,
	0x76, 0x13, 0xf2, 0x2b, 0x26, 0x9e, 0x2b, 0x0d, 0x4a, 0x64, 0xba, 0x9e, 0xbf, 0x0c, 0xf7, 0x9a,
	0x41, 0xaa, 0x4a, 0xbd, 0x91, 0xcc, 0x63, 0xb6, 0x96, 0xbb, 0xda, 0x74, 0xa3, 0x84, 0x0a, 0x5d,
	0x8a, 0x1b, 0xbe, 0x7e, 0xe2, 0x15, 0x24, 0xdc, 0x3f, 0x2b, 0x54, 0x91, 0xd1, 0x4a, 0xdf, 0xf4,
	0x23, 0x55, 0x25, 0xe7, 0xac, 0x0a, 0x9e, 0xd9, 0xe9, 0x54, 0x4d, 0xe6, 0x1e, 0xeb, 0xe0, 0x85,
	0x18, 0xe3, 0x0e, 0x4b, 0x22, 0x96, 0x55, 0xa0, 0xdf, 0xec, 0xa9, 0x37, 0xf7, 0xca, 0xf8, 0x29,
	0xea, 0x4b, 0x66, 0xd0, 0xcd, 0xee, 0xe4, 0x5c, 0x2f, 0x21, 0x80, 0xb5, 0x25, 0xe7, 0x1b, 0x16,
	0x36, 0x48, 0x6f, 0xbe, 0x20, 0xf3, 0x2a, 0x6e, 0xc9, 0x2c, 0x47, 0xc5, 0xbc, 0x2e, 0x9d, 0x40,
	0xe5, 0xfb, 0x6c, 0x43, 0x52, 0xa1, 0x34, 0xa0, 0x9f, 0x14, 0x03, 0x5b, 0x79, 0x85, 0xa8, 0x44,
	0x1e, 0x7d, 0xfd, 0xce, 0x8e, 0xb6, 0x81, 0xd0, 0xaa, 0x8c, 0xf8, 0xef, 0xb3, 0x9e, 0x68, 0x54,
	0xdc, 0x1a, 0x9d, 0x8c, 0xfd, 0x01, 0x85, 0xb3, 0xf2, 0xa4, 0xe3, 0xb2, 0x41, 0x18, 0x4f, 0xfc,
	0x59, 0xe1, 0xd4, 0x5d, 0xc0, 0xe9, 0x78, 0x46, 0x14, 0x8a, 0xa7, 0xee, 0x12, 0xdb, 0x04, 0xd4,
	0x50, 0x8b, 0xa7, 0xee, 0x27, 0xa0, 0x7e, 0x8f, 0x9c, 0x64, 0x76, 0xfa, 0x61, 0x44, 0x36, 0xfb,
	0x96, 0xf5, 0xbd, 0xf9, 0x41, 0x3c, 0x8e, 0xfc, 0x03, 0x2e, 0x2e, 0xde, 0x5e, 0x33, 0x1e, 0xef,
	0x50, 0x65, 0xf9, 0x21, 0xcf, 0x77, 0x15, 0x42, 0x3b, 0x09, 0x9f, 0xee, 0x78, 0x4b, 0xda, 0xef,
	0x3d, 0xb6, 0x91, 0x22, 0x9e, 0xc4, 0x77, 0x03, 0xfe, 0x41, 0x0b, 0xff, 0x89, 0xd7, 0x3b, 0xff,
	0x17, 0x00, 0x00, 0xff, 0xff, 0x3a, 0x07, 0xe3, 0x9a, 0xda, 0x6b, 0x00, 0x00,
}

// This following code was generated by tarsrpc
// Gernerated from serverCo_sys.proto
type Sys struct {
	s model.Servant
}

//SetServant is required by the servant interface.
func (obj *Sys) SetServant(s model.Servant) {
	obj.s = s
}

//AddServant is required by the servant interface
func (obj *Sys) AddServant(imp impSys, objStr string) {
	tars.AddServant(obj, imp, objStr)
}

////AddServant adds servant  for the service with context
func (obj *Sys) AddServantWithContext(imp impSysWithContext, objStr string) {
	tars.AddServantWithContext(obj, imp, objStr)
}

//TarsSetTimeout is required by the servant interface. t is the timeout in ms.
func (obj *Sys) TarsSetTimeout(t int) {
	obj.s.TarsSetTimeout(t)
}

//TarsSetProtocol is required by the servant interface. t is the protocol.
func (obj *Sys) TarsSetProtocol(p model.Protocol) {
	obj.s.TarsSetProtocol(p)
}

type impSys interface {
	TypeList(input CoType) (output ResCoType, err error)
	TypeData(input CoType) (output CoType, err error)
	TypeSave(input CoType) (output CoType, err error)
	TypeDelete(input CoType) (output Result, err error)
	BindingPage(input PageInfo) (output ResCoSysBinding, err error)
	BindingData(input CoSysBinding) (output ResCoSysBinding, err error)
	BindingSave(input CoSysBinding) (output CoSysBinding, err error)
	BindingDelete(input CoSysBinding) (output Result, err error)
	BindingVipList(input CoSysBindingVip) (output ResCoSysBindingVip, err error)
	BindingVipData(input CoSysBindingVip) (output CoSysBindingVip, err error)
	BindingVipSave(input CoSysBindingVip) (output CoSysBindingVip, err error)
	BindingVipDelete(input CoSysBindingVip) (output Result, err error)
	MenuAll(input ResultEmpty) (output ResCoMenu, err error)
	MenuPage(input ReqCoMenu) (output ResCoMenu, err error)
	MenuData(input CoMenu) (output CoMenu, err error)
	MenuSave(input CoMenu) (output CoMenu, err error)
	MenuDelete(input CoMenu) (output Result, err error)
	MenuGroupLink(input CoMenuGroup) (output ResCoMenu, err error)
	MenuApiPage(input ReqCoMenuAPI) (output ResCoMenuAPI, err error)
	MenuApiData(input CoMenuAPI) (output CoMenuAPI, err error)
	MenuApiSave(input CoMenuAPI) (output CoMenuAPI, err error)
	MenuApiDelete(input CoMenuAPI) (output Result, err error)
	MenuGroupPage(input ReqCoMenuGroup) (output ResCoMenuGroup, err error)
	MenuGroupData(input CoMenuGroup) (output CoMenuGroup, err error)
	MenuGroupSave(input CoMenuGroup) (output CoMenuGroup, err error)
	MenuGroupDelete(input CoMenuGroup) (output Result, err error)
	MenuGroupLimitAll(input CoMenuGroupLimit) (output ResCoMenuGroupLimit, err error)
	MenuGroupLimitData(input CoMenuGroupLimit) (output CoMenuGroupLimit, err error)
	MenuGroupLimitSave(input CoMenuGroupLimit) (output CoMenuGroupLimit, err error)
	MenuGroupLimitDelete(input CoMenuGroupLimit) (output Result, err error)
	MenuGroupRolePage(input PageInfo) (output ResCoMenuGroupRole, err error)
	MenuGroupRoleSave(input CoMenuGroupRole) (output CoMenuGroupRole, err error)
	MenuGroupRoleDelete(input CoMenuGroupRole) (output Result, err error)
	PluginList(input ResultEmpty) (output ResCoSysPlugin, err error)
	PluginPage(input ReqCoSysPlugin) (output ResCoSysPlugin, err error)
	PluginData(input CoSysPlugin) (output CoSysPlugin, err error)
	PluginSave(input CoSysPlugin) (output CoSysPlugin, err error)
	PluginDelete(input CoSysPlugin) (output Result, err error)
	PluginGroupLink(input CoMenuGroup) (output ResCoSysPlugin, err error)
	SettingPage(input ReqCoSysSetting) (output ResCoSysSetting, err error)
	SettingData(input CoSysSetting) (output CoSysSetting, err error)
	SettingSave(input CoSysSetting) (output Result, err error)
	SettingDelete(input CoSysSetting) (output Result, err error)
	VipPage(input ReqCoSysVip) (output ResCoSysVip, err error)
	VipData(input CoSysVip) (output CoSysVip, err error)
	VipSave(input CoSysVip) (output Result, err error)
	VipDelete(input CoSysVip) (output Result, err error)
	BenefitPage(input ReqCoSysBenefit) (output ResCoSysBenefit, err error)
	BenefitData(input CoSysBenefit) (output CoSysBenefit, err error)
	BenefitSave(input CoSysBenefit) (output CoSysBenefit, err error)
	BenefitDelete(input CoSysBenefit) (output Result, err error)
	BenefitClassAll(input ResultEmpty) (output ResCoSysBenefitClass, err error)
	BenefitClassData(input CoSysBenefitClass) (output CoSysBenefitClass, err error)
	BenefitClassSave(input CoSysBenefitClass) (output CoSysBenefitClass, err error)
	BenefitClassDelete(input CoSysBenefitClass) (output Result, err error)
	ModulePage(input ReqCoSysModule) (output ResCoSysModule, err error)
	ModuleData(input CoSysModule) (output CoSysModule, err error)
	ModuleSave(input CoSysModule) (output CoSysModule, err error)
	ModuleDelete(input CoSysModule) (output Result, err error)
	ModuleClassPage(input PageInfo) (output ResCoSysModuleClass, err error)
	ModuleClassData(input CoSysModuleClass) (output CoSysModuleClass, err error)
	ModuleClassSave(input CoSysModuleClass) (output CoSysModuleClass, err error)
	ModuleClassDelete(input CoSysModuleClass) (output Result, err error)
	LimitPage(input ReqCoSysLimit) (output ResCoSysLimit, err error)
	LimitData(input CoSysLimit) (output CoSysLimit, err error)
	LimitSave(input CoSysLimit) (output CoSysLimit, err error)
	LimitDelete(input CoSysLimit) (output Result, err error)
}

type impSysWithContext interface {
	TypeList(ctx context.Context, input CoType) (output ResCoType, err error)
	TypeData(ctx context.Context, input CoType) (output CoType, err error)
	TypeSave(ctx context.Context, input CoType) (output CoType, err error)
	TypeDelete(ctx context.Context, input CoType) (output Result, err error)
	BindingPage(ctx context.Context, input PageInfo) (output ResCoSysBinding, err error)
	BindingData(ctx context.Context, input CoSysBinding) (output ResCoSysBinding, err error)
	BindingSave(ctx context.Context, input CoSysBinding) (output CoSysBinding, err error)
	BindingDelete(ctx context.Context, input CoSysBinding) (output Result, err error)
	BindingVipList(ctx context.Context, input CoSysBindingVip) (output ResCoSysBindingVip, err error)
	BindingVipData(ctx context.Context, input CoSysBindingVip) (output CoSysBindingVip, err error)
	BindingVipSave(ctx context.Context, input CoSysBindingVip) (output CoSysBindingVip, err error)
	BindingVipDelete(ctx context.Context, input CoSysBindingVip) (output Result, err error)
	MenuAll(ctx context.Context, input ResultEmpty) (output ResCoMenu, err error)
	MenuPage(ctx context.Context, input ReqCoMenu) (output ResCoMenu, err error)
	MenuData(ctx context.Context, input CoMenu) (output CoMenu, err error)
	MenuSave(ctx context.Context, input CoMenu) (output CoMenu, err error)
	MenuDelete(ctx context.Context, input CoMenu) (output Result, err error)
	MenuGroupLink(ctx context.Context, input CoMenuGroup) (output ResCoMenu, err error)
	MenuApiPage(ctx context.Context, input ReqCoMenuAPI) (output ResCoMenuAPI, err error)
	MenuApiData(ctx context.Context, input CoMenuAPI) (output CoMenuAPI, err error)
	MenuApiSave(ctx context.Context, input CoMenuAPI) (output CoMenuAPI, err error)
	MenuApiDelete(ctx context.Context, input CoMenuAPI) (output Result, err error)
	MenuGroupPage(ctx context.Context, input ReqCoMenuGroup) (output ResCoMenuGroup, err error)
	MenuGroupData(ctx context.Context, input CoMenuGroup) (output CoMenuGroup, err error)
	MenuGroupSave(ctx context.Context, input CoMenuGroup) (output CoMenuGroup, err error)
	MenuGroupDelete(ctx context.Context, input CoMenuGroup) (output Result, err error)
	MenuGroupLimitAll(ctx context.Context, input CoMenuGroupLimit) (output ResCoMenuGroupLimit, err error)
	MenuGroupLimitData(ctx context.Context, input CoMenuGroupLimit) (output CoMenuGroupLimit, err error)
	MenuGroupLimitSave(ctx context.Context, input CoMenuGroupLimit) (output CoMenuGroupLimit, err error)
	MenuGroupLimitDelete(ctx context.Context, input CoMenuGroupLimit) (output Result, err error)
	MenuGroupRolePage(ctx context.Context, input PageInfo) (output ResCoMenuGroupRole, err error)
	MenuGroupRoleSave(ctx context.Context, input CoMenuGroupRole) (output CoMenuGroupRole, err error)
	MenuGroupRoleDelete(ctx context.Context, input CoMenuGroupRole) (output Result, err error)
	PluginList(ctx context.Context, input ResultEmpty) (output ResCoSysPlugin, err error)
	PluginPage(ctx context.Context, input ReqCoSysPlugin) (output ResCoSysPlugin, err error)
	PluginData(ctx context.Context, input CoSysPlugin) (output CoSysPlugin, err error)
	PluginSave(ctx context.Context, input CoSysPlugin) (output CoSysPlugin, err error)
	PluginDelete(ctx context.Context, input CoSysPlugin) (output Result, err error)
	PluginGroupLink(ctx context.Context, input CoMenuGroup) (output ResCoSysPlugin, err error)
	SettingPage(ctx context.Context, input ReqCoSysSetting) (output ResCoSysSetting, err error)
	SettingData(ctx context.Context, input CoSysSetting) (output CoSysSetting, err error)
	SettingSave(ctx context.Context, input CoSysSetting) (output Result, err error)
	SettingDelete(ctx context.Context, input CoSysSetting) (output Result, err error)
	VipPage(ctx context.Context, input ReqCoSysVip) (output ResCoSysVip, err error)
	VipData(ctx context.Context, input CoSysVip) (output CoSysVip, err error)
	VipSave(ctx context.Context, input CoSysVip) (output Result, err error)
	VipDelete(ctx context.Context, input CoSysVip) (output Result, err error)
	BenefitPage(ctx context.Context, input ReqCoSysBenefit) (output ResCoSysBenefit, err error)
	BenefitData(ctx context.Context, input CoSysBenefit) (output CoSysBenefit, err error)
	BenefitSave(ctx context.Context, input CoSysBenefit) (output CoSysBenefit, err error)
	BenefitDelete(ctx context.Context, input CoSysBenefit) (output Result, err error)
	BenefitClassAll(ctx context.Context, input ResultEmpty) (output ResCoSysBenefitClass, err error)
	BenefitClassData(ctx context.Context, input CoSysBenefitClass) (output CoSysBenefitClass, err error)
	BenefitClassSave(ctx context.Context, input CoSysBenefitClass) (output CoSysBenefitClass, err error)
	BenefitClassDelete(ctx context.Context, input CoSysBenefitClass) (output Result, err error)
	ModulePage(ctx context.Context, input ReqCoSysModule) (output ResCoSysModule, err error)
	ModuleData(ctx context.Context, input CoSysModule) (output CoSysModule, err error)
	ModuleSave(ctx context.Context, input CoSysModule) (output CoSysModule, err error)
	ModuleDelete(ctx context.Context, input CoSysModule) (output Result, err error)
	ModuleClassPage(ctx context.Context, input PageInfo) (output ResCoSysModuleClass, err error)
	ModuleClassData(ctx context.Context, input CoSysModuleClass) (output CoSysModuleClass, err error)
	ModuleClassSave(ctx context.Context, input CoSysModuleClass) (output CoSysModuleClass, err error)
	ModuleClassDelete(ctx context.Context, input CoSysModuleClass) (output Result, err error)
	LimitPage(ctx context.Context, input ReqCoSysLimit) (output ResCoSysLimit, err error)
	LimitData(ctx context.Context, input CoSysLimit) (output CoSysLimit, err error)
	LimitSave(ctx context.Context, input CoSysLimit) (output CoSysLimit, err error)
	LimitDelete(ctx context.Context, input CoSysLimit) (output Result, err error)
}

//Dispatch is used to call the user implement of the defined method.
func (obj *Sys) Dispatch(ctx context.Context, val interface{}, req *requestf.RequestPacket, resp *requestf.ResponsePacket, withContext bool) (err error) {
	input := tools.Int8ToByte(req.SBuffer)
	var output []byte
	funcName := req.SFuncName
	switch funcName {

	case "TypeList":
		inputDefine := CoType{}
		if err = proto.Unmarshal(input, &inputDefine); err != nil {
			return err
		}
		var res ResCoType
		if withContext == false {
			imp := val.(impSys)
			res, err = imp.TypeList(inputDefine)
			if err != nil {
				return err
			}
		} else {
			imp := val.(impSysWithContext)
			res, err = imp.TypeList(ctx, inputDefine)
			if err != nil {
				return err
			}
		}
		output, err = proto.Marshal(&res)
		if err != nil {
			return err
		}

	case "TypeData":
		inputDefine := CoType{}
		if err = proto.Unmarshal(input, &inputDefine); err != nil {
			return err
		}
		var res CoType
		if withContext == false {
			imp := val.(impSys)
			res, err = imp.TypeData(inputDefine)
			if err != nil {
				return err
			}
		} else {
			imp := val.(impSysWithContext)
			res, err = imp.TypeData(ctx, inputDefine)
			if err != nil {
				return err
			}
		}
		output, err = proto.Marshal(&res)
		if err != nil {
			return err
		}

	case "TypeSave":
		inputDefine := CoType{}
		if err = proto.Unmarshal(input, &inputDefine); err != nil {
			return err
		}
		var res CoType
		if withContext == false {
			imp := val.(impSys)
			res, err = imp.TypeSave(inputDefine)
			if err != nil {
				return err
			}
		} else {
			imp := val.(impSysWithContext)
			res, err = imp.TypeSave(ctx, inputDefine)
			if err != nil {
				return err
			}
		}
		output, err = proto.Marshal(&res)
		if err != nil {
			return err
		}

	case "TypeDelete":
		inputDefine := CoType{}
		if err = proto.Unmarshal(input, &inputDefine); err != nil {
			return err
		}
		var res Result
		if withContext == false {
			imp := val.(impSys)
			res, err = imp.TypeDelete(inputDefine)
			if err != nil {
				return err
			}
		} else {
			imp := val.(impSysWithContext)
			res, err = imp.TypeDelete(ctx, inputDefine)
			if err != nil {
				return err
			}
		}
		output, err = proto.Marshal(&res)
		if err != nil {
			return err
		}

	case "BindingPage":
		inputDefine := PageInfo{}
		if err = proto.Unmarshal(input, &inputDefine); err != nil {
			return err
		}
		var res ResCoSysBinding
		if withContext == false {
			imp := val.(impSys)
			res, err = imp.BindingPage(inputDefine)
			if err != nil {
				return err
			}
		} else {
			imp := val.(impSysWithContext)
			res, err = imp.BindingPage(ctx, inputDefine)
			if err != nil {
				return err
			}
		}
		output, err = proto.Marshal(&res)
		if err != nil {
			return err
		}

	case "BindingData":
		inputDefine := CoSysBinding{}
		if err = proto.Unmarshal(input, &inputDefine); err != nil {
			return err
		}
		var res ResCoSysBinding
		if withContext == false {
			imp := val.(impSys)
			res, err = imp.BindingData(inputDefine)
			if err != nil {
				return err
			}
		} else {
			imp := val.(impSysWithContext)
			res, err = imp.BindingData(ctx, inputDefine)
			if err != nil {
				return err
			}
		}
		output, err = proto.Marshal(&res)
		if err != nil {
			return err
		}

	case "BindingSave":
		inputDefine := CoSysBinding{}
		if err = proto.Unmarshal(input, &inputDefine); err != nil {
			return err
		}
		var res CoSysBinding
		if withContext == false {
			imp := val.(impSys)
			res, err = imp.BindingSave(inputDefine)
			if err != nil {
				return err
			}
		} else {
			imp := val.(impSysWithContext)
			res, err = imp.BindingSave(ctx, inputDefine)
			if err != nil {
				return err
			}
		}
		output, err = proto.Marshal(&res)
		if err != nil {
			return err
		}

	case "BindingDelete":
		inputDefine := CoSysBinding{}
		if err = proto.Unmarshal(input, &inputDefine); err != nil {
			return err
		}
		var res Result
		if withContext == false {
			imp := val.(impSys)
			res, err = imp.BindingDelete(inputDefine)
			if err != nil {
				return err
			}
		} else {
			imp := val.(impSysWithContext)
			res, err = imp.BindingDelete(ctx, inputDefine)
			if err != nil {
				return err
			}
		}
		output, err = proto.Marshal(&res)
		if err != nil {
			return err
		}

	case "BindingVipList":
		inputDefine := CoSysBindingVip{}
		if err = proto.Unmarshal(input, &inputDefine); err != nil {
			return err
		}
		var res ResCoSysBindingVip
		if withContext == false {
			imp := val.(impSys)
			res, err = imp.BindingVipList(inputDefine)
			if err != nil {
				return err
			}
		} else {
			imp := val.(impSysWithContext)
			res, err = imp.BindingVipList(ctx, inputDefine)
			if err != nil {
				return err
			}
		}
		output, err = proto.Marshal(&res)
		if err != nil {
			return err
		}

	case "BindingVipData":
		inputDefine := CoSysBindingVip{}
		if err = proto.Unmarshal(input, &inputDefine); err != nil {
			return err
		}
		var res CoSysBindingVip
		if withContext == false {
			imp := val.(impSys)
			res, err = imp.BindingVipData(inputDefine)
			if err != nil {
				return err
			}
		} else {
			imp := val.(impSysWithContext)
			res, err = imp.BindingVipData(ctx, inputDefine)
			if err != nil {
				return err
			}
		}
		output, err = proto.Marshal(&res)
		if err != nil {
			return err
		}

	case "BindingVipSave":
		inputDefine := CoSysBindingVip{}
		if err = proto.Unmarshal(input, &inputDefine); err != nil {
			return err
		}
		var res CoSysBindingVip
		if withContext == false {
			imp := val.(impSys)
			res, err = imp.BindingVipSave(inputDefine)
			if err != nil {
				return err
			}
		} else {
			imp := val.(impSysWithContext)
			res, err = imp.BindingVipSave(ctx, inputDefine)
			if err != nil {
				return err
			}
		}
		output, err = proto.Marshal(&res)
		if err != nil {
			return err
		}

	case "BindingVipDelete":
		inputDefine := CoSysBindingVip{}
		if err = proto.Unmarshal(input, &inputDefine); err != nil {
			return err
		}
		var res Result
		if withContext == false {
			imp := val.(impSys)
			res, err = imp.BindingVipDelete(inputDefine)
			if err != nil {
				return err
			}
		} else {
			imp := val.(impSysWithContext)
			res, err = imp.BindingVipDelete(ctx, inputDefine)
			if err != nil {
				return err
			}
		}
		output, err = proto.Marshal(&res)
		if err != nil {
			return err
		}

	case "MenuAll":
		inputDefine := ResultEmpty{}
		if err = proto.Unmarshal(input, &inputDefine); err != nil {
			return err
		}
		var res ResCoMenu
		if withContext == false {
			imp := val.(impSys)
			res, err = imp.MenuAll(inputDefine)
			if err != nil {
				return err
			}
		} else {
			imp := val.(impSysWithContext)
			res, err = imp.MenuAll(ctx, inputDefine)
			if err != nil {
				return err
			}
		}
		output, err = proto.Marshal(&res)
		if err != nil {
			return err
		}

	case "MenuPage":
		inputDefine := ReqCoMenu{}
		if err = proto.Unmarshal(input, &inputDefine); err != nil {
			return err
		}
		var res ResCoMenu
		if withContext == false {
			imp := val.(impSys)
			res, err = imp.MenuPage(inputDefine)
			if err != nil {
				return err
			}
		} else {
			imp := val.(impSysWithContext)
			res, err = imp.MenuPage(ctx, inputDefine)
			if err != nil {
				return err
			}
		}
		output, err = proto.Marshal(&res)
		if err != nil {
			return err
		}

	case "MenuData":
		inputDefine := CoMenu{}
		if err = proto.Unmarshal(input, &inputDefine); err != nil {
			return err
		}
		var res CoMenu
		if withContext == false {
			imp := val.(impSys)
			res, err = imp.MenuData(inputDefine)
			if err != nil {
				return err
			}
		} else {
			imp := val.(impSysWithContext)
			res, err = imp.MenuData(ctx, inputDefine)
			if err != nil {
				return err
			}
		}
		output, err = proto.Marshal(&res)
		if err != nil {
			return err
		}

	case "MenuSave":
		inputDefine := CoMenu{}
		if err = proto.Unmarshal(input, &inputDefine); err != nil {
			return err
		}
		var res CoMenu
		if withContext == false {
			imp := val.(impSys)
			res, err = imp.MenuSave(inputDefine)
			if err != nil {
				return err
			}
		} else {
			imp := val.(impSysWithContext)
			res, err = imp.MenuSave(ctx, inputDefine)
			if err != nil {
				return err
			}
		}
		output, err = proto.Marshal(&res)
		if err != nil {
			return err
		}

	case "MenuDelete":
		inputDefine := CoMenu{}
		if err = proto.Unmarshal(input, &inputDefine); err != nil {
			return err
		}
		var res Result
		if withContext == false {
			imp := val.(impSys)
			res, err = imp.MenuDelete(inputDefine)
			if err != nil {
				return err
			}
		} else {
			imp := val.(impSysWithContext)
			res, err = imp.MenuDelete(ctx, inputDefine)
			if err != nil {
				return err
			}
		}
		output, err = proto.Marshal(&res)
		if err != nil {
			return err
		}

	case "MenuGroupLink":
		inputDefine := CoMenuGroup{}
		if err = proto.Unmarshal(input, &inputDefine); err != nil {
			return err
		}
		var res ResCoMenu
		if withContext == false {
			imp := val.(impSys)
			res, err = imp.MenuGroupLink(inputDefine)
			if err != nil {
				return err
			}
		} else {
			imp := val.(impSysWithContext)
			res, err = imp.MenuGroupLink(ctx, inputDefine)
			if err != nil {
				return err
			}
		}
		output, err = proto.Marshal(&res)
		if err != nil {
			return err
		}

	case "MenuApiPage":
		inputDefine := ReqCoMenuAPI{}
		if err = proto.Unmarshal(input, &inputDefine); err != nil {
			return err
		}
		var res ResCoMenuAPI
		if withContext == false {
			imp := val.(impSys)
			res, err = imp.MenuApiPage(inputDefine)
			if err != nil {
				return err
			}
		} else {
			imp := val.(impSysWithContext)
			res, err = imp.MenuApiPage(ctx, inputDefine)
			if err != nil {
				return err
			}
		}
		output, err = proto.Marshal(&res)
		if err != nil {
			return err
		}

	case "MenuApiData":
		inputDefine := CoMenuAPI{}
		if err = proto.Unmarshal(input, &inputDefine); err != nil {
			return err
		}
		var res CoMenuAPI
		if withContext == false {
			imp := val.(impSys)
			res, err = imp.MenuApiData(inputDefine)
			if err != nil {
				return err
			}
		} else {
			imp := val.(impSysWithContext)
			res, err = imp.MenuApiData(ctx, inputDefine)
			if err != nil {
				return err
			}
		}
		output, err = proto.Marshal(&res)
		if err != nil {
			return err
		}

	case "MenuApiSave":
		inputDefine := CoMenuAPI{}
		if err = proto.Unmarshal(input, &inputDefine); err != nil {
			return err
		}
		var res CoMenuAPI
		if withContext == false {
			imp := val.(impSys)
			res, err = imp.MenuApiSave(inputDefine)
			if err != nil {
				return err
			}
		} else {
			imp := val.(impSysWithContext)
			res, err = imp.MenuApiSave(ctx, inputDefine)
			if err != nil {
				return err
			}
		}
		output, err = proto.Marshal(&res)
		if err != nil {
			return err
		}

	case "MenuApiDelete":
		inputDefine := CoMenuAPI{}
		if err = proto.Unmarshal(input, &inputDefine); err != nil {
			return err
		}
		var res Result
		if withContext == false {
			imp := val.(impSys)
			res, err = imp.MenuApiDelete(inputDefine)
			if err != nil {
				return err
			}
		} else {
			imp := val.(impSysWithContext)
			res, err = imp.MenuApiDelete(ctx, inputDefine)
			if err != nil {
				return err
			}
		}
		output, err = proto.Marshal(&res)
		if err != nil {
			return err
		}

	case "MenuGroupPage":
		inputDefine := ReqCoMenuGroup{}
		if err = proto.Unmarshal(input, &inputDefine); err != nil {
			return err
		}
		var res ResCoMenuGroup
		if withContext == false {
			imp := val.(impSys)
			res, err = imp.MenuGroupPage(inputDefine)
			if err != nil {
				return err
			}
		} else {
			imp := val.(impSysWithContext)
			res, err = imp.MenuGroupPage(ctx, inputDefine)
			if err != nil {
				return err
			}
		}
		output, err = proto.Marshal(&res)
		if err != nil {
			return err
		}

	case "MenuGroupData":
		inputDefine := CoMenuGroup{}
		if err = proto.Unmarshal(input, &inputDefine); err != nil {
			return err
		}
		var res CoMenuGroup
		if withContext == false {
			imp := val.(impSys)
			res, err = imp.MenuGroupData(inputDefine)
			if err != nil {
				return err
			}
		} else {
			imp := val.(impSysWithContext)
			res, err = imp.MenuGroupData(ctx, inputDefine)
			if err != nil {
				return err
			}
		}
		output, err = proto.Marshal(&res)
		if err != nil {
			return err
		}

	case "MenuGroupSave":
		inputDefine := CoMenuGroup{}
		if err = proto.Unmarshal(input, &inputDefine); err != nil {
			return err
		}
		var res CoMenuGroup
		if withContext == false {
			imp := val.(impSys)
			res, err = imp.MenuGroupSave(inputDefine)
			if err != nil {
				return err
			}
		} else {
			imp := val.(impSysWithContext)
			res, err = imp.MenuGroupSave(ctx, inputDefine)
			if err != nil {
				return err
			}
		}
		output, err = proto.Marshal(&res)
		if err != nil {
			return err
		}

	case "MenuGroupDelete":
		inputDefine := CoMenuGroup{}
		if err = proto.Unmarshal(input, &inputDefine); err != nil {
			return err
		}
		var res Result
		if withContext == false {
			imp := val.(impSys)
			res, err = imp.MenuGroupDelete(inputDefine)
			if err != nil {
				return err
			}
		} else {
			imp := val.(impSysWithContext)
			res, err = imp.MenuGroupDelete(ctx, inputDefine)
			if err != nil {
				return err
			}
		}
		output, err = proto.Marshal(&res)
		if err != nil {
			return err
		}

	case "MenuGroupLimitAll":
		inputDefine := CoMenuGroupLimit{}
		if err = proto.Unmarshal(input, &inputDefine); err != nil {
			return err
		}
		var res ResCoMenuGroupLimit
		if withContext == false {
			imp := val.(impSys)
			res, err = imp.MenuGroupLimitAll(inputDefine)
			if err != nil {
				return err
			}
		} else {
			imp := val.(impSysWithContext)
			res, err = imp.MenuGroupLimitAll(ctx, inputDefine)
			if err != nil {
				return err
			}
		}
		output, err = proto.Marshal(&res)
		if err != nil {
			return err
		}

	case "MenuGroupLimitData":
		inputDefine := CoMenuGroupLimit{}
		if err = proto.Unmarshal(input, &inputDefine); err != nil {
			return err
		}
		var res CoMenuGroupLimit
		if withContext == false {
			imp := val.(impSys)
			res, err = imp.MenuGroupLimitData(inputDefine)
			if err != nil {
				return err
			}
		} else {
			imp := val.(impSysWithContext)
			res, err = imp.MenuGroupLimitData(ctx, inputDefine)
			if err != nil {
				return err
			}
		}
		output, err = proto.Marshal(&res)
		if err != nil {
			return err
		}

	case "MenuGroupLimitSave":
		inputDefine := CoMenuGroupLimit{}
		if err = proto.Unmarshal(input, &inputDefine); err != nil {
			return err
		}
		var res CoMenuGroupLimit
		if withContext == false {
			imp := val.(impSys)
			res, err = imp.MenuGroupLimitSave(inputDefine)
			if err != nil {
				return err
			}
		} else {
			imp := val.(impSysWithContext)
			res, err = imp.MenuGroupLimitSave(ctx, inputDefine)
			if err != nil {
				return err
			}
		}
		output, err = proto.Marshal(&res)
		if err != nil {
			return err
		}

	case "MenuGroupLimitDelete":
		inputDefine := CoMenuGroupLimit{}
		if err = proto.Unmarshal(input, &inputDefine); err != nil {
			return err
		}
		var res Result
		if withContext == false {
			imp := val.(impSys)
			res, err = imp.MenuGroupLimitDelete(inputDefine)
			if err != nil {
				return err
			}
		} else {
			imp := val.(impSysWithContext)
			res, err = imp.MenuGroupLimitDelete(ctx, inputDefine)
			if err != nil {
				return err
			}
		}
		output, err = proto.Marshal(&res)
		if err != nil {
			return err
		}

	case "MenuGroupRolePage":
		inputDefine := PageInfo{}
		if err = proto.Unmarshal(input, &inputDefine); err != nil {
			return err
		}
		var res ResCoMenuGroupRole
		if withContext == false {
			imp := val.(impSys)
			res, err = imp.MenuGroupRolePage(inputDefine)
			if err != nil {
				return err
			}
		} else {
			imp := val.(impSysWithContext)
			res, err = imp.MenuGroupRolePage(ctx, inputDefine)
			if err != nil {
				return err
			}
		}
		output, err = proto.Marshal(&res)
		if err != nil {
			return err
		}

	case "MenuGroupRoleSave":
		inputDefine := CoMenuGroupRole{}
		if err = proto.Unmarshal(input, &inputDefine); err != nil {
			return err
		}
		var res CoMenuGroupRole
		if withContext == false {
			imp := val.(impSys)
			res, err = imp.MenuGroupRoleSave(inputDefine)
			if err != nil {
				return err
			}
		} else {
			imp := val.(impSysWithContext)
			res, err = imp.MenuGroupRoleSave(ctx, inputDefine)
			if err != nil {
				return err
			}
		}
		output, err = proto.Marshal(&res)
		if err != nil {
			return err
		}

	case "MenuGroupRoleDelete":
		inputDefine := CoMenuGroupRole{}
		if err = proto.Unmarshal(input, &inputDefine); err != nil {
			return err
		}
		var res Result
		if withContext == false {
			imp := val.(impSys)
			res, err = imp.MenuGroupRoleDelete(inputDefine)
			if err != nil {
				return err
			}
		} else {
			imp := val.(impSysWithContext)
			res, err = imp.MenuGroupRoleDelete(ctx, inputDefine)
			if err != nil {
				return err
			}
		}
		output, err = proto.Marshal(&res)
		if err != nil {
			return err
		}

	case "PluginList":
		inputDefine := ResultEmpty{}
		if err = proto.Unmarshal(input, &inputDefine); err != nil {
			return err
		}
		var res ResCoSysPlugin
		if withContext == false {
			imp := val.(impSys)
			res, err = imp.PluginList(inputDefine)
			if err != nil {
				return err
			}
		} else {
			imp := val.(impSysWithContext)
			res, err = imp.PluginList(ctx, inputDefine)
			if err != nil {
				return err
			}
		}
		output, err = proto.Marshal(&res)
		if err != nil {
			return err
		}

	case "PluginPage":
		inputDefine := ReqCoSysPlugin{}
		if err = proto.Unmarshal(input, &inputDefine); err != nil {
			return err
		}
		var res ResCoSysPlugin
		if withContext == false {
			imp := val.(impSys)
			res, err = imp.PluginPage(inputDefine)
			if err != nil {
				return err
			}
		} else {
			imp := val.(impSysWithContext)
			res, err = imp.PluginPage(ctx, inputDefine)
			if err != nil {
				return err
			}
		}
		output, err = proto.Marshal(&res)
		if err != nil {
			return err
		}

	case "PluginData":
		inputDefine := CoSysPlugin{}
		if err = proto.Unmarshal(input, &inputDefine); err != nil {
			return err
		}
		var res CoSysPlugin
		if withContext == false {
			imp := val.(impSys)
			res, err = imp.PluginData(inputDefine)
			if err != nil {
				return err
			}
		} else {
			imp := val.(impSysWithContext)
			res, err = imp.PluginData(ctx, inputDefine)
			if err != nil {
				return err
			}
		}
		output, err = proto.Marshal(&res)
		if err != nil {
			return err
		}

	case "PluginSave":
		inputDefine := CoSysPlugin{}
		if err = proto.Unmarshal(input, &inputDefine); err != nil {
			return err
		}
		var res CoSysPlugin
		if withContext == false {
			imp := val.(impSys)
			res, err = imp.PluginSave(inputDefine)
			if err != nil {
				return err
			}
		} else {
			imp := val.(impSysWithContext)
			res, err = imp.PluginSave(ctx, inputDefine)
			if err != nil {
				return err
			}
		}
		output, err = proto.Marshal(&res)
		if err != nil {
			return err
		}

	case "PluginDelete":
		inputDefine := CoSysPlugin{}
		if err = proto.Unmarshal(input, &inputDefine); err != nil {
			return err
		}
		var res Result
		if withContext == false {
			imp := val.(impSys)
			res, err = imp.PluginDelete(inputDefine)
			if err != nil {
				return err
			}
		} else {
			imp := val.(impSysWithContext)
			res, err = imp.PluginDelete(ctx, inputDefine)
			if err != nil {
				return err
			}
		}
		output, err = proto.Marshal(&res)
		if err != nil {
			return err
		}

	case "PluginGroupLink":
		inputDefine := CoMenuGroup{}
		if err = proto.Unmarshal(input, &inputDefine); err != nil {
			return err
		}
		var res ResCoSysPlugin
		if withContext == false {
			imp := val.(impSys)
			res, err = imp.PluginGroupLink(inputDefine)
			if err != nil {
				return err
			}
		} else {
			imp := val.(impSysWithContext)
			res, err = imp.PluginGroupLink(ctx, inputDefine)
			if err != nil {
				return err
			}
		}
		output, err = proto.Marshal(&res)
		if err != nil {
			return err
		}

	case "SettingPage":
		inputDefine := ReqCoSysSetting{}
		if err = proto.Unmarshal(input, &inputDefine); err != nil {
			return err
		}
		var res ResCoSysSetting
		if withContext == false {
			imp := val.(impSys)
			res, err = imp.SettingPage(inputDefine)
			if err != nil {
				return err
			}
		} else {
			imp := val.(impSysWithContext)
			res, err = imp.SettingPage(ctx, inputDefine)
			if err != nil {
				return err
			}
		}
		output, err = proto.Marshal(&res)
		if err != nil {
			return err
		}

	case "SettingData":
		inputDefine := CoSysSetting{}
		if err = proto.Unmarshal(input, &inputDefine); err != nil {
			return err
		}
		var res CoSysSetting
		if withContext == false {
			imp := val.(impSys)
			res, err = imp.SettingData(inputDefine)
			if err != nil {
				return err
			}
		} else {
			imp := val.(impSysWithContext)
			res, err = imp.SettingData(ctx, inputDefine)
			if err != nil {
				return err
			}
		}
		output, err = proto.Marshal(&res)
		if err != nil {
			return err
		}

	case "SettingSave":
		inputDefine := CoSysSetting{}
		if err = proto.Unmarshal(input, &inputDefine); err != nil {
			return err
		}
		var res Result
		if withContext == false {
			imp := val.(impSys)
			res, err = imp.SettingSave(inputDefine)
			if err != nil {
				return err
			}
		} else {
			imp := val.(impSysWithContext)
			res, err = imp.SettingSave(ctx, inputDefine)
			if err != nil {
				return err
			}
		}
		output, err = proto.Marshal(&res)
		if err != nil {
			return err
		}

	case "SettingDelete":
		inputDefine := CoSysSetting{}
		if err = proto.Unmarshal(input, &inputDefine); err != nil {
			return err
		}
		var res Result
		if withContext == false {
			imp := val.(impSys)
			res, err = imp.SettingDelete(inputDefine)
			if err != nil {
				return err
			}
		} else {
			imp := val.(impSysWithContext)
			res, err = imp.SettingDelete(ctx, inputDefine)
			if err != nil {
				return err
			}
		}
		output, err = proto.Marshal(&res)
		if err != nil {
			return err
		}

	case "VipPage":
		inputDefine := ReqCoSysVip{}
		if err = proto.Unmarshal(input, &inputDefine); err != nil {
			return err
		}
		var res ResCoSysVip
		if withContext == false {
			imp := val.(impSys)
			res, err = imp.VipPage(inputDefine)
			if err != nil {
				return err
			}
		} else {
			imp := val.(impSysWithContext)
			res, err = imp.VipPage(ctx, inputDefine)
			if err != nil {
				return err
			}
		}
		output, err = proto.Marshal(&res)
		if err != nil {
			return err
		}

	case "VipData":
		inputDefine := CoSysVip{}
		if err = proto.Unmarshal(input, &inputDefine); err != nil {
			return err
		}
		var res CoSysVip
		if withContext == false {
			imp := val.(impSys)
			res, err = imp.VipData(inputDefine)
			if err != nil {
				return err
			}
		} else {
			imp := val.(impSysWithContext)
			res, err = imp.VipData(ctx, inputDefine)
			if err != nil {
				return err
			}
		}
		output, err = proto.Marshal(&res)
		if err != nil {
			return err
		}

	case "VipSave":
		inputDefine := CoSysVip{}
		if err = proto.Unmarshal(input, &inputDefine); err != nil {
			return err
		}
		var res Result
		if withContext == false {
			imp := val.(impSys)
			res, err = imp.VipSave(inputDefine)
			if err != nil {
				return err
			}
		} else {
			imp := val.(impSysWithContext)
			res, err = imp.VipSave(ctx, inputDefine)
			if err != nil {
				return err
			}
		}
		output, err = proto.Marshal(&res)
		if err != nil {
			return err
		}

	case "VipDelete":
		inputDefine := CoSysVip{}
		if err = proto.Unmarshal(input, &inputDefine); err != nil {
			return err
		}
		var res Result
		if withContext == false {
			imp := val.(impSys)
			res, err = imp.VipDelete(inputDefine)
			if err != nil {
				return err
			}
		} else {
			imp := val.(impSysWithContext)
			res, err = imp.VipDelete(ctx, inputDefine)
			if err != nil {
				return err
			}
		}
		output, err = proto.Marshal(&res)
		if err != nil {
			return err
		}

	case "BenefitPage":
		inputDefine := ReqCoSysBenefit{}
		if err = proto.Unmarshal(input, &inputDefine); err != nil {
			return err
		}
		var res ResCoSysBenefit
		if withContext == false {
			imp := val.(impSys)
			res, err = imp.BenefitPage(inputDefine)
			if err != nil {
				return err
			}
		} else {
			imp := val.(impSysWithContext)
			res, err = imp.BenefitPage(ctx, inputDefine)
			if err != nil {
				return err
			}
		}
		output, err = proto.Marshal(&res)
		if err != nil {
			return err
		}

	case "BenefitData":
		inputDefine := CoSysBenefit{}
		if err = proto.Unmarshal(input, &inputDefine); err != nil {
			return err
		}
		var res CoSysBenefit
		if withContext == false {
			imp := val.(impSys)
			res, err = imp.BenefitData(inputDefine)
			if err != nil {
				return err
			}
		} else {
			imp := val.(impSysWithContext)
			res, err = imp.BenefitData(ctx, inputDefine)
			if err != nil {
				return err
			}
		}
		output, err = proto.Marshal(&res)
		if err != nil {
			return err
		}

	case "BenefitSave":
		inputDefine := CoSysBenefit{}
		if err = proto.Unmarshal(input, &inputDefine); err != nil {
			return err
		}
		var res CoSysBenefit
		if withContext == false {
			imp := val.(impSys)
			res, err = imp.BenefitSave(inputDefine)
			if err != nil {
				return err
			}
		} else {
			imp := val.(impSysWithContext)
			res, err = imp.BenefitSave(ctx, inputDefine)
			if err != nil {
				return err
			}
		}
		output, err = proto.Marshal(&res)
		if err != nil {
			return err
		}

	case "BenefitDelete":
		inputDefine := CoSysBenefit{}
		if err = proto.Unmarshal(input, &inputDefine); err != nil {
			return err
		}
		var res Result
		if withContext == false {
			imp := val.(impSys)
			res, err = imp.BenefitDelete(inputDefine)
			if err != nil {
				return err
			}
		} else {
			imp := val.(impSysWithContext)
			res, err = imp.BenefitDelete(ctx, inputDefine)
			if err != nil {
				return err
			}
		}
		output, err = proto.Marshal(&res)
		if err != nil {
			return err
		}

	case "BenefitClassAll":
		inputDefine := ResultEmpty{}
		if err = proto.Unmarshal(input, &inputDefine); err != nil {
			return err
		}
		var res ResCoSysBenefitClass
		if withContext == false {
			imp := val.(impSys)
			res, err = imp.BenefitClassAll(inputDefine)
			if err != nil {
				return err
			}
		} else {
			imp := val.(impSysWithContext)
			res, err = imp.BenefitClassAll(ctx, inputDefine)
			if err != nil {
				return err
			}
		}
		output, err = proto.Marshal(&res)
		if err != nil {
			return err
		}

	case "BenefitClassData":
		inputDefine := CoSysBenefitClass{}
		if err = proto.Unmarshal(input, &inputDefine); err != nil {
			return err
		}
		var res CoSysBenefitClass
		if withContext == false {
			imp := val.(impSys)
			res, err = imp.BenefitClassData(inputDefine)
			if err != nil {
				return err
			}
		} else {
			imp := val.(impSysWithContext)
			res, err = imp.BenefitClassData(ctx, inputDefine)
			if err != nil {
				return err
			}
		}
		output, err = proto.Marshal(&res)
		if err != nil {
			return err
		}

	case "BenefitClassSave":
		inputDefine := CoSysBenefitClass{}
		if err = proto.Unmarshal(input, &inputDefine); err != nil {
			return err
		}
		var res CoSysBenefitClass
		if withContext == false {
			imp := val.(impSys)
			res, err = imp.BenefitClassSave(inputDefine)
			if err != nil {
				return err
			}
		} else {
			imp := val.(impSysWithContext)
			res, err = imp.BenefitClassSave(ctx, inputDefine)
			if err != nil {
				return err
			}
		}
		output, err = proto.Marshal(&res)
		if err != nil {
			return err
		}

	case "BenefitClassDelete":
		inputDefine := CoSysBenefitClass{}
		if err = proto.Unmarshal(input, &inputDefine); err != nil {
			return err
		}
		var res Result
		if withContext == false {
			imp := val.(impSys)
			res, err = imp.BenefitClassDelete(inputDefine)
			if err != nil {
				return err
			}
		} else {
			imp := val.(impSysWithContext)
			res, err = imp.BenefitClassDelete(ctx, inputDefine)
			if err != nil {
				return err
			}
		}
		output, err = proto.Marshal(&res)
		if err != nil {
			return err
		}

	case "ModulePage":
		inputDefine := ReqCoSysModule{}
		if err = proto.Unmarshal(input, &inputDefine); err != nil {
			return err
		}
		var res ResCoSysModule
		if withContext == false {
			imp := val.(impSys)
			res, err = imp.ModulePage(inputDefine)
			if err != nil {
				return err
			}
		} else {
			imp := val.(impSysWithContext)
			res, err = imp.ModulePage(ctx, inputDefine)
			if err != nil {
				return err
			}
		}
		output, err = proto.Marshal(&res)
		if err != nil {
			return err
		}

	case "ModuleData":
		inputDefine := CoSysModule{}
		if err = proto.Unmarshal(input, &inputDefine); err != nil {
			return err
		}
		var res CoSysModule
		if withContext == false {
			imp := val.(impSys)
			res, err = imp.ModuleData(inputDefine)
			if err != nil {
				return err
			}
		} else {
			imp := val.(impSysWithContext)
			res, err = imp.ModuleData(ctx, inputDefine)
			if err != nil {
				return err
			}
		}
		output, err = proto.Marshal(&res)
		if err != nil {
			return err
		}

	case "ModuleSave":
		inputDefine := CoSysModule{}
		if err = proto.Unmarshal(input, &inputDefine); err != nil {
			return err
		}
		var res CoSysModule
		if withContext == false {
			imp := val.(impSys)
			res, err = imp.ModuleSave(inputDefine)
			if err != nil {
				return err
			}
		} else {
			imp := val.(impSysWithContext)
			res, err = imp.ModuleSave(ctx, inputDefine)
			if err != nil {
				return err
			}
		}
		output, err = proto.Marshal(&res)
		if err != nil {
			return err
		}

	case "ModuleDelete":
		inputDefine := CoSysModule{}
		if err = proto.Unmarshal(input, &inputDefine); err != nil {
			return err
		}
		var res Result
		if withContext == false {
			imp := val.(impSys)
			res, err = imp.ModuleDelete(inputDefine)
			if err != nil {
				return err
			}
		} else {
			imp := val.(impSysWithContext)
			res, err = imp.ModuleDelete(ctx, inputDefine)
			if err != nil {
				return err
			}
		}
		output, err = proto.Marshal(&res)
		if err != nil {
			return err
		}

	case "ModuleClassPage":
		inputDefine := PageInfo{}
		if err = proto.Unmarshal(input, &inputDefine); err != nil {
			return err
		}
		var res ResCoSysModuleClass
		if withContext == false {
			imp := val.(impSys)
			res, err = imp.ModuleClassPage(inputDefine)
			if err != nil {
				return err
			}
		} else {
			imp := val.(impSysWithContext)
			res, err = imp.ModuleClassPage(ctx, inputDefine)
			if err != nil {
				return err
			}
		}
		output, err = proto.Marshal(&res)
		if err != nil {
			return err
		}

	case "ModuleClassData":
		inputDefine := CoSysModuleClass{}
		if err = proto.Unmarshal(input, &inputDefine); err != nil {
			return err
		}
		var res CoSysModuleClass
		if withContext == false {
			imp := val.(impSys)
			res, err = imp.ModuleClassData(inputDefine)
			if err != nil {
				return err
			}
		} else {
			imp := val.(impSysWithContext)
			res, err = imp.ModuleClassData(ctx, inputDefine)
			if err != nil {
				return err
			}
		}
		output, err = proto.Marshal(&res)
		if err != nil {
			return err
		}

	case "ModuleClassSave":
		inputDefine := CoSysModuleClass{}
		if err = proto.Unmarshal(input, &inputDefine); err != nil {
			return err
		}
		var res CoSysModuleClass
		if withContext == false {
			imp := val.(impSys)
			res, err = imp.ModuleClassSave(inputDefine)
			if err != nil {
				return err
			}
		} else {
			imp := val.(impSysWithContext)
			res, err = imp.ModuleClassSave(ctx, inputDefine)
			if err != nil {
				return err
			}
		}
		output, err = proto.Marshal(&res)
		if err != nil {
			return err
		}

	case "ModuleClassDelete":
		inputDefine := CoSysModuleClass{}
		if err = proto.Unmarshal(input, &inputDefine); err != nil {
			return err
		}
		var res Result
		if withContext == false {
			imp := val.(impSys)
			res, err = imp.ModuleClassDelete(inputDefine)
			if err != nil {
				return err
			}
		} else {
			imp := val.(impSysWithContext)
			res, err = imp.ModuleClassDelete(ctx, inputDefine)
			if err != nil {
				return err
			}
		}
		output, err = proto.Marshal(&res)
		if err != nil {
			return err
		}

	case "LimitPage":
		inputDefine := ReqCoSysLimit{}
		if err = proto.Unmarshal(input, &inputDefine); err != nil {
			return err
		}
		var res ResCoSysLimit
		if withContext == false {
			imp := val.(impSys)
			res, err = imp.LimitPage(inputDefine)
			if err != nil {
				return err
			}
		} else {
			imp := val.(impSysWithContext)
			res, err = imp.LimitPage(ctx, inputDefine)
			if err != nil {
				return err
			}
		}
		output, err = proto.Marshal(&res)
		if err != nil {
			return err
		}

	case "LimitData":
		inputDefine := CoSysLimit{}
		if err = proto.Unmarshal(input, &inputDefine); err != nil {
			return err
		}
		var res CoSysLimit
		if withContext == false {
			imp := val.(impSys)
			res, err = imp.LimitData(inputDefine)
			if err != nil {
				return err
			}
		} else {
			imp := val.(impSysWithContext)
			res, err = imp.LimitData(ctx, inputDefine)
			if err != nil {
				return err
			}
		}
		output, err = proto.Marshal(&res)
		if err != nil {
			return err
		}

	case "LimitSave":
		inputDefine := CoSysLimit{}
		if err = proto.Unmarshal(input, &inputDefine); err != nil {
			return err
		}
		var res CoSysLimit
		if withContext == false {
			imp := val.(impSys)
			res, err = imp.LimitSave(inputDefine)
			if err != nil {
				return err
			}
		} else {
			imp := val.(impSysWithContext)
			res, err = imp.LimitSave(ctx, inputDefine)
			if err != nil {
				return err
			}
		}
		output, err = proto.Marshal(&res)
		if err != nil {
			return err
		}

	case "LimitDelete":
		inputDefine := CoSysLimit{}
		if err = proto.Unmarshal(input, &inputDefine); err != nil {
			return err
		}
		var res Result
		if withContext == false {
			imp := val.(impSys)
			res, err = imp.LimitDelete(inputDefine)
			if err != nil {
				return err
			}
		} else {
			imp := val.(impSysWithContext)
			res, err = imp.LimitDelete(ctx, inputDefine)
			if err != nil {
				return err
			}
		}
		output, err = proto.Marshal(&res)
		if err != nil {
			return err
		}

	default:
		return fmt.Errorf("func mismatch")
	}
	var _status map[string]string
	s, ok := current.GetResponseStatus(ctx)
	if ok && s != nil {
		_status = s
	}
	var _context map[string]string
	c, ok := current.GetResponseContext(ctx)
	if ok && c != nil {
		_context = c
	}
	*resp = requestf.ResponsePacket{
		IVersion:     1,
		CPacketType:  0,
		IRequestId:   req.IRequestId,
		IMessageType: 0,
		IRet:         0,
		SBuffer:      tools.ByteToInt8(output),
		Status:       _status,
		SResultDesc:  "",
		Context:      _context,
	}
	return nil
}

// TypeList is client rpc method as defined
func (obj *Sys) TypeList(input CoType, _opt ...map[string]string) (output ResCoType, err error) {
	ctx := context.Background()
	return obj.TypeListWithContext(ctx, input, _opt...)
}

// TypeListWithContext is client rpc method as defined
func (obj *Sys) TypeListWithContext(ctx context.Context, input CoType, _opt ...map[string]string) (output ResCoType, err error) {
	var inputMarshal []byte
	inputMarshal, err = proto.Marshal(&input)
	if err != nil {
		return output, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}

	resp := new(requestf.ResponsePacket)

	err = obj.s.Tars_invoke(ctx, 0, "TypeList", inputMarshal, _status, _context, resp)
	if err != nil {
		return output, err
	}
	if err = proto.Unmarshal(tools.Int8ToByte(resp.SBuffer), &output); err != nil {
		return output, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range resp.Status {
			_status[k] = v
		}
	}

	return output, nil
}

// TypeData is client rpc method as defined
func (obj *Sys) TypeData(input CoType, _opt ...map[string]string) (output CoType, err error) {
	ctx := context.Background()
	return obj.TypeDataWithContext(ctx, input, _opt...)
}

// TypeDataWithContext is client rpc method as defined
func (obj *Sys) TypeDataWithContext(ctx context.Context, input CoType, _opt ...map[string]string) (output CoType, err error) {
	var inputMarshal []byte
	inputMarshal, err = proto.Marshal(&input)
	if err != nil {
		return output, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}

	resp := new(requestf.ResponsePacket)

	err = obj.s.Tars_invoke(ctx, 0, "TypeData", inputMarshal, _status, _context, resp)
	if err != nil {
		return output, err
	}
	if err = proto.Unmarshal(tools.Int8ToByte(resp.SBuffer), &output); err != nil {
		return output, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range resp.Status {
			_status[k] = v
		}
	}

	return output, nil
}

// TypeSave is client rpc method as defined
func (obj *Sys) TypeSave(input CoType, _opt ...map[string]string) (output CoType, err error) {
	ctx := context.Background()
	return obj.TypeSaveWithContext(ctx, input, _opt...)
}

// TypeSaveWithContext is client rpc method as defined
func (obj *Sys) TypeSaveWithContext(ctx context.Context, input CoType, _opt ...map[string]string) (output CoType, err error) {
	var inputMarshal []byte
	inputMarshal, err = proto.Marshal(&input)
	if err != nil {
		return output, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}

	resp := new(requestf.ResponsePacket)

	err = obj.s.Tars_invoke(ctx, 0, "TypeSave", inputMarshal, _status, _context, resp)
	if err != nil {
		return output, err
	}
	if err = proto.Unmarshal(tools.Int8ToByte(resp.SBuffer), &output); err != nil {
		return output, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range resp.Status {
			_status[k] = v
		}
	}

	return output, nil
}

// TypeDelete is client rpc method as defined
func (obj *Sys) TypeDelete(input CoType, _opt ...map[string]string) (output Result, err error) {
	ctx := context.Background()
	return obj.TypeDeleteWithContext(ctx, input, _opt...)
}

// TypeDeleteWithContext is client rpc method as defined
func (obj *Sys) TypeDeleteWithContext(ctx context.Context, input CoType, _opt ...map[string]string) (output Result, err error) {
	var inputMarshal []byte
	inputMarshal, err = proto.Marshal(&input)
	if err != nil {
		return output, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}

	resp := new(requestf.ResponsePacket)

	err = obj.s.Tars_invoke(ctx, 0, "TypeDelete", inputMarshal, _status, _context, resp)
	if err != nil {
		return output, err
	}
	if err = proto.Unmarshal(tools.Int8ToByte(resp.SBuffer), &output); err != nil {
		return output, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range resp.Status {
			_status[k] = v
		}
	}

	return output, nil
}

// BindingPage is client rpc method as defined
func (obj *Sys) BindingPage(input PageInfo, _opt ...map[string]string) (output ResCoSysBinding, err error) {
	ctx := context.Background()
	return obj.BindingPageWithContext(ctx, input, _opt...)
}

// BindingPageWithContext is client rpc method as defined
func (obj *Sys) BindingPageWithContext(ctx context.Context, input PageInfo, _opt ...map[string]string) (output ResCoSysBinding, err error) {
	var inputMarshal []byte
	inputMarshal, err = proto.Marshal(&input)
	if err != nil {
		return output, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}

	resp := new(requestf.ResponsePacket)

	err = obj.s.Tars_invoke(ctx, 0, "BindingPage", inputMarshal, _status, _context, resp)
	if err != nil {
		return output, err
	}
	if err = proto.Unmarshal(tools.Int8ToByte(resp.SBuffer), &output); err != nil {
		return output, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range resp.Status {
			_status[k] = v
		}
	}

	return output, nil
}

// BindingData is client rpc method as defined
func (obj *Sys) BindingData(input CoSysBinding, _opt ...map[string]string) (output ResCoSysBinding, err error) {
	ctx := context.Background()
	return obj.BindingDataWithContext(ctx, input, _opt...)
}

// BindingDataWithContext is client rpc method as defined
func (obj *Sys) BindingDataWithContext(ctx context.Context, input CoSysBinding, _opt ...map[string]string) (output ResCoSysBinding, err error) {
	var inputMarshal []byte
	inputMarshal, err = proto.Marshal(&input)
	if err != nil {
		return output, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}

	resp := new(requestf.ResponsePacket)

	err = obj.s.Tars_invoke(ctx, 0, "BindingData", inputMarshal, _status, _context, resp)
	if err != nil {
		return output, err
	}
	if err = proto.Unmarshal(tools.Int8ToByte(resp.SBuffer), &output); err != nil {
		return output, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range resp.Status {
			_status[k] = v
		}
	}

	return output, nil
}

// BindingSave is client rpc method as defined
func (obj *Sys) BindingSave(input CoSysBinding, _opt ...map[string]string) (output CoSysBinding, err error) {
	ctx := context.Background()
	return obj.BindingSaveWithContext(ctx, input, _opt...)
}

// BindingSaveWithContext is client rpc method as defined
func (obj *Sys) BindingSaveWithContext(ctx context.Context, input CoSysBinding, _opt ...map[string]string) (output CoSysBinding, err error) {
	var inputMarshal []byte
	inputMarshal, err = proto.Marshal(&input)
	if err != nil {
		return output, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}

	resp := new(requestf.ResponsePacket)

	err = obj.s.Tars_invoke(ctx, 0, "BindingSave", inputMarshal, _status, _context, resp)
	if err != nil {
		return output, err
	}
	if err = proto.Unmarshal(tools.Int8ToByte(resp.SBuffer), &output); err != nil {
		return output, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range resp.Status {
			_status[k] = v
		}
	}

	return output, nil
}

// BindingDelete is client rpc method as defined
func (obj *Sys) BindingDelete(input CoSysBinding, _opt ...map[string]string) (output Result, err error) {
	ctx := context.Background()
	return obj.BindingDeleteWithContext(ctx, input, _opt...)
}

// BindingDeleteWithContext is client rpc method as defined
func (obj *Sys) BindingDeleteWithContext(ctx context.Context, input CoSysBinding, _opt ...map[string]string) (output Result, err error) {
	var inputMarshal []byte
	inputMarshal, err = proto.Marshal(&input)
	if err != nil {
		return output, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}

	resp := new(requestf.ResponsePacket)

	err = obj.s.Tars_invoke(ctx, 0, "BindingDelete", inputMarshal, _status, _context, resp)
	if err != nil {
		return output, err
	}
	if err = proto.Unmarshal(tools.Int8ToByte(resp.SBuffer), &output); err != nil {
		return output, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range resp.Status {
			_status[k] = v
		}
	}

	return output, nil
}

// BindingVipList is client rpc method as defined
func (obj *Sys) BindingVipList(input CoSysBindingVip, _opt ...map[string]string) (output ResCoSysBindingVip, err error) {
	ctx := context.Background()
	return obj.BindingVipListWithContext(ctx, input, _opt...)
}

// BindingVipListWithContext is client rpc method as defined
func (obj *Sys) BindingVipListWithContext(ctx context.Context, input CoSysBindingVip, _opt ...map[string]string) (output ResCoSysBindingVip, err error) {
	var inputMarshal []byte
	inputMarshal, err = proto.Marshal(&input)
	if err != nil {
		return output, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}

	resp := new(requestf.ResponsePacket)

	err = obj.s.Tars_invoke(ctx, 0, "BindingVipList", inputMarshal, _status, _context, resp)
	if err != nil {
		return output, err
	}
	if err = proto.Unmarshal(tools.Int8ToByte(resp.SBuffer), &output); err != nil {
		return output, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range resp.Status {
			_status[k] = v
		}
	}

	return output, nil
}

// BindingVipData is client rpc method as defined
func (obj *Sys) BindingVipData(input CoSysBindingVip, _opt ...map[string]string) (output CoSysBindingVip, err error) {
	ctx := context.Background()
	return obj.BindingVipDataWithContext(ctx, input, _opt...)
}

// BindingVipDataWithContext is client rpc method as defined
func (obj *Sys) BindingVipDataWithContext(ctx context.Context, input CoSysBindingVip, _opt ...map[string]string) (output CoSysBindingVip, err error) {
	var inputMarshal []byte
	inputMarshal, err = proto.Marshal(&input)
	if err != nil {
		return output, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}

	resp := new(requestf.ResponsePacket)

	err = obj.s.Tars_invoke(ctx, 0, "BindingVipData", inputMarshal, _status, _context, resp)
	if err != nil {
		return output, err
	}
	if err = proto.Unmarshal(tools.Int8ToByte(resp.SBuffer), &output); err != nil {
		return output, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range resp.Status {
			_status[k] = v
		}
	}

	return output, nil
}

// BindingVipSave is client rpc method as defined
func (obj *Sys) BindingVipSave(input CoSysBindingVip, _opt ...map[string]string) (output CoSysBindingVip, err error) {
	ctx := context.Background()
	return obj.BindingVipSaveWithContext(ctx, input, _opt...)
}

// BindingVipSaveWithContext is client rpc method as defined
func (obj *Sys) BindingVipSaveWithContext(ctx context.Context, input CoSysBindingVip, _opt ...map[string]string) (output CoSysBindingVip, err error) {
	var inputMarshal []byte
	inputMarshal, err = proto.Marshal(&input)
	if err != nil {
		return output, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}

	resp := new(requestf.ResponsePacket)

	err = obj.s.Tars_invoke(ctx, 0, "BindingVipSave", inputMarshal, _status, _context, resp)
	if err != nil {
		return output, err
	}
	if err = proto.Unmarshal(tools.Int8ToByte(resp.SBuffer), &output); err != nil {
		return output, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range resp.Status {
			_status[k] = v
		}
	}

	return output, nil
}

// BindingVipDelete is client rpc method as defined
func (obj *Sys) BindingVipDelete(input CoSysBindingVip, _opt ...map[string]string) (output Result, err error) {
	ctx := context.Background()
	return obj.BindingVipDeleteWithContext(ctx, input, _opt...)
}

// BindingVipDeleteWithContext is client rpc method as defined
func (obj *Sys) BindingVipDeleteWithContext(ctx context.Context, input CoSysBindingVip, _opt ...map[string]string) (output Result, err error) {
	var inputMarshal []byte
	inputMarshal, err = proto.Marshal(&input)
	if err != nil {
		return output, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}

	resp := new(requestf.ResponsePacket)

	err = obj.s.Tars_invoke(ctx, 0, "BindingVipDelete", inputMarshal, _status, _context, resp)
	if err != nil {
		return output, err
	}
	if err = proto.Unmarshal(tools.Int8ToByte(resp.SBuffer), &output); err != nil {
		return output, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range resp.Status {
			_status[k] = v
		}
	}

	return output, nil
}

// MenuAll is client rpc method as defined
func (obj *Sys) MenuAll(input ResultEmpty, _opt ...map[string]string) (output ResCoMenu, err error) {
	ctx := context.Background()
	return obj.MenuAllWithContext(ctx, input, _opt...)
}

// MenuAllWithContext is client rpc method as defined
func (obj *Sys) MenuAllWithContext(ctx context.Context, input ResultEmpty, _opt ...map[string]string) (output ResCoMenu, err error) {
	var inputMarshal []byte
	inputMarshal, err = proto.Marshal(&input)
	if err != nil {
		return output, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}

	resp := new(requestf.ResponsePacket)

	err = obj.s.Tars_invoke(ctx, 0, "MenuAll", inputMarshal, _status, _context, resp)
	if err != nil {
		return output, err
	}
	if err = proto.Unmarshal(tools.Int8ToByte(resp.SBuffer), &output); err != nil {
		return output, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range resp.Status {
			_status[k] = v
		}
	}

	return output, nil
}

// MenuPage is client rpc method as defined
func (obj *Sys) MenuPage(input ReqCoMenu, _opt ...map[string]string) (output ResCoMenu, err error) {
	ctx := context.Background()
	return obj.MenuPageWithContext(ctx, input, _opt...)
}

// MenuPageWithContext is client rpc method as defined
func (obj *Sys) MenuPageWithContext(ctx context.Context, input ReqCoMenu, _opt ...map[string]string) (output ResCoMenu, err error) {
	var inputMarshal []byte
	inputMarshal, err = proto.Marshal(&input)
	if err != nil {
		return output, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}

	resp := new(requestf.ResponsePacket)

	err = obj.s.Tars_invoke(ctx, 0, "MenuPage", inputMarshal, _status, _context, resp)
	if err != nil {
		return output, err
	}
	if err = proto.Unmarshal(tools.Int8ToByte(resp.SBuffer), &output); err != nil {
		return output, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range resp.Status {
			_status[k] = v
		}
	}

	return output, nil
}

// MenuData is client rpc method as defined
func (obj *Sys) MenuData(input CoMenu, _opt ...map[string]string) (output CoMenu, err error) {
	ctx := context.Background()
	return obj.MenuDataWithContext(ctx, input, _opt...)
}

// MenuDataWithContext is client rpc method as defined
func (obj *Sys) MenuDataWithContext(ctx context.Context, input CoMenu, _opt ...map[string]string) (output CoMenu, err error) {
	var inputMarshal []byte
	inputMarshal, err = proto.Marshal(&input)
	if err != nil {
		return output, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}

	resp := new(requestf.ResponsePacket)

	err = obj.s.Tars_invoke(ctx, 0, "MenuData", inputMarshal, _status, _context, resp)
	if err != nil {
		return output, err
	}
	if err = proto.Unmarshal(tools.Int8ToByte(resp.SBuffer), &output); err != nil {
		return output, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range resp.Status {
			_status[k] = v
		}
	}

	return output, nil
}

// MenuSave is client rpc method as defined
func (obj *Sys) MenuSave(input CoMenu, _opt ...map[string]string) (output CoMenu, err error) {
	ctx := context.Background()
	return obj.MenuSaveWithContext(ctx, input, _opt...)
}

// MenuSaveWithContext is client rpc method as defined
func (obj *Sys) MenuSaveWithContext(ctx context.Context, input CoMenu, _opt ...map[string]string) (output CoMenu, err error) {
	var inputMarshal []byte
	inputMarshal, err = proto.Marshal(&input)
	if err != nil {
		return output, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}

	resp := new(requestf.ResponsePacket)

	err = obj.s.Tars_invoke(ctx, 0, "MenuSave", inputMarshal, _status, _context, resp)
	if err != nil {
		return output, err
	}
	if err = proto.Unmarshal(tools.Int8ToByte(resp.SBuffer), &output); err != nil {
		return output, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range resp.Status {
			_status[k] = v
		}
	}

	return output, nil
}

// MenuDelete is client rpc method as defined
func (obj *Sys) MenuDelete(input CoMenu, _opt ...map[string]string) (output Result, err error) {
	ctx := context.Background()
	return obj.MenuDeleteWithContext(ctx, input, _opt...)
}

// MenuDeleteWithContext is client rpc method as defined
func (obj *Sys) MenuDeleteWithContext(ctx context.Context, input CoMenu, _opt ...map[string]string) (output Result, err error) {
	var inputMarshal []byte
	inputMarshal, err = proto.Marshal(&input)
	if err != nil {
		return output, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}

	resp := new(requestf.ResponsePacket)

	err = obj.s.Tars_invoke(ctx, 0, "MenuDelete", inputMarshal, _status, _context, resp)
	if err != nil {
		return output, err
	}
	if err = proto.Unmarshal(tools.Int8ToByte(resp.SBuffer), &output); err != nil {
		return output, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range resp.Status {
			_status[k] = v
		}
	}

	return output, nil
}

// MenuGroupLink is client rpc method as defined
func (obj *Sys) MenuGroupLink(input CoMenuGroup, _opt ...map[string]string) (output ResCoMenu, err error) {
	ctx := context.Background()
	return obj.MenuGroupLinkWithContext(ctx, input, _opt...)
}

// MenuGroupLinkWithContext is client rpc method as defined
func (obj *Sys) MenuGroupLinkWithContext(ctx context.Context, input CoMenuGroup, _opt ...map[string]string) (output ResCoMenu, err error) {
	var inputMarshal []byte
	inputMarshal, err = proto.Marshal(&input)
	if err != nil {
		return output, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}

	resp := new(requestf.ResponsePacket)

	err = obj.s.Tars_invoke(ctx, 0, "MenuGroupLink", inputMarshal, _status, _context, resp)
	if err != nil {
		return output, err
	}
	if err = proto.Unmarshal(tools.Int8ToByte(resp.SBuffer), &output); err != nil {
		return output, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range resp.Status {
			_status[k] = v
		}
	}

	return output, nil
}

// MenuApiPage is client rpc method as defined
func (obj *Sys) MenuApiPage(input ReqCoMenuAPI, _opt ...map[string]string) (output ResCoMenuAPI, err error) {
	ctx := context.Background()
	return obj.MenuApiPageWithContext(ctx, input, _opt...)
}

// MenuApiPageWithContext is client rpc method as defined
func (obj *Sys) MenuApiPageWithContext(ctx context.Context, input ReqCoMenuAPI, _opt ...map[string]string) (output ResCoMenuAPI, err error) {
	var inputMarshal []byte
	inputMarshal, err = proto.Marshal(&input)
	if err != nil {
		return output, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}

	resp := new(requestf.ResponsePacket)

	err = obj.s.Tars_invoke(ctx, 0, "MenuApiPage", inputMarshal, _status, _context, resp)
	if err != nil {
		return output, err
	}
	if err = proto.Unmarshal(tools.Int8ToByte(resp.SBuffer), &output); err != nil {
		return output, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range resp.Status {
			_status[k] = v
		}
	}

	return output, nil
}

// MenuApiData is client rpc method as defined
func (obj *Sys) MenuApiData(input CoMenuAPI, _opt ...map[string]string) (output CoMenuAPI, err error) {
	ctx := context.Background()
	return obj.MenuApiDataWithContext(ctx, input, _opt...)
}

// MenuApiDataWithContext is client rpc method as defined
func (obj *Sys) MenuApiDataWithContext(ctx context.Context, input CoMenuAPI, _opt ...map[string]string) (output CoMenuAPI, err error) {
	var inputMarshal []byte
	inputMarshal, err = proto.Marshal(&input)
	if err != nil {
		return output, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}

	resp := new(requestf.ResponsePacket)

	err = obj.s.Tars_invoke(ctx, 0, "MenuApiData", inputMarshal, _status, _context, resp)
	if err != nil {
		return output, err
	}
	if err = proto.Unmarshal(tools.Int8ToByte(resp.SBuffer), &output); err != nil {
		return output, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range resp.Status {
			_status[k] = v
		}
	}

	return output, nil
}

// MenuApiSave is client rpc method as defined
func (obj *Sys) MenuApiSave(input CoMenuAPI, _opt ...map[string]string) (output CoMenuAPI, err error) {
	ctx := context.Background()
	return obj.MenuApiSaveWithContext(ctx, input, _opt...)
}

// MenuApiSaveWithContext is client rpc method as defined
func (obj *Sys) MenuApiSaveWithContext(ctx context.Context, input CoMenuAPI, _opt ...map[string]string) (output CoMenuAPI, err error) {
	var inputMarshal []byte
	inputMarshal, err = proto.Marshal(&input)
	if err != nil {
		return output, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}

	resp := new(requestf.ResponsePacket)

	err = obj.s.Tars_invoke(ctx, 0, "MenuApiSave", inputMarshal, _status, _context, resp)
	if err != nil {
		return output, err
	}
	if err = proto.Unmarshal(tools.Int8ToByte(resp.SBuffer), &output); err != nil {
		return output, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range resp.Status {
			_status[k] = v
		}
	}

	return output, nil
}

// MenuApiDelete is client rpc method as defined
func (obj *Sys) MenuApiDelete(input CoMenuAPI, _opt ...map[string]string) (output Result, err error) {
	ctx := context.Background()
	return obj.MenuApiDeleteWithContext(ctx, input, _opt...)
}

// MenuApiDeleteWithContext is client rpc method as defined
func (obj *Sys) MenuApiDeleteWithContext(ctx context.Context, input CoMenuAPI, _opt ...map[string]string) (output Result, err error) {
	var inputMarshal []byte
	inputMarshal, err = proto.Marshal(&input)
	if err != nil {
		return output, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}

	resp := new(requestf.ResponsePacket)

	err = obj.s.Tars_invoke(ctx, 0, "MenuApiDelete", inputMarshal, _status, _context, resp)
	if err != nil {
		return output, err
	}
	if err = proto.Unmarshal(tools.Int8ToByte(resp.SBuffer), &output); err != nil {
		return output, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range resp.Status {
			_status[k] = v
		}
	}

	return output, nil
}

// MenuGroupPage is client rpc method as defined
func (obj *Sys) MenuGroupPage(input ReqCoMenuGroup, _opt ...map[string]string) (output ResCoMenuGroup, err error) {
	ctx := context.Background()
	return obj.MenuGroupPageWithContext(ctx, input, _opt...)
}

// MenuGroupPageWithContext is client rpc method as defined
func (obj *Sys) MenuGroupPageWithContext(ctx context.Context, input ReqCoMenuGroup, _opt ...map[string]string) (output ResCoMenuGroup, err error) {
	var inputMarshal []byte
	inputMarshal, err = proto.Marshal(&input)
	if err != nil {
		return output, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}

	resp := new(requestf.ResponsePacket)

	err = obj.s.Tars_invoke(ctx, 0, "MenuGroupPage", inputMarshal, _status, _context, resp)
	if err != nil {
		return output, err
	}
	if err = proto.Unmarshal(tools.Int8ToByte(resp.SBuffer), &output); err != nil {
		return output, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range resp.Status {
			_status[k] = v
		}
	}

	return output, nil
}

// MenuGroupData is client rpc method as defined
func (obj *Sys) MenuGroupData(input CoMenuGroup, _opt ...map[string]string) (output CoMenuGroup, err error) {
	ctx := context.Background()
	return obj.MenuGroupDataWithContext(ctx, input, _opt...)
}

// MenuGroupDataWithContext is client rpc method as defined
func (obj *Sys) MenuGroupDataWithContext(ctx context.Context, input CoMenuGroup, _opt ...map[string]string) (output CoMenuGroup, err error) {
	var inputMarshal []byte
	inputMarshal, err = proto.Marshal(&input)
	if err != nil {
		return output, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}

	resp := new(requestf.ResponsePacket)

	err = obj.s.Tars_invoke(ctx, 0, "MenuGroupData", inputMarshal, _status, _context, resp)
	if err != nil {
		return output, err
	}
	if err = proto.Unmarshal(tools.Int8ToByte(resp.SBuffer), &output); err != nil {
		return output, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range resp.Status {
			_status[k] = v
		}
	}

	return output, nil
}

// MenuGroupSave is client rpc method as defined
func (obj *Sys) MenuGroupSave(input CoMenuGroup, _opt ...map[string]string) (output CoMenuGroup, err error) {
	ctx := context.Background()
	return obj.MenuGroupSaveWithContext(ctx, input, _opt...)
}

// MenuGroupSaveWithContext is client rpc method as defined
func (obj *Sys) MenuGroupSaveWithContext(ctx context.Context, input CoMenuGroup, _opt ...map[string]string) (output CoMenuGroup, err error) {
	var inputMarshal []byte
	inputMarshal, err = proto.Marshal(&input)
	if err != nil {
		return output, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}

	resp := new(requestf.ResponsePacket)

	err = obj.s.Tars_invoke(ctx, 0, "MenuGroupSave", inputMarshal, _status, _context, resp)
	if err != nil {
		return output, err
	}
	if err = proto.Unmarshal(tools.Int8ToByte(resp.SBuffer), &output); err != nil {
		return output, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range resp.Status {
			_status[k] = v
		}
	}

	return output, nil
}

// MenuGroupDelete is client rpc method as defined
func (obj *Sys) MenuGroupDelete(input CoMenuGroup, _opt ...map[string]string) (output Result, err error) {
	ctx := context.Background()
	return obj.MenuGroupDeleteWithContext(ctx, input, _opt...)
}

// MenuGroupDeleteWithContext is client rpc method as defined
func (obj *Sys) MenuGroupDeleteWithContext(ctx context.Context, input CoMenuGroup, _opt ...map[string]string) (output Result, err error) {
	var inputMarshal []byte
	inputMarshal, err = proto.Marshal(&input)
	if err != nil {
		return output, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}

	resp := new(requestf.ResponsePacket)

	err = obj.s.Tars_invoke(ctx, 0, "MenuGroupDelete", inputMarshal, _status, _context, resp)
	if err != nil {
		return output, err
	}
	if err = proto.Unmarshal(tools.Int8ToByte(resp.SBuffer), &output); err != nil {
		return output, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range resp.Status {
			_status[k] = v
		}
	}

	return output, nil
}

// MenuGroupLimitAll is client rpc method as defined
func (obj *Sys) MenuGroupLimitAll(input CoMenuGroupLimit, _opt ...map[string]string) (output ResCoMenuGroupLimit, err error) {
	ctx := context.Background()
	return obj.MenuGroupLimitAllWithContext(ctx, input, _opt...)
}

// MenuGroupLimitAllWithContext is client rpc method as defined
func (obj *Sys) MenuGroupLimitAllWithContext(ctx context.Context, input CoMenuGroupLimit, _opt ...map[string]string) (output ResCoMenuGroupLimit, err error) {
	var inputMarshal []byte
	inputMarshal, err = proto.Marshal(&input)
	if err != nil {
		return output, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}

	resp := new(requestf.ResponsePacket)

	err = obj.s.Tars_invoke(ctx, 0, "MenuGroupLimitAll", inputMarshal, _status, _context, resp)
	if err != nil {
		return output, err
	}
	if err = proto.Unmarshal(tools.Int8ToByte(resp.SBuffer), &output); err != nil {
		return output, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range resp.Status {
			_status[k] = v
		}
	}

	return output, nil
}

// MenuGroupLimitData is client rpc method as defined
func (obj *Sys) MenuGroupLimitData(input CoMenuGroupLimit, _opt ...map[string]string) (output CoMenuGroupLimit, err error) {
	ctx := context.Background()
	return obj.MenuGroupLimitDataWithContext(ctx, input, _opt...)
}

// MenuGroupLimitDataWithContext is client rpc method as defined
func (obj *Sys) MenuGroupLimitDataWithContext(ctx context.Context, input CoMenuGroupLimit, _opt ...map[string]string) (output CoMenuGroupLimit, err error) {
	var inputMarshal []byte
	inputMarshal, err = proto.Marshal(&input)
	if err != nil {
		return output, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}

	resp := new(requestf.ResponsePacket)

	err = obj.s.Tars_invoke(ctx, 0, "MenuGroupLimitData", inputMarshal, _status, _context, resp)
	if err != nil {
		return output, err
	}
	if err = proto.Unmarshal(tools.Int8ToByte(resp.SBuffer), &output); err != nil {
		return output, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range resp.Status {
			_status[k] = v
		}
	}

	return output, nil
}

// MenuGroupLimitSave is client rpc method as defined
func (obj *Sys) MenuGroupLimitSave(input CoMenuGroupLimit, _opt ...map[string]string) (output CoMenuGroupLimit, err error) {
	ctx := context.Background()
	return obj.MenuGroupLimitSaveWithContext(ctx, input, _opt...)
}

// MenuGroupLimitSaveWithContext is client rpc method as defined
func (obj *Sys) MenuGroupLimitSaveWithContext(ctx context.Context, input CoMenuGroupLimit, _opt ...map[string]string) (output CoMenuGroupLimit, err error) {
	var inputMarshal []byte
	inputMarshal, err = proto.Marshal(&input)
	if err != nil {
		return output, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}

	resp := new(requestf.ResponsePacket)

	err = obj.s.Tars_invoke(ctx, 0, "MenuGroupLimitSave", inputMarshal, _status, _context, resp)
	if err != nil {
		return output, err
	}
	if err = proto.Unmarshal(tools.Int8ToByte(resp.SBuffer), &output); err != nil {
		return output, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range resp.Status {
			_status[k] = v
		}
	}

	return output, nil
}

// MenuGroupLimitDelete is client rpc method as defined
func (obj *Sys) MenuGroupLimitDelete(input CoMenuGroupLimit, _opt ...map[string]string) (output Result, err error) {
	ctx := context.Background()
	return obj.MenuGroupLimitDeleteWithContext(ctx, input, _opt...)
}

// MenuGroupLimitDeleteWithContext is client rpc method as defined
func (obj *Sys) MenuGroupLimitDeleteWithContext(ctx context.Context, input CoMenuGroupLimit, _opt ...map[string]string) (output Result, err error) {
	var inputMarshal []byte
	inputMarshal, err = proto.Marshal(&input)
	if err != nil {
		return output, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}

	resp := new(requestf.ResponsePacket)

	err = obj.s.Tars_invoke(ctx, 0, "MenuGroupLimitDelete", inputMarshal, _status, _context, resp)
	if err != nil {
		return output, err
	}
	if err = proto.Unmarshal(tools.Int8ToByte(resp.SBuffer), &output); err != nil {
		return output, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range resp.Status {
			_status[k] = v
		}
	}

	return output, nil
}

// MenuGroupRolePage is client rpc method as defined
func (obj *Sys) MenuGroupRolePage(input PageInfo, _opt ...map[string]string) (output ResCoMenuGroupRole, err error) {
	ctx := context.Background()
	return obj.MenuGroupRolePageWithContext(ctx, input, _opt...)
}

// MenuGroupRolePageWithContext is client rpc method as defined
func (obj *Sys) MenuGroupRolePageWithContext(ctx context.Context, input PageInfo, _opt ...map[string]string) (output ResCoMenuGroupRole, err error) {
	var inputMarshal []byte
	inputMarshal, err = proto.Marshal(&input)
	if err != nil {
		return output, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}

	resp := new(requestf.ResponsePacket)

	err = obj.s.Tars_invoke(ctx, 0, "MenuGroupRolePage", inputMarshal, _status, _context, resp)
	if err != nil {
		return output, err
	}
	if err = proto.Unmarshal(tools.Int8ToByte(resp.SBuffer), &output); err != nil {
		return output, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range resp.Status {
			_status[k] = v
		}
	}

	return output, nil
}

// MenuGroupRoleSave is client rpc method as defined
func (obj *Sys) MenuGroupRoleSave(input CoMenuGroupRole, _opt ...map[string]string) (output CoMenuGroupRole, err error) {
	ctx := context.Background()
	return obj.MenuGroupRoleSaveWithContext(ctx, input, _opt...)
}

// MenuGroupRoleSaveWithContext is client rpc method as defined
func (obj *Sys) MenuGroupRoleSaveWithContext(ctx context.Context, input CoMenuGroupRole, _opt ...map[string]string) (output CoMenuGroupRole, err error) {
	var inputMarshal []byte
	inputMarshal, err = proto.Marshal(&input)
	if err != nil {
		return output, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}

	resp := new(requestf.ResponsePacket)

	err = obj.s.Tars_invoke(ctx, 0, "MenuGroupRoleSave", inputMarshal, _status, _context, resp)
	if err != nil {
		return output, err
	}
	if err = proto.Unmarshal(tools.Int8ToByte(resp.SBuffer), &output); err != nil {
		return output, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range resp.Status {
			_status[k] = v
		}
	}

	return output, nil
}

// MenuGroupRoleDelete is client rpc method as defined
func (obj *Sys) MenuGroupRoleDelete(input CoMenuGroupRole, _opt ...map[string]string) (output Result, err error) {
	ctx := context.Background()
	return obj.MenuGroupRoleDeleteWithContext(ctx, input, _opt...)
}

// MenuGroupRoleDeleteWithContext is client rpc method as defined
func (obj *Sys) MenuGroupRoleDeleteWithContext(ctx context.Context, input CoMenuGroupRole, _opt ...map[string]string) (output Result, err error) {
	var inputMarshal []byte
	inputMarshal, err = proto.Marshal(&input)
	if err != nil {
		return output, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}

	resp := new(requestf.ResponsePacket)

	err = obj.s.Tars_invoke(ctx, 0, "MenuGroupRoleDelete", inputMarshal, _status, _context, resp)
	if err != nil {
		return output, err
	}
	if err = proto.Unmarshal(tools.Int8ToByte(resp.SBuffer), &output); err != nil {
		return output, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range resp.Status {
			_status[k] = v
		}
	}

	return output, nil
}

// PluginList is client rpc method as defined
func (obj *Sys) PluginList(input ResultEmpty, _opt ...map[string]string) (output ResCoSysPlugin, err error) {
	ctx := context.Background()
	return obj.PluginListWithContext(ctx, input, _opt...)
}

// PluginListWithContext is client rpc method as defined
func (obj *Sys) PluginListWithContext(ctx context.Context, input ResultEmpty, _opt ...map[string]string) (output ResCoSysPlugin, err error) {
	var inputMarshal []byte
	inputMarshal, err = proto.Marshal(&input)
	if err != nil {
		return output, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}

	resp := new(requestf.ResponsePacket)

	err = obj.s.Tars_invoke(ctx, 0, "PluginList", inputMarshal, _status, _context, resp)
	if err != nil {
		return output, err
	}
	if err = proto.Unmarshal(tools.Int8ToByte(resp.SBuffer), &output); err != nil {
		return output, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range resp.Status {
			_status[k] = v
		}
	}

	return output, nil
}

// PluginPage is client rpc method as defined
func (obj *Sys) PluginPage(input ReqCoSysPlugin, _opt ...map[string]string) (output ResCoSysPlugin, err error) {
	ctx := context.Background()
	return obj.PluginPageWithContext(ctx, input, _opt...)
}

// PluginPageWithContext is client rpc method as defined
func (obj *Sys) PluginPageWithContext(ctx context.Context, input ReqCoSysPlugin, _opt ...map[string]string) (output ResCoSysPlugin, err error) {
	var inputMarshal []byte
	inputMarshal, err = proto.Marshal(&input)
	if err != nil {
		return output, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}

	resp := new(requestf.ResponsePacket)

	err = obj.s.Tars_invoke(ctx, 0, "PluginPage", inputMarshal, _status, _context, resp)
	if err != nil {
		return output, err
	}
	if err = proto.Unmarshal(tools.Int8ToByte(resp.SBuffer), &output); err != nil {
		return output, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range resp.Status {
			_status[k] = v
		}
	}

	return output, nil
}

// PluginData is client rpc method as defined
func (obj *Sys) PluginData(input CoSysPlugin, _opt ...map[string]string) (output CoSysPlugin, err error) {
	ctx := context.Background()
	return obj.PluginDataWithContext(ctx, input, _opt...)
}

// PluginDataWithContext is client rpc method as defined
func (obj *Sys) PluginDataWithContext(ctx context.Context, input CoSysPlugin, _opt ...map[string]string) (output CoSysPlugin, err error) {
	var inputMarshal []byte
	inputMarshal, err = proto.Marshal(&input)
	if err != nil {
		return output, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}

	resp := new(requestf.ResponsePacket)

	err = obj.s.Tars_invoke(ctx, 0, "PluginData", inputMarshal, _status, _context, resp)
	if err != nil {
		return output, err
	}
	if err = proto.Unmarshal(tools.Int8ToByte(resp.SBuffer), &output); err != nil {
		return output, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range resp.Status {
			_status[k] = v
		}
	}

	return output, nil
}

// PluginSave is client rpc method as defined
func (obj *Sys) PluginSave(input CoSysPlugin, _opt ...map[string]string) (output CoSysPlugin, err error) {
	ctx := context.Background()
	return obj.PluginSaveWithContext(ctx, input, _opt...)
}

// PluginSaveWithContext is client rpc method as defined
func (obj *Sys) PluginSaveWithContext(ctx context.Context, input CoSysPlugin, _opt ...map[string]string) (output CoSysPlugin, err error) {
	var inputMarshal []byte
	inputMarshal, err = proto.Marshal(&input)
	if err != nil {
		return output, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}

	resp := new(requestf.ResponsePacket)

	err = obj.s.Tars_invoke(ctx, 0, "PluginSave", inputMarshal, _status, _context, resp)
	if err != nil {
		return output, err
	}
	if err = proto.Unmarshal(tools.Int8ToByte(resp.SBuffer), &output); err != nil {
		return output, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range resp.Status {
			_status[k] = v
		}
	}

	return output, nil
}

// PluginDelete is client rpc method as defined
func (obj *Sys) PluginDelete(input CoSysPlugin, _opt ...map[string]string) (output Result, err error) {
	ctx := context.Background()
	return obj.PluginDeleteWithContext(ctx, input, _opt...)
}

// PluginDeleteWithContext is client rpc method as defined
func (obj *Sys) PluginDeleteWithContext(ctx context.Context, input CoSysPlugin, _opt ...map[string]string) (output Result, err error) {
	var inputMarshal []byte
	inputMarshal, err = proto.Marshal(&input)
	if err != nil {
		return output, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}

	resp := new(requestf.ResponsePacket)

	err = obj.s.Tars_invoke(ctx, 0, "PluginDelete", inputMarshal, _status, _context, resp)
	if err != nil {
		return output, err
	}
	if err = proto.Unmarshal(tools.Int8ToByte(resp.SBuffer), &output); err != nil {
		return output, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range resp.Status {
			_status[k] = v
		}
	}

	return output, nil
}

// PluginGroupLink is client rpc method as defined
func (obj *Sys) PluginGroupLink(input CoMenuGroup, _opt ...map[string]string) (output ResCoSysPlugin, err error) {
	ctx := context.Background()
	return obj.PluginGroupLinkWithContext(ctx, input, _opt...)
}

// PluginGroupLinkWithContext is client rpc method as defined
func (obj *Sys) PluginGroupLinkWithContext(ctx context.Context, input CoMenuGroup, _opt ...map[string]string) (output ResCoSysPlugin, err error) {
	var inputMarshal []byte
	inputMarshal, err = proto.Marshal(&input)
	if err != nil {
		return output, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}

	resp := new(requestf.ResponsePacket)

	err = obj.s.Tars_invoke(ctx, 0, "PluginGroupLink", inputMarshal, _status, _context, resp)
	if err != nil {
		return output, err
	}
	if err = proto.Unmarshal(tools.Int8ToByte(resp.SBuffer), &output); err != nil {
		return output, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range resp.Status {
			_status[k] = v
		}
	}

	return output, nil
}

// SettingPage is client rpc method as defined
func (obj *Sys) SettingPage(input ReqCoSysSetting, _opt ...map[string]string) (output ResCoSysSetting, err error) {
	ctx := context.Background()
	return obj.SettingPageWithContext(ctx, input, _opt...)
}

// SettingPageWithContext is client rpc method as defined
func (obj *Sys) SettingPageWithContext(ctx context.Context, input ReqCoSysSetting, _opt ...map[string]string) (output ResCoSysSetting, err error) {
	var inputMarshal []byte
	inputMarshal, err = proto.Marshal(&input)
	if err != nil {
		return output, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}

	resp := new(requestf.ResponsePacket)

	err = obj.s.Tars_invoke(ctx, 0, "SettingPage", inputMarshal, _status, _context, resp)
	if err != nil {
		return output, err
	}
	if err = proto.Unmarshal(tools.Int8ToByte(resp.SBuffer), &output); err != nil {
		return output, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range resp.Status {
			_status[k] = v
		}
	}

	return output, nil
}

// SettingData is client rpc method as defined
func (obj *Sys) SettingData(input CoSysSetting, _opt ...map[string]string) (output CoSysSetting, err error) {
	ctx := context.Background()
	return obj.SettingDataWithContext(ctx, input, _opt...)
}

// SettingDataWithContext is client rpc method as defined
func (obj *Sys) SettingDataWithContext(ctx context.Context, input CoSysSetting, _opt ...map[string]string) (output CoSysSetting, err error) {
	var inputMarshal []byte
	inputMarshal, err = proto.Marshal(&input)
	if err != nil {
		return output, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}

	resp := new(requestf.ResponsePacket)

	err = obj.s.Tars_invoke(ctx, 0, "SettingData", inputMarshal, _status, _context, resp)
	if err != nil {
		return output, err
	}
	if err = proto.Unmarshal(tools.Int8ToByte(resp.SBuffer), &output); err != nil {
		return output, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range resp.Status {
			_status[k] = v
		}
	}

	return output, nil
}

// SettingSave is client rpc method as defined
func (obj *Sys) SettingSave(input CoSysSetting, _opt ...map[string]string) (output Result, err error) {
	ctx := context.Background()
	return obj.SettingSaveWithContext(ctx, input, _opt...)
}

// SettingSaveWithContext is client rpc method as defined
func (obj *Sys) SettingSaveWithContext(ctx context.Context, input CoSysSetting, _opt ...map[string]string) (output Result, err error) {
	var inputMarshal []byte
	inputMarshal, err = proto.Marshal(&input)
	if err != nil {
		return output, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}

	resp := new(requestf.ResponsePacket)

	err = obj.s.Tars_invoke(ctx, 0, "SettingSave", inputMarshal, _status, _context, resp)
	if err != nil {
		return output, err
	}
	if err = proto.Unmarshal(tools.Int8ToByte(resp.SBuffer), &output); err != nil {
		return output, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range resp.Status {
			_status[k] = v
		}
	}

	return output, nil
}

// SettingDelete is client rpc method as defined
func (obj *Sys) SettingDelete(input CoSysSetting, _opt ...map[string]string) (output Result, err error) {
	ctx := context.Background()
	return obj.SettingDeleteWithContext(ctx, input, _opt...)
}

// SettingDeleteWithContext is client rpc method as defined
func (obj *Sys) SettingDeleteWithContext(ctx context.Context, input CoSysSetting, _opt ...map[string]string) (output Result, err error) {
	var inputMarshal []byte
	inputMarshal, err = proto.Marshal(&input)
	if err != nil {
		return output, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}

	resp := new(requestf.ResponsePacket)

	err = obj.s.Tars_invoke(ctx, 0, "SettingDelete", inputMarshal, _status, _context, resp)
	if err != nil {
		return output, err
	}
	if err = proto.Unmarshal(tools.Int8ToByte(resp.SBuffer), &output); err != nil {
		return output, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range resp.Status {
			_status[k] = v
		}
	}

	return output, nil
}

// VipPage is client rpc method as defined
func (obj *Sys) VipPage(input ReqCoSysVip, _opt ...map[string]string) (output ResCoSysVip, err error) {
	ctx := context.Background()
	return obj.VipPageWithContext(ctx, input, _opt...)
}

// VipPageWithContext is client rpc method as defined
func (obj *Sys) VipPageWithContext(ctx context.Context, input ReqCoSysVip, _opt ...map[string]string) (output ResCoSysVip, err error) {
	var inputMarshal []byte
	inputMarshal, err = proto.Marshal(&input)
	if err != nil {
		return output, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}

	resp := new(requestf.ResponsePacket)

	err = obj.s.Tars_invoke(ctx, 0, "VipPage", inputMarshal, _status, _context, resp)
	if err != nil {
		return output, err
	}
	if err = proto.Unmarshal(tools.Int8ToByte(resp.SBuffer), &output); err != nil {
		return output, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range resp.Status {
			_status[k] = v
		}
	}

	return output, nil
}

// VipData is client rpc method as defined
func (obj *Sys) VipData(input CoSysVip, _opt ...map[string]string) (output CoSysVip, err error) {
	ctx := context.Background()
	return obj.VipDataWithContext(ctx, input, _opt...)
}

// VipDataWithContext is client rpc method as defined
func (obj *Sys) VipDataWithContext(ctx context.Context, input CoSysVip, _opt ...map[string]string) (output CoSysVip, err error) {
	var inputMarshal []byte
	inputMarshal, err = proto.Marshal(&input)
	if err != nil {
		return output, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}

	resp := new(requestf.ResponsePacket)

	err = obj.s.Tars_invoke(ctx, 0, "VipData", inputMarshal, _status, _context, resp)
	if err != nil {
		return output, err
	}
	if err = proto.Unmarshal(tools.Int8ToByte(resp.SBuffer), &output); err != nil {
		return output, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range resp.Status {
			_status[k] = v
		}
	}

	return output, nil
}

// VipSave is client rpc method as defined
func (obj *Sys) VipSave(input CoSysVip, _opt ...map[string]string) (output Result, err error) {
	ctx := context.Background()
	return obj.VipSaveWithContext(ctx, input, _opt...)
}

// VipSaveWithContext is client rpc method as defined
func (obj *Sys) VipSaveWithContext(ctx context.Context, input CoSysVip, _opt ...map[string]string) (output Result, err error) {
	var inputMarshal []byte
	inputMarshal, err = proto.Marshal(&input)
	if err != nil {
		return output, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}

	resp := new(requestf.ResponsePacket)

	err = obj.s.Tars_invoke(ctx, 0, "VipSave", inputMarshal, _status, _context, resp)
	if err != nil {
		return output, err
	}
	if err = proto.Unmarshal(tools.Int8ToByte(resp.SBuffer), &output); err != nil {
		return output, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range resp.Status {
			_status[k] = v
		}
	}

	return output, nil
}

// VipDelete is client rpc method as defined
func (obj *Sys) VipDelete(input CoSysVip, _opt ...map[string]string) (output Result, err error) {
	ctx := context.Background()
	return obj.VipDeleteWithContext(ctx, input, _opt...)
}

// VipDeleteWithContext is client rpc method as defined
func (obj *Sys) VipDeleteWithContext(ctx context.Context, input CoSysVip, _opt ...map[string]string) (output Result, err error) {
	var inputMarshal []byte
	inputMarshal, err = proto.Marshal(&input)
	if err != nil {
		return output, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}

	resp := new(requestf.ResponsePacket)

	err = obj.s.Tars_invoke(ctx, 0, "VipDelete", inputMarshal, _status, _context, resp)
	if err != nil {
		return output, err
	}
	if err = proto.Unmarshal(tools.Int8ToByte(resp.SBuffer), &output); err != nil {
		return output, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range resp.Status {
			_status[k] = v
		}
	}

	return output, nil
}

// BenefitPage is client rpc method as defined
func (obj *Sys) BenefitPage(input ReqCoSysBenefit, _opt ...map[string]string) (output ResCoSysBenefit, err error) {
	ctx := context.Background()
	return obj.BenefitPageWithContext(ctx, input, _opt...)
}

// BenefitPageWithContext is client rpc method as defined
func (obj *Sys) BenefitPageWithContext(ctx context.Context, input ReqCoSysBenefit, _opt ...map[string]string) (output ResCoSysBenefit, err error) {
	var inputMarshal []byte
	inputMarshal, err = proto.Marshal(&input)
	if err != nil {
		return output, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}

	resp := new(requestf.ResponsePacket)

	err = obj.s.Tars_invoke(ctx, 0, "BenefitPage", inputMarshal, _status, _context, resp)
	if err != nil {
		return output, err
	}
	if err = proto.Unmarshal(tools.Int8ToByte(resp.SBuffer), &output); err != nil {
		return output, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range resp.Status {
			_status[k] = v
		}
	}

	return output, nil
}

// BenefitData is client rpc method as defined
func (obj *Sys) BenefitData(input CoSysBenefit, _opt ...map[string]string) (output CoSysBenefit, err error) {
	ctx := context.Background()
	return obj.BenefitDataWithContext(ctx, input, _opt...)
}

// BenefitDataWithContext is client rpc method as defined
func (obj *Sys) BenefitDataWithContext(ctx context.Context, input CoSysBenefit, _opt ...map[string]string) (output CoSysBenefit, err error) {
	var inputMarshal []byte
	inputMarshal, err = proto.Marshal(&input)
	if err != nil {
		return output, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}

	resp := new(requestf.ResponsePacket)

	err = obj.s.Tars_invoke(ctx, 0, "BenefitData", inputMarshal, _status, _context, resp)
	if err != nil {
		return output, err
	}
	if err = proto.Unmarshal(tools.Int8ToByte(resp.SBuffer), &output); err != nil {
		return output, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range resp.Status {
			_status[k] = v
		}
	}

	return output, nil
}

// BenefitSave is client rpc method as defined
func (obj *Sys) BenefitSave(input CoSysBenefit, _opt ...map[string]string) (output CoSysBenefit, err error) {
	ctx := context.Background()
	return obj.BenefitSaveWithContext(ctx, input, _opt...)
}

// BenefitSaveWithContext is client rpc method as defined
func (obj *Sys) BenefitSaveWithContext(ctx context.Context, input CoSysBenefit, _opt ...map[string]string) (output CoSysBenefit, err error) {
	var inputMarshal []byte
	inputMarshal, err = proto.Marshal(&input)
	if err != nil {
		return output, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}

	resp := new(requestf.ResponsePacket)

	err = obj.s.Tars_invoke(ctx, 0, "BenefitSave", inputMarshal, _status, _context, resp)
	if err != nil {
		return output, err
	}
	if err = proto.Unmarshal(tools.Int8ToByte(resp.SBuffer), &output); err != nil {
		return output, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range resp.Status {
			_status[k] = v
		}
	}

	return output, nil
}

// BenefitDelete is client rpc method as defined
func (obj *Sys) BenefitDelete(input CoSysBenefit, _opt ...map[string]string) (output Result, err error) {
	ctx := context.Background()
	return obj.BenefitDeleteWithContext(ctx, input, _opt...)
}

// BenefitDeleteWithContext is client rpc method as defined
func (obj *Sys) BenefitDeleteWithContext(ctx context.Context, input CoSysBenefit, _opt ...map[string]string) (output Result, err error) {
	var inputMarshal []byte
	inputMarshal, err = proto.Marshal(&input)
	if err != nil {
		return output, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}

	resp := new(requestf.ResponsePacket)

	err = obj.s.Tars_invoke(ctx, 0, "BenefitDelete", inputMarshal, _status, _context, resp)
	if err != nil {
		return output, err
	}
	if err = proto.Unmarshal(tools.Int8ToByte(resp.SBuffer), &output); err != nil {
		return output, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range resp.Status {
			_status[k] = v
		}
	}

	return output, nil
}

// BenefitClassAll is client rpc method as defined
func (obj *Sys) BenefitClassAll(input ResultEmpty, _opt ...map[string]string) (output ResCoSysBenefitClass, err error) {
	ctx := context.Background()
	return obj.BenefitClassAllWithContext(ctx, input, _opt...)
}

// BenefitClassAllWithContext is client rpc method as defined
func (obj *Sys) BenefitClassAllWithContext(ctx context.Context, input ResultEmpty, _opt ...map[string]string) (output ResCoSysBenefitClass, err error) {
	var inputMarshal []byte
	inputMarshal, err = proto.Marshal(&input)
	if err != nil {
		return output, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}

	resp := new(requestf.ResponsePacket)

	err = obj.s.Tars_invoke(ctx, 0, "BenefitClassAll", inputMarshal, _status, _context, resp)
	if err != nil {
		return output, err
	}
	if err = proto.Unmarshal(tools.Int8ToByte(resp.SBuffer), &output); err != nil {
		return output, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range resp.Status {
			_status[k] = v
		}
	}

	return output, nil
}

// BenefitClassData is client rpc method as defined
func (obj *Sys) BenefitClassData(input CoSysBenefitClass, _opt ...map[string]string) (output CoSysBenefitClass, err error) {
	ctx := context.Background()
	return obj.BenefitClassDataWithContext(ctx, input, _opt...)
}

// BenefitClassDataWithContext is client rpc method as defined
func (obj *Sys) BenefitClassDataWithContext(ctx context.Context, input CoSysBenefitClass, _opt ...map[string]string) (output CoSysBenefitClass, err error) {
	var inputMarshal []byte
	inputMarshal, err = proto.Marshal(&input)
	if err != nil {
		return output, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}

	resp := new(requestf.ResponsePacket)

	err = obj.s.Tars_invoke(ctx, 0, "BenefitClassData", inputMarshal, _status, _context, resp)
	if err != nil {
		return output, err
	}
	if err = proto.Unmarshal(tools.Int8ToByte(resp.SBuffer), &output); err != nil {
		return output, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range resp.Status {
			_status[k] = v
		}
	}

	return output, nil
}

// BenefitClassSave is client rpc method as defined
func (obj *Sys) BenefitClassSave(input CoSysBenefitClass, _opt ...map[string]string) (output CoSysBenefitClass, err error) {
	ctx := context.Background()
	return obj.BenefitClassSaveWithContext(ctx, input, _opt...)
}

// BenefitClassSaveWithContext is client rpc method as defined
func (obj *Sys) BenefitClassSaveWithContext(ctx context.Context, input CoSysBenefitClass, _opt ...map[string]string) (output CoSysBenefitClass, err error) {
	var inputMarshal []byte
	inputMarshal, err = proto.Marshal(&input)
	if err != nil {
		return output, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}

	resp := new(requestf.ResponsePacket)

	err = obj.s.Tars_invoke(ctx, 0, "BenefitClassSave", inputMarshal, _status, _context, resp)
	if err != nil {
		return output, err
	}
	if err = proto.Unmarshal(tools.Int8ToByte(resp.SBuffer), &output); err != nil {
		return output, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range resp.Status {
			_status[k] = v
		}
	}

	return output, nil
}

// BenefitClassDelete is client rpc method as defined
func (obj *Sys) BenefitClassDelete(input CoSysBenefitClass, _opt ...map[string]string) (output Result, err error) {
	ctx := context.Background()
	return obj.BenefitClassDeleteWithContext(ctx, input, _opt...)
}

// BenefitClassDeleteWithContext is client rpc method as defined
func (obj *Sys) BenefitClassDeleteWithContext(ctx context.Context, input CoSysBenefitClass, _opt ...map[string]string) (output Result, err error) {
	var inputMarshal []byte
	inputMarshal, err = proto.Marshal(&input)
	if err != nil {
		return output, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}

	resp := new(requestf.ResponsePacket)

	err = obj.s.Tars_invoke(ctx, 0, "BenefitClassDelete", inputMarshal, _status, _context, resp)
	if err != nil {
		return output, err
	}
	if err = proto.Unmarshal(tools.Int8ToByte(resp.SBuffer), &output); err != nil {
		return output, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range resp.Status {
			_status[k] = v
		}
	}

	return output, nil
}

// ModulePage is client rpc method as defined
func (obj *Sys) ModulePage(input ReqCoSysModule, _opt ...map[string]string) (output ResCoSysModule, err error) {
	ctx := context.Background()
	return obj.ModulePageWithContext(ctx, input, _opt...)
}

// ModulePageWithContext is client rpc method as defined
func (obj *Sys) ModulePageWithContext(ctx context.Context, input ReqCoSysModule, _opt ...map[string]string) (output ResCoSysModule, err error) {
	var inputMarshal []byte
	inputMarshal, err = proto.Marshal(&input)
	if err != nil {
		return output, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}

	resp := new(requestf.ResponsePacket)

	err = obj.s.Tars_invoke(ctx, 0, "ModulePage", inputMarshal, _status, _context, resp)
	if err != nil {
		return output, err
	}
	if err = proto.Unmarshal(tools.Int8ToByte(resp.SBuffer), &output); err != nil {
		return output, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range resp.Status {
			_status[k] = v
		}
	}

	return output, nil
}

// ModuleData is client rpc method as defined
func (obj *Sys) ModuleData(input CoSysModule, _opt ...map[string]string) (output CoSysModule, err error) {
	ctx := context.Background()
	return obj.ModuleDataWithContext(ctx, input, _opt...)
}

// ModuleDataWithContext is client rpc method as defined
func (obj *Sys) ModuleDataWithContext(ctx context.Context, input CoSysModule, _opt ...map[string]string) (output CoSysModule, err error) {
	var inputMarshal []byte
	inputMarshal, err = proto.Marshal(&input)
	if err != nil {
		return output, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}

	resp := new(requestf.ResponsePacket)

	err = obj.s.Tars_invoke(ctx, 0, "ModuleData", inputMarshal, _status, _context, resp)
	if err != nil {
		return output, err
	}
	if err = proto.Unmarshal(tools.Int8ToByte(resp.SBuffer), &output); err != nil {
		return output, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range resp.Status {
			_status[k] = v
		}
	}

	return output, nil
}

// ModuleSave is client rpc method as defined
func (obj *Sys) ModuleSave(input CoSysModule, _opt ...map[string]string) (output CoSysModule, err error) {
	ctx := context.Background()
	return obj.ModuleSaveWithContext(ctx, input, _opt...)
}

// ModuleSaveWithContext is client rpc method as defined
func (obj *Sys) ModuleSaveWithContext(ctx context.Context, input CoSysModule, _opt ...map[string]string) (output CoSysModule, err error) {
	var inputMarshal []byte
	inputMarshal, err = proto.Marshal(&input)
	if err != nil {
		return output, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}

	resp := new(requestf.ResponsePacket)

	err = obj.s.Tars_invoke(ctx, 0, "ModuleSave", inputMarshal, _status, _context, resp)
	if err != nil {
		return output, err
	}
	if err = proto.Unmarshal(tools.Int8ToByte(resp.SBuffer), &output); err != nil {
		return output, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range resp.Status {
			_status[k] = v
		}
	}

	return output, nil
}

// ModuleDelete is client rpc method as defined
func (obj *Sys) ModuleDelete(input CoSysModule, _opt ...map[string]string) (output Result, err error) {
	ctx := context.Background()
	return obj.ModuleDeleteWithContext(ctx, input, _opt...)
}

// ModuleDeleteWithContext is client rpc method as defined
func (obj *Sys) ModuleDeleteWithContext(ctx context.Context, input CoSysModule, _opt ...map[string]string) (output Result, err error) {
	var inputMarshal []byte
	inputMarshal, err = proto.Marshal(&input)
	if err != nil {
		return output, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}

	resp := new(requestf.ResponsePacket)

	err = obj.s.Tars_invoke(ctx, 0, "ModuleDelete", inputMarshal, _status, _context, resp)
	if err != nil {
		return output, err
	}
	if err = proto.Unmarshal(tools.Int8ToByte(resp.SBuffer), &output); err != nil {
		return output, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range resp.Status {
			_status[k] = v
		}
	}

	return output, nil
}

// ModuleClassPage is client rpc method as defined
func (obj *Sys) ModuleClassPage(input PageInfo, _opt ...map[string]string) (output ResCoSysModuleClass, err error) {
	ctx := context.Background()
	return obj.ModuleClassPageWithContext(ctx, input, _opt...)
}

// ModuleClassPageWithContext is client rpc method as defined
func (obj *Sys) ModuleClassPageWithContext(ctx context.Context, input PageInfo, _opt ...map[string]string) (output ResCoSysModuleClass, err error) {
	var inputMarshal []byte
	inputMarshal, err = proto.Marshal(&input)
	if err != nil {
		return output, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}

	resp := new(requestf.ResponsePacket)

	err = obj.s.Tars_invoke(ctx, 0, "ModuleClassPage", inputMarshal, _status, _context, resp)
	if err != nil {
		return output, err
	}
	if err = proto.Unmarshal(tools.Int8ToByte(resp.SBuffer), &output); err != nil {
		return output, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range resp.Status {
			_status[k] = v
		}
	}

	return output, nil
}

// ModuleClassData is client rpc method as defined
func (obj *Sys) ModuleClassData(input CoSysModuleClass, _opt ...map[string]string) (output CoSysModuleClass, err error) {
	ctx := context.Background()
	return obj.ModuleClassDataWithContext(ctx, input, _opt...)
}

// ModuleClassDataWithContext is client rpc method as defined
func (obj *Sys) ModuleClassDataWithContext(ctx context.Context, input CoSysModuleClass, _opt ...map[string]string) (output CoSysModuleClass, err error) {
	var inputMarshal []byte
	inputMarshal, err = proto.Marshal(&input)
	if err != nil {
		return output, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}

	resp := new(requestf.ResponsePacket)

	err = obj.s.Tars_invoke(ctx, 0, "ModuleClassData", inputMarshal, _status, _context, resp)
	if err != nil {
		return output, err
	}
	if err = proto.Unmarshal(tools.Int8ToByte(resp.SBuffer), &output); err != nil {
		return output, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range resp.Status {
			_status[k] = v
		}
	}

	return output, nil
}

// ModuleClassSave is client rpc method as defined
func (obj *Sys) ModuleClassSave(input CoSysModuleClass, _opt ...map[string]string) (output CoSysModuleClass, err error) {
	ctx := context.Background()
	return obj.ModuleClassSaveWithContext(ctx, input, _opt...)
}

// ModuleClassSaveWithContext is client rpc method as defined
func (obj *Sys) ModuleClassSaveWithContext(ctx context.Context, input CoSysModuleClass, _opt ...map[string]string) (output CoSysModuleClass, err error) {
	var inputMarshal []byte
	inputMarshal, err = proto.Marshal(&input)
	if err != nil {
		return output, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}

	resp := new(requestf.ResponsePacket)

	err = obj.s.Tars_invoke(ctx, 0, "ModuleClassSave", inputMarshal, _status, _context, resp)
	if err != nil {
		return output, err
	}
	if err = proto.Unmarshal(tools.Int8ToByte(resp.SBuffer), &output); err != nil {
		return output, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range resp.Status {
			_status[k] = v
		}
	}

	return output, nil
}

// ModuleClassDelete is client rpc method as defined
func (obj *Sys) ModuleClassDelete(input CoSysModuleClass, _opt ...map[string]string) (output Result, err error) {
	ctx := context.Background()
	return obj.ModuleClassDeleteWithContext(ctx, input, _opt...)
}

// ModuleClassDeleteWithContext is client rpc method as defined
func (obj *Sys) ModuleClassDeleteWithContext(ctx context.Context, input CoSysModuleClass, _opt ...map[string]string) (output Result, err error) {
	var inputMarshal []byte
	inputMarshal, err = proto.Marshal(&input)
	if err != nil {
		return output, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}

	resp := new(requestf.ResponsePacket)

	err = obj.s.Tars_invoke(ctx, 0, "ModuleClassDelete", inputMarshal, _status, _context, resp)
	if err != nil {
		return output, err
	}
	if err = proto.Unmarshal(tools.Int8ToByte(resp.SBuffer), &output); err != nil {
		return output, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range resp.Status {
			_status[k] = v
		}
	}

	return output, nil
}

// LimitPage is client rpc method as defined
func (obj *Sys) LimitPage(input ReqCoSysLimit, _opt ...map[string]string) (output ResCoSysLimit, err error) {
	ctx := context.Background()
	return obj.LimitPageWithContext(ctx, input, _opt...)
}

// LimitPageWithContext is client rpc method as defined
func (obj *Sys) LimitPageWithContext(ctx context.Context, input ReqCoSysLimit, _opt ...map[string]string) (output ResCoSysLimit, err error) {
	var inputMarshal []byte
	inputMarshal, err = proto.Marshal(&input)
	if err != nil {
		return output, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}

	resp := new(requestf.ResponsePacket)

	err = obj.s.Tars_invoke(ctx, 0, "LimitPage", inputMarshal, _status, _context, resp)
	if err != nil {
		return output, err
	}
	if err = proto.Unmarshal(tools.Int8ToByte(resp.SBuffer), &output); err != nil {
		return output, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range resp.Status {
			_status[k] = v
		}
	}

	return output, nil
}

// LimitData is client rpc method as defined
func (obj *Sys) LimitData(input CoSysLimit, _opt ...map[string]string) (output CoSysLimit, err error) {
	ctx := context.Background()
	return obj.LimitDataWithContext(ctx, input, _opt...)
}

// LimitDataWithContext is client rpc method as defined
func (obj *Sys) LimitDataWithContext(ctx context.Context, input CoSysLimit, _opt ...map[string]string) (output CoSysLimit, err error) {
	var inputMarshal []byte
	inputMarshal, err = proto.Marshal(&input)
	if err != nil {
		return output, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}

	resp := new(requestf.ResponsePacket)

	err = obj.s.Tars_invoke(ctx, 0, "LimitData", inputMarshal, _status, _context, resp)
	if err != nil {
		return output, err
	}
	if err = proto.Unmarshal(tools.Int8ToByte(resp.SBuffer), &output); err != nil {
		return output, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range resp.Status {
			_status[k] = v
		}
	}

	return output, nil
}

// LimitSave is client rpc method as defined
func (obj *Sys) LimitSave(input CoSysLimit, _opt ...map[string]string) (output CoSysLimit, err error) {
	ctx := context.Background()
	return obj.LimitSaveWithContext(ctx, input, _opt...)
}

// LimitSaveWithContext is client rpc method as defined
func (obj *Sys) LimitSaveWithContext(ctx context.Context, input CoSysLimit, _opt ...map[string]string) (output CoSysLimit, err error) {
	var inputMarshal []byte
	inputMarshal, err = proto.Marshal(&input)
	if err != nil {
		return output, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}

	resp := new(requestf.ResponsePacket)

	err = obj.s.Tars_invoke(ctx, 0, "LimitSave", inputMarshal, _status, _context, resp)
	if err != nil {
		return output, err
	}
	if err = proto.Unmarshal(tools.Int8ToByte(resp.SBuffer), &output); err != nil {
		return output, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range resp.Status {
			_status[k] = v
		}
	}

	return output, nil
}

// LimitDelete is client rpc method as defined
func (obj *Sys) LimitDelete(input CoSysLimit, _opt ...map[string]string) (output Result, err error) {
	ctx := context.Background()
	return obj.LimitDeleteWithContext(ctx, input, _opt...)
}

// LimitDeleteWithContext is client rpc method as defined
func (obj *Sys) LimitDeleteWithContext(ctx context.Context, input CoSysLimit, _opt ...map[string]string) (output Result, err error) {
	var inputMarshal []byte
	inputMarshal, err = proto.Marshal(&input)
	if err != nil {
		return output, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}

	resp := new(requestf.ResponsePacket)

	err = obj.s.Tars_invoke(ctx, 0, "LimitDelete", inputMarshal, _status, _context, resp)
	if err != nil {
		return output, err
	}
	if err = proto.Unmarshal(tools.Int8ToByte(resp.SBuffer), &output); err != nil {
		return output, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range resp.Status {
			_status[k] = v
		}
	}

	return output, nil
}

// This following code was generated by tarsrpc
// Gernerated from serverCo_sys.proto
type User struct {
	s model.Servant
}

//SetServant is required by the servant interface.
func (obj *User) SetServant(s model.Servant) {
	obj.s = s
}

//AddServant is required by the servant interface
func (obj *User) AddServant(imp impUser, objStr string) {
	tars.AddServant(obj, imp, objStr)
}

////AddServant adds servant  for the service with context
func (obj *User) AddServantWithContext(imp impUserWithContext, objStr string) {
	tars.AddServantWithContext(obj, imp, objStr)
}

//TarsSetTimeout is required by the servant interface. t is the timeout in ms.
func (obj *User) TarsSetTimeout(t int) {
	obj.s.TarsSetTimeout(t)
}

//TarsSetProtocol is required by the servant interface. t is the protocol.
func (obj *User) TarsSetProtocol(p model.Protocol) {
	obj.s.TarsSetProtocol(p)
}

type impUser interface {
	PermissionsByRequest(input Permissions) (output Result, err error)
	CoAdminList(input ReqId) (output Res_User_CoUser, err error)
	CoCustomerList(input ReqId) (output Res_User_CoUser, err error)
	CoUserRoles(input Uid) (output ResCoMenu, err error)
	UserPage(input ReqCoUser) (output ResCoUser, err error)
	UserGet(input ReqId) (output CoUser, err error)
	UserUp(input CoUser) (output CoUser, err error)
	UserDelete(input CoUser) (output Result, err error)
	UserDataGet(input CoUserData) (output CoUserData, err error)
	UserDataUp(input CoUserData) (output CoUserData, err error)
	UserInfoGet(input Uid) (output Result, err error)
	UserContactUp(input ReqUserContactData) (output Result, err error)
	UserAddressPage(input ReqCoUserAddress) (output ResCoUserAddress, err error)
	UserAddressData(input CoUserAddress) (output CoUserAddress, err error)
	UserAddressSave(input CoUserAddress) (output CoUserAddress, err error)
	UserAddressDelete(input CoUserAddress) (output Result, err error)
	UserChainPage(input ReqCoUserChain) (output ResCoUserChain, err error)
	UserChainData(input CoUserChain) (output CoUserChain, err error)
	UserChainSave(input CoUserChain) (output CoUserChain, err error)
	UserChainDelete(input CoUserChain) (output Result, err error)
	UserMenuAll(input Uid) (output ResCoMenu, err error)
	UserGroupRolePage(input ReqCoUserGroupRole) (output ResCoUserGroupRole, err error)
	UserGroupRoleData(input CoUserGroupRole) (output CoUserGroupRole, err error)
	UserGroupRoleSave(input CoUserGroupRole) (output CoUserGroupRole, err error)
	UserGroupRoleDelete(input CoUserGroupRole) (output Result, err error)
	UserCustomerPage(input ReqCoUserCustomer) (output ResCoUserCustomer, err error)
	UserCustomerData(input CoUserCustomer) (output CoUserCustomer, err error)
	UserCustomerSave(input CoUserCustomer) (output CoUserCustomer, err error)
	UserCustomerDelete(input CoUserCustomer) (output Result, err error)
	UserOrderPage(input ReqCoUserOrder) (output ResCoUserOrder, err error)
	UserOrderData(input CoUserOrder) (output CoUserOrder, err error)
	UserOrderUp(input CoUserOrder) (output CoUserOrder, err error)
	UserOrderDelete(input CoUserOrder) (output Result, err error)
	UserPointsSetInfo(input CoUserPoints) (output CoUserPoints, err error)
	UserPointsSetUpdate(input CoUserPoints) (output CoUserPoints, err error)
	UserPointsRuleList(input ReqCoUserPointsRule) (output ResCoUserPointsRule, err error)
	UserPointsRuleData(input CoUserPointsRule) (output CoUserPointsRule, err error)
	UserPointsRuleSave(input CoUserPointsRule) (output CoUserPointsRule, err error)
	UserPointsRuleDelete(input CoUserPointsRule) (output Result, err error)
	UserBenefitOwn(input Uid) (output ResUserBenefitOwn, err error)
	UserBenefitDiyPage(input ReqCoUserBenefitDiy) (output ResCoUserBenefitDiy, err error)
	UserBenefitDiyData(input CoUserBenefitDiy) (output CoUserBenefitDiy, err error)
	UserBenefitDiySave(input CoUserBenefitDiy) (output CoUserBenefitDiy, err error)
	UserBenefitDiyDelete(input CoUserBenefitDiy) (output Result, err error)
	UserBenefitPage(input ReqCoUserBenefit) (output Result, err error)
	UserBenefitData(input CoUserBenefit) (output Result, err error)
	UserBenefitSave(input SaveCoUserBenefit) (output Result, err error)
	UserBenefitDelete(input CoUserBenefit) (output Result, err error)
	UserStaffPage(input ReqCoUserStaff) (output ResCoUserStaff, err error)
	UserStaffData(input CoUserStaff) (output CoUserStaff, err error)
	UserStaffSave(input CoUserStaff) (output CoUserStaff, err error)
	UserStaffDelete(input CoUserStaff) (output Result, err error)
	UserStorePage(input ReqCoUserStore) (output ResCoUserStore, err error)
	UserStoreData(input CoUserStore) (output CoUserStore, err error)
	UserStoreSave(input CoUserStore) (output CoUserStore, err error)
	UserStoreDelete(input CoUserStore) (output Result, err error)
	UserSettingInfo(input CoUserSetting) (output Result, err error)
	UserSettingSave(input SaveCoUserSetting) (output Result, err error)
	UserSettingValue(input ResCoUserSettingValue) (output Result, err error)
	UserDecoFeature(input ReqCoUserDecoFeature) (output Result, err error)
	DecoModuleList(input ReqCoUserDecoUsePos) (output ResCoUserDecoModuleList, err error)
	DecoModuleInfo(input IdCoId) (output Result, err error)
	DecoModuleData(input CoUserFeature) (output Result, err error)
	DecoSave(input CoUserFeature) (output CoUserFeature, err error)
	DecoOperate(input ReqCoUserDecoOperate) (output Result, err error)
	DecoStyle(input ReqCoUserDecoStyle) (output Result, err error)
	DecoShopCommonInfo(input CoUserShopCommon) (output Result, err error)
	DecoShopCommonSave(input CoUserShopCommon) (output Result, err error)
	DecoShopPageInit(input CoUserShopInit) (output Result, err error)
	FeatureConfig(input CoFeatureConfig) (output Result, err error)
	FeatureData(input CoFeatureConfig) (output Result, err error)
	UserVipPage(input ReqCoUserVip) (output ResCoUserVip, err error)
	UserVipData(input CoUserVip) (output CoUserVip, err error)
	UserVipSave(input CoUserVip) (output CoUserVip, err error)
	UserVipDelete(input CoUserVip) (output Result, err error)
	SubscribeChoose(input ReqCoSysVipChoose) (output ResCoSysVip, err error)
	SubscribeItemId(input IdCoId) (output Result, err error)
	SubscribeVipPage(input ReqCoUserVip) (output Result, err error)
}

type impUserWithContext interface {
	PermissionsByRequest(ctx context.Context, input Permissions) (output Result, err error)
	CoAdminList(ctx context.Context, input ReqId) (output Res_User_CoUser, err error)
	CoCustomerList(ctx context.Context, input ReqId) (output Res_User_CoUser, err error)
	CoUserRoles(ctx context.Context, input Uid) (output ResCoMenu, err error)
	UserPage(ctx context.Context, input ReqCoUser) (output ResCoUser, err error)
	UserGet(ctx context.Context, input ReqId) (output CoUser, err error)
	UserUp(ctx context.Context, input CoUser) (output CoUser, err error)
	UserDelete(ctx context.Context, input CoUser) (output Result, err error)
	UserDataGet(ctx context.Context, input CoUserData) (output CoUserData, err error)
	UserDataUp(ctx context.Context, input CoUserData) (output CoUserData, err error)
	UserInfoGet(ctx context.Context, input Uid) (output Result, err error)
	UserContactUp(ctx context.Context, input ReqUserContactData) (output Result, err error)
	UserAddressPage(ctx context.Context, input ReqCoUserAddress) (output ResCoUserAddress, err error)
	UserAddressData(ctx context.Context, input CoUserAddress) (output CoUserAddress, err error)
	UserAddressSave(ctx context.Context, input CoUserAddress) (output CoUserAddress, err error)
	UserAddressDelete(ctx context.Context, input CoUserAddress) (output Result, err error)
	UserChainPage(ctx context.Context, input ReqCoUserChain) (output ResCoUserChain, err error)
	UserChainData(ctx context.Context, input CoUserChain) (output CoUserChain, err error)
	UserChainSave(ctx context.Context, input CoUserChain) (output CoUserChain, err error)
	UserChainDelete(ctx context.Context, input CoUserChain) (output Result, err error)
	UserMenuAll(ctx context.Context, input Uid) (output ResCoMenu, err error)
	UserGroupRolePage(ctx context.Context, input ReqCoUserGroupRole) (output ResCoUserGroupRole, err error)
	UserGroupRoleData(ctx context.Context, input CoUserGroupRole) (output CoUserGroupRole, err error)
	UserGroupRoleSave(ctx context.Context, input CoUserGroupRole) (output CoUserGroupRole, err error)
	UserGroupRoleDelete(ctx context.Context, input CoUserGroupRole) (output Result, err error)
	UserCustomerPage(ctx context.Context, input ReqCoUserCustomer) (output ResCoUserCustomer, err error)
	UserCustomerData(ctx context.Context, input CoUserCustomer) (output CoUserCustomer, err error)
	UserCustomerSave(ctx context.Context, input CoUserCustomer) (output CoUserCustomer, err error)
	UserCustomerDelete(ctx context.Context, input CoUserCustomer) (output Result, err error)
	UserOrderPage(ctx context.Context, input ReqCoUserOrder) (output ResCoUserOrder, err error)
	UserOrderData(ctx context.Context, input CoUserOrder) (output CoUserOrder, err error)
	UserOrderUp(ctx context.Context, input CoUserOrder) (output CoUserOrder, err error)
	UserOrderDelete(ctx context.Context, input CoUserOrder) (output Result, err error)
	UserPointsSetInfo(ctx context.Context, input CoUserPoints) (output CoUserPoints, err error)
	UserPointsSetUpdate(ctx context.Context, input CoUserPoints) (output CoUserPoints, err error)
	UserPointsRuleList(ctx context.Context, input ReqCoUserPointsRule) (output ResCoUserPointsRule, err error)
	UserPointsRuleData(ctx context.Context, input CoUserPointsRule) (output CoUserPointsRule, err error)
	UserPointsRuleSave(ctx context.Context, input CoUserPointsRule) (output CoUserPointsRule, err error)
	UserPointsRuleDelete(ctx context.Context, input CoUserPointsRule) (output Result, err error)
	UserBenefitOwn(ctx context.Context, input Uid) (output ResUserBenefitOwn, err error)
	UserBenefitDiyPage(ctx context.Context, input ReqCoUserBenefitDiy) (output ResCoUserBenefitDiy, err error)
	UserBenefitDiyData(ctx context.Context, input CoUserBenefitDiy) (output CoUserBenefitDiy, err error)
	UserBenefitDiySave(ctx context.Context, input CoUserBenefitDiy) (output CoUserBenefitDiy, err error)
	UserBenefitDiyDelete(ctx context.Context, input CoUserBenefitDiy) (output Result, err error)
	UserBenefitPage(ctx context.Context, input ReqCoUserBenefit) (output Result, err error)
	UserBenefitData(ctx context.Context, input CoUserBenefit) (output Result, err error)
	UserBenefitSave(ctx context.Context, input SaveCoUserBenefit) (output Result, err error)
	UserBenefitDelete(ctx context.Context, input CoUserBenefit) (output Result, err error)
	UserStaffPage(ctx context.Context, input ReqCoUserStaff) (output ResCoUserStaff, err error)
	UserStaffData(ctx context.Context, input CoUserStaff) (output CoUserStaff, err error)
	UserStaffSave(ctx context.Context, input CoUserStaff) (output CoUserStaff, err error)
	UserStaffDelete(ctx context.Context, input CoUserStaff) (output Result, err error)
	UserStorePage(ctx context.Context, input ReqCoUserStore) (output ResCoUserStore, err error)
	UserStoreData(ctx context.Context, input CoUserStore) (output CoUserStore, err error)
	UserStoreSave(ctx context.Context, input CoUserStore) (output CoUserStore, err error)
	UserStoreDelete(ctx context.Context, input CoUserStore) (output Result, err error)
	UserSettingInfo(ctx context.Context, input CoUserSetting) (output Result, err error)
	UserSettingSave(ctx context.Context, input SaveCoUserSetting) (output Result, err error)
	UserSettingValue(ctx context.Context, input ResCoUserSettingValue) (output Result, err error)
	UserDecoFeature(ctx context.Context, input ReqCoUserDecoFeature) (output Result, err error)
	DecoModuleList(ctx context.Context, input ReqCoUserDecoUsePos) (output ResCoUserDecoModuleList, err error)
	DecoModuleInfo(ctx context.Context, input IdCoId) (output Result, err error)
	DecoModuleData(ctx context.Context, input CoUserFeature) (output Result, err error)
	DecoSave(ctx context.Context, input CoUserFeature) (output CoUserFeature, err error)
	DecoOperate(ctx context.Context, input ReqCoUserDecoOperate) (output Result, err error)
	DecoStyle(ctx context.Context, input ReqCoUserDecoStyle) (output Result, err error)
	DecoShopCommonInfo(ctx context.Context, input CoUserShopCommon) (output Result, err error)
	DecoShopCommonSave(ctx context.Context, input CoUserShopCommon) (output Result, err error)
	DecoShopPageInit(ctx context.Context, input CoUserShopInit) (output Result, err error)
	FeatureConfig(ctx context.Context, input CoFeatureConfig) (output Result, err error)
	FeatureData(ctx context.Context, input CoFeatureConfig) (output Result, err error)
	UserVipPage(ctx context.Context, input ReqCoUserVip) (output ResCoUserVip, err error)
	UserVipData(ctx context.Context, input CoUserVip) (output CoUserVip, err error)
	UserVipSave(ctx context.Context, input CoUserVip) (output CoUserVip, err error)
	UserVipDelete(ctx context.Context, input CoUserVip) (output Result, err error)
	SubscribeChoose(ctx context.Context, input ReqCoSysVipChoose) (output ResCoSysVip, err error)
	SubscribeItemId(ctx context.Context, input IdCoId) (output Result, err error)
	SubscribeVipPage(ctx context.Context, input ReqCoUserVip) (output Result, err error)
}

//Dispatch is used to call the user implement of the defined method.
func (obj *User) Dispatch(ctx context.Context, val interface{}, req *requestf.RequestPacket, resp *requestf.ResponsePacket, withContext bool) (err error) {
	input := tools.Int8ToByte(req.SBuffer)
	var output []byte
	funcName := req.SFuncName
	switch funcName {

	case "PermissionsByRequest":
		inputDefine := Permissions{}
		if err = proto.Unmarshal(input, &inputDefine); err != nil {
			return err
		}
		var res Result
		if withContext == false {
			imp := val.(impUser)
			res, err = imp.PermissionsByRequest(inputDefine)
			if err != nil {
				return err
			}
		} else {
			imp := val.(impUserWithContext)
			res, err = imp.PermissionsByRequest(ctx, inputDefine)
			if err != nil {
				return err
			}
		}
		output, err = proto.Marshal(&res)
		if err != nil {
			return err
		}

	case "CoAdminList":
		inputDefine := ReqId{}
		if err = proto.Unmarshal(input, &inputDefine); err != nil {
			return err
		}
		var res Res_User_CoUser
		if withContext == false {
			imp := val.(impUser)
			res, err = imp.CoAdminList(inputDefine)
			if err != nil {
				return err
			}
		} else {
			imp := val.(impUserWithContext)
			res, err = imp.CoAdminList(ctx, inputDefine)
			if err != nil {
				return err
			}
		}
		output, err = proto.Marshal(&res)
		if err != nil {
			return err
		}

	case "CoCustomerList":
		inputDefine := ReqId{}
		if err = proto.Unmarshal(input, &inputDefine); err != nil {
			return err
		}
		var res Res_User_CoUser
		if withContext == false {
			imp := val.(impUser)
			res, err = imp.CoCustomerList(inputDefine)
			if err != nil {
				return err
			}
		} else {
			imp := val.(impUserWithContext)
			res, err = imp.CoCustomerList(ctx, inputDefine)
			if err != nil {
				return err
			}
		}
		output, err = proto.Marshal(&res)
		if err != nil {
			return err
		}

	case "CoUserRoles":
		inputDefine := Uid{}
		if err = proto.Unmarshal(input, &inputDefine); err != nil {
			return err
		}
		var res ResCoMenu
		if withContext == false {
			imp := val.(impUser)
			res, err = imp.CoUserRoles(inputDefine)
			if err != nil {
				return err
			}
		} else {
			imp := val.(impUserWithContext)
			res, err = imp.CoUserRoles(ctx, inputDefine)
			if err != nil {
				return err
			}
		}
		output, err = proto.Marshal(&res)
		if err != nil {
			return err
		}

	case "UserPage":
		inputDefine := ReqCoUser{}
		if err = proto.Unmarshal(input, &inputDefine); err != nil {
			return err
		}
		var res ResCoUser
		if withContext == false {
			imp := val.(impUser)
			res, err = imp.UserPage(inputDefine)
			if err != nil {
				return err
			}
		} else {
			imp := val.(impUserWithContext)
			res, err = imp.UserPage(ctx, inputDefine)
			if err != nil {
				return err
			}
		}
		output, err = proto.Marshal(&res)
		if err != nil {
			return err
		}

	case "UserGet":
		inputDefine := ReqId{}
		if err = proto.Unmarshal(input, &inputDefine); err != nil {
			return err
		}
		var res CoUser
		if withContext == false {
			imp := val.(impUser)
			res, err = imp.UserGet(inputDefine)
			if err != nil {
				return err
			}
		} else {
			imp := val.(impUserWithContext)
			res, err = imp.UserGet(ctx, inputDefine)
			if err != nil {
				return err
			}
		}
		output, err = proto.Marshal(&res)
		if err != nil {
			return err
		}

	case "UserUp":
		inputDefine := CoUser{}
		if err = proto.Unmarshal(input, &inputDefine); err != nil {
			return err
		}
		var res CoUser
		if withContext == false {
			imp := val.(impUser)
			res, err = imp.UserUp(inputDefine)
			if err != nil {
				return err
			}
		} else {
			imp := val.(impUserWithContext)
			res, err = imp.UserUp(ctx, inputDefine)
			if err != nil {
				return err
			}
		}
		output, err = proto.Marshal(&res)
		if err != nil {
			return err
		}

	case "UserDelete":
		inputDefine := CoUser{}
		if err = proto.Unmarshal(input, &inputDefine); err != nil {
			return err
		}
		var res Result
		if withContext == false {
			imp := val.(impUser)
			res, err = imp.UserDelete(inputDefine)
			if err != nil {
				return err
			}
		} else {
			imp := val.(impUserWithContext)
			res, err = imp.UserDelete(ctx, inputDefine)
			if err != nil {
				return err
			}
		}
		output, err = proto.Marshal(&res)
		if err != nil {
			return err
		}

	case "UserDataGet":
		inputDefine := CoUserData{}
		if err = proto.Unmarshal(input, &inputDefine); err != nil {
			return err
		}
		var res CoUserData
		if withContext == false {
			imp := val.(impUser)
			res, err = imp.UserDataGet(inputDefine)
			if err != nil {
				return err
			}
		} else {
			imp := val.(impUserWithContext)
			res, err = imp.UserDataGet(ctx, inputDefine)
			if err != nil {
				return err
			}
		}
		output, err = proto.Marshal(&res)
		if err != nil {
			return err
		}

	case "UserDataUp":
		inputDefine := CoUserData{}
		if err = proto.Unmarshal(input, &inputDefine); err != nil {
			return err
		}
		var res CoUserData
		if withContext == false {
			imp := val.(impUser)
			res, err = imp.UserDataUp(inputDefine)
			if err != nil {
				return err
			}
		} else {
			imp := val.(impUserWithContext)
			res, err = imp.UserDataUp(ctx, inputDefine)
			if err != nil {
				return err
			}
		}
		output, err = proto.Marshal(&res)
		if err != nil {
			return err
		}

	case "UserInfoGet":
		inputDefine := Uid{}
		if err = proto.Unmarshal(input, &inputDefine); err != nil {
			return err
		}
		var res Result
		if withContext == false {
			imp := val.(impUser)
			res, err = imp.UserInfoGet(inputDefine)
			if err != nil {
				return err
			}
		} else {
			imp := val.(impUserWithContext)
			res, err = imp.UserInfoGet(ctx, inputDefine)
			if err != nil {
				return err
			}
		}
		output, err = proto.Marshal(&res)
		if err != nil {
			return err
		}

	case "UserContactUp":
		inputDefine := ReqUserContactData{}
		if err = proto.Unmarshal(input, &inputDefine); err != nil {
			return err
		}
		var res Result
		if withContext == false {
			imp := val.(impUser)
			res, err = imp.UserContactUp(inputDefine)
			if err != nil {
				return err
			}
		} else {
			imp := val.(impUserWithContext)
			res, err = imp.UserContactUp(ctx, inputDefine)
			if err != nil {
				return err
			}
		}
		output, err = proto.Marshal(&res)
		if err != nil {
			return err
		}

	case "UserAddressPage":
		inputDefine := ReqCoUserAddress{}
		if err = proto.Unmarshal(input, &inputDefine); err != nil {
			return err
		}
		var res ResCoUserAddress
		if withContext == false {
			imp := val.(impUser)
			res, err = imp.UserAddressPage(inputDefine)
			if err != nil {
				return err
			}
		} else {
			imp := val.(impUserWithContext)
			res, err = imp.UserAddressPage(ctx, inputDefine)
			if err != nil {
				return err
			}
		}
		output, err = proto.Marshal(&res)
		if err != nil {
			return err
		}

	case "UserAddressData":
		inputDefine := CoUserAddress{}
		if err = proto.Unmarshal(input, &inputDefine); err != nil {
			return err
		}
		var res CoUserAddress
		if withContext == false {
			imp := val.(impUser)
			res, err = imp.UserAddressData(inputDefine)
			if err != nil {
				return err
			}
		} else {
			imp := val.(impUserWithContext)
			res, err = imp.UserAddressData(ctx, inputDefine)
			if err != nil {
				return err
			}
		}
		output, err = proto.Marshal(&res)
		if err != nil {
			return err
		}

	case "UserAddressSave":
		inputDefine := CoUserAddress{}
		if err = proto.Unmarshal(input, &inputDefine); err != nil {
			return err
		}
		var res CoUserAddress
		if withContext == false {
			imp := val.(impUser)
			res, err = imp.UserAddressSave(inputDefine)
			if err != nil {
				return err
			}
		} else {
			imp := val.(impUserWithContext)
			res, err = imp.UserAddressSave(ctx, inputDefine)
			if err != nil {
				return err
			}
		}
		output, err = proto.Marshal(&res)
		if err != nil {
			return err
		}

	case "UserAddressDelete":
		inputDefine := CoUserAddress{}
		if err = proto.Unmarshal(input, &inputDefine); err != nil {
			return err
		}
		var res Result
		if withContext == false {
			imp := val.(impUser)
			res, err = imp.UserAddressDelete(inputDefine)
			if err != nil {
				return err
			}
		} else {
			imp := val.(impUserWithContext)
			res, err = imp.UserAddressDelete(ctx, inputDefine)
			if err != nil {
				return err
			}
		}
		output, err = proto.Marshal(&res)
		if err != nil {
			return err
		}

	case "UserChainPage":
		inputDefine := ReqCoUserChain{}
		if err = proto.Unmarshal(input, &inputDefine); err != nil {
			return err
		}
		var res ResCoUserChain
		if withContext == false {
			imp := val.(impUser)
			res, err = imp.UserChainPage(inputDefine)
			if err != nil {
				return err
			}
		} else {
			imp := val.(impUserWithContext)
			res, err = imp.UserChainPage(ctx, inputDefine)
			if err != nil {
				return err
			}
		}
		output, err = proto.Marshal(&res)
		if err != nil {
			return err
		}

	case "UserChainData":
		inputDefine := CoUserChain{}
		if err = proto.Unmarshal(input, &inputDefine); err != nil {
			return err
		}
		var res CoUserChain
		if withContext == false {
			imp := val.(impUser)
			res, err = imp.UserChainData(inputDefine)
			if err != nil {
				return err
			}
		} else {
			imp := val.(impUserWithContext)
			res, err = imp.UserChainData(ctx, inputDefine)
			if err != nil {
				return err
			}
		}
		output, err = proto.Marshal(&res)
		if err != nil {
			return err
		}

	case "UserChainSave":
		inputDefine := CoUserChain{}
		if err = proto.Unmarshal(input, &inputDefine); err != nil {
			return err
		}
		var res CoUserChain
		if withContext == false {
			imp := val.(impUser)
			res, err = imp.UserChainSave(inputDefine)
			if err != nil {
				return err
			}
		} else {
			imp := val.(impUserWithContext)
			res, err = imp.UserChainSave(ctx, inputDefine)
			if err != nil {
				return err
			}
		}
		output, err = proto.Marshal(&res)
		if err != nil {
			return err
		}

	case "UserChainDelete":
		inputDefine := CoUserChain{}
		if err = proto.Unmarshal(input, &inputDefine); err != nil {
			return err
		}
		var res Result
		if withContext == false {
			imp := val.(impUser)
			res, err = imp.UserChainDelete(inputDefine)
			if err != nil {
				return err
			}
		} else {
			imp := val.(impUserWithContext)
			res, err = imp.UserChainDelete(ctx, inputDefine)
			if err != nil {
				return err
			}
		}
		output, err = proto.Marshal(&res)
		if err != nil {
			return err
		}

	case "UserMenuAll":
		inputDefine := Uid{}
		if err = proto.Unmarshal(input, &inputDefine); err != nil {
			return err
		}
		var res ResCoMenu
		if withContext == false {
			imp := val.(impUser)
			res, err = imp.UserMenuAll(inputDefine)
			if err != nil {
				return err
			}
		} else {
			imp := val.(impUserWithContext)
			res, err = imp.UserMenuAll(ctx, inputDefine)
			if err != nil {
				return err
			}
		}
		output, err = proto.Marshal(&res)
		if err != nil {
			return err
		}

	case "UserGroupRolePage":
		inputDefine := ReqCoUserGroupRole{}
		if err = proto.Unmarshal(input, &inputDefine); err != nil {
			return err
		}
		var res ResCoUserGroupRole
		if withContext == false {
			imp := val.(impUser)
			res, err = imp.UserGroupRolePage(inputDefine)
			if err != nil {
				return err
			}
		} else {
			imp := val.(impUserWithContext)
			res, err = imp.UserGroupRolePage(ctx, inputDefine)
			if err != nil {
				return err
			}
		}
		output, err = proto.Marshal(&res)
		if err != nil {
			return err
		}

	case "UserGroupRoleData":
		inputDefine := CoUserGroupRole{}
		if err = proto.Unmarshal(input, &inputDefine); err != nil {
			return err
		}
		var res CoUserGroupRole
		if withContext == false {
			imp := val.(impUser)
			res, err = imp.UserGroupRoleData(inputDefine)
			if err != nil {
				return err
			}
		} else {
			imp := val.(impUserWithContext)
			res, err = imp.UserGroupRoleData(ctx, inputDefine)
			if err != nil {
				return err
			}
		}
		output, err = proto.Marshal(&res)
		if err != nil {
			return err
		}

	case "UserGroupRoleSave":
		inputDefine := CoUserGroupRole{}
		if err = proto.Unmarshal(input, &inputDefine); err != nil {
			return err
		}
		var res CoUserGroupRole
		if withContext == false {
			imp := val.(impUser)
			res, err = imp.UserGroupRoleSave(inputDefine)
			if err != nil {
				return err
			}
		} else {
			imp := val.(impUserWithContext)
			res, err = imp.UserGroupRoleSave(ctx, inputDefine)
			if err != nil {
				return err
			}
		}
		output, err = proto.Marshal(&res)
		if err != nil {
			return err
		}

	case "UserGroupRoleDelete":
		inputDefine := CoUserGroupRole{}
		if err = proto.Unmarshal(input, &inputDefine); err != nil {
			return err
		}
		var res Result
		if withContext == false {
			imp := val.(impUser)
			res, err = imp.UserGroupRoleDelete(inputDefine)
			if err != nil {
				return err
			}
		} else {
			imp := val.(impUserWithContext)
			res, err = imp.UserGroupRoleDelete(ctx, inputDefine)
			if err != nil {
				return err
			}
		}
		output, err = proto.Marshal(&res)
		if err != nil {
			return err
		}

	case "UserCustomerPage":
		inputDefine := ReqCoUserCustomer{}
		if err = proto.Unmarshal(input, &inputDefine); err != nil {
			return err
		}
		var res ResCoUserCustomer
		if withContext == false {
			imp := val.(impUser)
			res, err = imp.UserCustomerPage(inputDefine)
			if err != nil {
				return err
			}
		} else {
			imp := val.(impUserWithContext)
			res, err = imp.UserCustomerPage(ctx, inputDefine)
			if err != nil {
				return err
			}
		}
		output, err = proto.Marshal(&res)
		if err != nil {
			return err
		}

	case "UserCustomerData":
		inputDefine := CoUserCustomer{}
		if err = proto.Unmarshal(input, &inputDefine); err != nil {
			return err
		}
		var res CoUserCustomer
		if withContext == false {
			imp := val.(impUser)
			res, err = imp.UserCustomerData(inputDefine)
			if err != nil {
				return err
			}
		} else {
			imp := val.(impUserWithContext)
			res, err = imp.UserCustomerData(ctx, inputDefine)
			if err != nil {
				return err
			}
		}
		output, err = proto.Marshal(&res)
		if err != nil {
			return err
		}

	case "UserCustomerSave":
		inputDefine := CoUserCustomer{}
		if err = proto.Unmarshal(input, &inputDefine); err != nil {
			return err
		}
		var res CoUserCustomer
		if withContext == false {
			imp := val.(impUser)
			res, err = imp.UserCustomerSave(inputDefine)
			if err != nil {
				return err
			}
		} else {
			imp := val.(impUserWithContext)
			res, err = imp.UserCustomerSave(ctx, inputDefine)
			if err != nil {
				return err
			}
		}
		output, err = proto.Marshal(&res)
		if err != nil {
			return err
		}

	case "UserCustomerDelete":
		inputDefine := CoUserCustomer{}
		if err = proto.Unmarshal(input, &inputDefine); err != nil {
			return err
		}
		var res Result
		if withContext == false {
			imp := val.(impUser)
			res, err = imp.UserCustomerDelete(inputDefine)
			if err != nil {
				return err
			}
		} else {
			imp := val.(impUserWithContext)
			res, err = imp.UserCustomerDelete(ctx, inputDefine)
			if err != nil {
				return err
			}
		}
		output, err = proto.Marshal(&res)
		if err != nil {
			return err
		}

	case "UserOrderPage":
		inputDefine := ReqCoUserOrder{}
		if err = proto.Unmarshal(input, &inputDefine); err != nil {
			return err
		}
		var res ResCoUserOrder
		if withContext == false {
			imp := val.(impUser)
			res, err = imp.UserOrderPage(inputDefine)
			if err != nil {
				return err
			}
		} else {
			imp := val.(impUserWithContext)
			res, err = imp.UserOrderPage(ctx, inputDefine)
			if err != nil {
				return err
			}
		}
		output, err = proto.Marshal(&res)
		if err != nil {
			return err
		}

	case "UserOrderData":
		inputDefine := CoUserOrder{}
		if err = proto.Unmarshal(input, &inputDefine); err != nil {
			return err
		}
		var res CoUserOrder
		if withContext == false {
			imp := val.(impUser)
			res, err = imp.UserOrderData(inputDefine)
			if err != nil {
				return err
			}
		} else {
			imp := val.(impUserWithContext)
			res, err = imp.UserOrderData(ctx, inputDefine)
			if err != nil {
				return err
			}
		}
		output, err = proto.Marshal(&res)
		if err != nil {
			return err
		}

	case "UserOrderUp":
		inputDefine := CoUserOrder{}
		if err = proto.Unmarshal(input, &inputDefine); err != nil {
			return err
		}
		var res CoUserOrder
		if withContext == false {
			imp := val.(impUser)
			res, err = imp.UserOrderUp(inputDefine)
			if err != nil {
				return err
			}
		} else {
			imp := val.(impUserWithContext)
			res, err = imp.UserOrderUp(ctx, inputDefine)
			if err != nil {
				return err
			}
		}
		output, err = proto.Marshal(&res)
		if err != nil {
			return err
		}

	case "UserOrderDelete":
		inputDefine := CoUserOrder{}
		if err = proto.Unmarshal(input, &inputDefine); err != nil {
			return err
		}
		var res Result
		if withContext == false {
			imp := val.(impUser)
			res, err = imp.UserOrderDelete(inputDefine)
			if err != nil {
				return err
			}
		} else {
			imp := val.(impUserWithContext)
			res, err = imp.UserOrderDelete(ctx, inputDefine)
			if err != nil {
				return err
			}
		}
		output, err = proto.Marshal(&res)
		if err != nil {
			return err
		}

	case "UserPointsSetInfo":
		inputDefine := CoUserPoints{}
		if err = proto.Unmarshal(input, &inputDefine); err != nil {
			return err
		}
		var res CoUserPoints
		if withContext == false {
			imp := val.(impUser)
			res, err = imp.UserPointsSetInfo(inputDefine)
			if err != nil {
				return err
			}
		} else {
			imp := val.(impUserWithContext)
			res, err = imp.UserPointsSetInfo(ctx, inputDefine)
			if err != nil {
				return err
			}
		}
		output, err = proto.Marshal(&res)
		if err != nil {
			return err
		}

	case "UserPointsSetUpdate":
		inputDefine := CoUserPoints{}
		if err = proto.Unmarshal(input, &inputDefine); err != nil {
			return err
		}
		var res CoUserPoints
		if withContext == false {
			imp := val.(impUser)
			res, err = imp.UserPointsSetUpdate(inputDefine)
			if err != nil {
				return err
			}
		} else {
			imp := val.(impUserWithContext)
			res, err = imp.UserPointsSetUpdate(ctx, inputDefine)
			if err != nil {
				return err
			}
		}
		output, err = proto.Marshal(&res)
		if err != nil {
			return err
		}

	case "UserPointsRuleList":
		inputDefine := ReqCoUserPointsRule{}
		if err = proto.Unmarshal(input, &inputDefine); err != nil {
			return err
		}
		var res ResCoUserPointsRule
		if withContext == false {
			imp := val.(impUser)
			res, err = imp.UserPointsRuleList(inputDefine)
			if err != nil {
				return err
			}
		} else {
			imp := val.(impUserWithContext)
			res, err = imp.UserPointsRuleList(ctx, inputDefine)
			if err != nil {
				return err
			}
		}
		output, err = proto.Marshal(&res)
		if err != nil {
			return err
		}

	case "UserPointsRuleData":
		inputDefine := CoUserPointsRule{}
		if err = proto.Unmarshal(input, &inputDefine); err != nil {
			return err
		}
		var res CoUserPointsRule
		if withContext == false {
			imp := val.(impUser)
			res, err = imp.UserPointsRuleData(inputDefine)
			if err != nil {
				return err
			}
		} else {
			imp := val.(impUserWithContext)
			res, err = imp.UserPointsRuleData(ctx, inputDefine)
			if err != nil {
				return err
			}
		}
		output, err = proto.Marshal(&res)
		if err != nil {
			return err
		}

	case "UserPointsRuleSave":
		inputDefine := CoUserPointsRule{}
		if err = proto.Unmarshal(input, &inputDefine); err != nil {
			return err
		}
		var res CoUserPointsRule
		if withContext == false {
			imp := val.(impUser)
			res, err = imp.UserPointsRuleSave(inputDefine)
			if err != nil {
				return err
			}
		} else {
			imp := val.(impUserWithContext)
			res, err = imp.UserPointsRuleSave(ctx, inputDefine)
			if err != nil {
				return err
			}
		}
		output, err = proto.Marshal(&res)
		if err != nil {
			return err
		}

	case "UserPointsRuleDelete":
		inputDefine := CoUserPointsRule{}
		if err = proto.Unmarshal(input, &inputDefine); err != nil {
			return err
		}
		var res Result
		if withContext == false {
			imp := val.(impUser)
			res, err = imp.UserPointsRuleDelete(inputDefine)
			if err != nil {
				return err
			}
		} else {
			imp := val.(impUserWithContext)
			res, err = imp.UserPointsRuleDelete(ctx, inputDefine)
			if err != nil {
				return err
			}
		}
		output, err = proto.Marshal(&res)
		if err != nil {
			return err
		}

	case "UserBenefitOwn":
		inputDefine := Uid{}
		if err = proto.Unmarshal(input, &inputDefine); err != nil {
			return err
		}
		var res ResUserBenefitOwn
		if withContext == false {
			imp := val.(impUser)
			res, err = imp.UserBenefitOwn(inputDefine)
			if err != nil {
				return err
			}
		} else {
			imp := val.(impUserWithContext)
			res, err = imp.UserBenefitOwn(ctx, inputDefine)
			if err != nil {
				return err
			}
		}
		output, err = proto.Marshal(&res)
		if err != nil {
			return err
		}

	case "UserBenefitDiyPage":
		inputDefine := ReqCoUserBenefitDiy{}
		if err = proto.Unmarshal(input, &inputDefine); err != nil {
			return err
		}
		var res ResCoUserBenefitDiy
		if withContext == false {
			imp := val.(impUser)
			res, err = imp.UserBenefitDiyPage(inputDefine)
			if err != nil {
				return err
			}
		} else {
			imp := val.(impUserWithContext)
			res, err = imp.UserBenefitDiyPage(ctx, inputDefine)
			if err != nil {
				return err
			}
		}
		output, err = proto.Marshal(&res)
		if err != nil {
			return err
		}

	case "UserBenefitDiyData":
		inputDefine := CoUserBenefitDiy{}
		if err = proto.Unmarshal(input, &inputDefine); err != nil {
			return err
		}
		var res CoUserBenefitDiy
		if withContext == false {
			imp := val.(impUser)
			res, err = imp.UserBenefitDiyData(inputDefine)
			if err != nil {
				return err
			}
		} else {
			imp := val.(impUserWithContext)
			res, err = imp.UserBenefitDiyData(ctx, inputDefine)
			if err != nil {
				return err
			}
		}
		output, err = proto.Marshal(&res)
		if err != nil {
			return err
		}

	case "UserBenefitDiySave":
		inputDefine := CoUserBenefitDiy{}
		if err = proto.Unmarshal(input, &inputDefine); err != nil {
			return err
		}
		var res CoUserBenefitDiy
		if withContext == false {
			imp := val.(impUser)
			res, err = imp.UserBenefitDiySave(inputDefine)
			if err != nil {
				return err
			}
		} else {
			imp := val.(impUserWithContext)
			res, err = imp.UserBenefitDiySave(ctx, inputDefine)
			if err != nil {
				return err
			}
		}
		output, err = proto.Marshal(&res)
		if err != nil {
			return err
		}

	case "UserBenefitDiyDelete":
		inputDefine := CoUserBenefitDiy{}
		if err = proto.Unmarshal(input, &inputDefine); err != nil {
			return err
		}
		var res Result
		if withContext == false {
			imp := val.(impUser)
			res, err = imp.UserBenefitDiyDelete(inputDefine)
			if err != nil {
				return err
			}
		} else {
			imp := val.(impUserWithContext)
			res, err = imp.UserBenefitDiyDelete(ctx, inputDefine)
			if err != nil {
				return err
			}
		}
		output, err = proto.Marshal(&res)
		if err != nil {
			return err
		}

	case "UserBenefitPage":
		inputDefine := ReqCoUserBenefit{}
		if err = proto.Unmarshal(input, &inputDefine); err != nil {
			return err
		}
		var res Result
		if withContext == false {
			imp := val.(impUser)
			res, err = imp.UserBenefitPage(inputDefine)
			if err != nil {
				return err
			}
		} else {
			imp := val.(impUserWithContext)
			res, err = imp.UserBenefitPage(ctx, inputDefine)
			if err != nil {
				return err
			}
		}
		output, err = proto.Marshal(&res)
		if err != nil {
			return err
		}

	case "UserBenefitData":
		inputDefine := CoUserBenefit{}
		if err = proto.Unmarshal(input, &inputDefine); err != nil {
			return err
		}
		var res Result
		if withContext == false {
			imp := val.(impUser)
			res, err = imp.UserBenefitData(inputDefine)
			if err != nil {
				return err
			}
		} else {
			imp := val.(impUserWithContext)
			res, err = imp.UserBenefitData(ctx, inputDefine)
			if err != nil {
				return err
			}
		}
		output, err = proto.Marshal(&res)
		if err != nil {
			return err
		}

	case "UserBenefitSave":
		inputDefine := SaveCoUserBenefit{}
		if err = proto.Unmarshal(input, &inputDefine); err != nil {
			return err
		}
		var res Result
		if withContext == false {
			imp := val.(impUser)
			res, err = imp.UserBenefitSave(inputDefine)
			if err != nil {
				return err
			}
		} else {
			imp := val.(impUserWithContext)
			res, err = imp.UserBenefitSave(ctx, inputDefine)
			if err != nil {
				return err
			}
		}
		output, err = proto.Marshal(&res)
		if err != nil {
			return err
		}

	case "UserBenefitDelete":
		inputDefine := CoUserBenefit{}
		if err = proto.Unmarshal(input, &inputDefine); err != nil {
			return err
		}
		var res Result
		if withContext == false {
			imp := val.(impUser)
			res, err = imp.UserBenefitDelete(inputDefine)
			if err != nil {
				return err
			}
		} else {
			imp := val.(impUserWithContext)
			res, err = imp.UserBenefitDelete(ctx, inputDefine)
			if err != nil {
				return err
			}
		}
		output, err = proto.Marshal(&res)
		if err != nil {
			return err
		}

	case "UserStaffPage":
		inputDefine := ReqCoUserStaff{}
		if err = proto.Unmarshal(input, &inputDefine); err != nil {
			return err
		}
		var res ResCoUserStaff
		if withContext == false {
			imp := val.(impUser)
			res, err = imp.UserStaffPage(inputDefine)
			if err != nil {
				return err
			}
		} else {
			imp := val.(impUserWithContext)
			res, err = imp.UserStaffPage(ctx, inputDefine)
			if err != nil {
				return err
			}
		}
		output, err = proto.Marshal(&res)
		if err != nil {
			return err
		}

	case "UserStaffData":
		inputDefine := CoUserStaff{}
		if err = proto.Unmarshal(input, &inputDefine); err != nil {
			return err
		}
		var res CoUserStaff
		if withContext == false {
			imp := val.(impUser)
			res, err = imp.UserStaffData(inputDefine)
			if err != nil {
				return err
			}
		} else {
			imp := val.(impUserWithContext)
			res, err = imp.UserStaffData(ctx, inputDefine)
			if err != nil {
				return err
			}
		}
		output, err = proto.Marshal(&res)
		if err != nil {
			return err
		}

	case "UserStaffSave":
		inputDefine := CoUserStaff{}
		if err = proto.Unmarshal(input, &inputDefine); err != nil {
			return err
		}
		var res CoUserStaff
		if withContext == false {
			imp := val.(impUser)
			res, err = imp.UserStaffSave(inputDefine)
			if err != nil {
				return err
			}
		} else {
			imp := val.(impUserWithContext)
			res, err = imp.UserStaffSave(ctx, inputDefine)
			if err != nil {
				return err
			}
		}
		output, err = proto.Marshal(&res)
		if err != nil {
			return err
		}

	case "UserStaffDelete":
		inputDefine := CoUserStaff{}
		if err = proto.Unmarshal(input, &inputDefine); err != nil {
			return err
		}
		var res Result
		if withContext == false {
			imp := val.(impUser)
			res, err = imp.UserStaffDelete(inputDefine)
			if err != nil {
				return err
			}
		} else {
			imp := val.(impUserWithContext)
			res, err = imp.UserStaffDelete(ctx, inputDefine)
			if err != nil {
				return err
			}
		}
		output, err = proto.Marshal(&res)
		if err != nil {
			return err
		}

	case "UserStorePage":
		inputDefine := ReqCoUserStore{}
		if err = proto.Unmarshal(input, &inputDefine); err != nil {
			return err
		}
		var res ResCoUserStore
		if withContext == false {
			imp := val.(impUser)
			res, err = imp.UserStorePage(inputDefine)
			if err != nil {
				return err
			}
		} else {
			imp := val.(impUserWithContext)
			res, err = imp.UserStorePage(ctx, inputDefine)
			if err != nil {
				return err
			}
		}
		output, err = proto.Marshal(&res)
		if err != nil {
			return err
		}

	case "UserStoreData":
		inputDefine := CoUserStore{}
		if err = proto.Unmarshal(input, &inputDefine); err != nil {
			return err
		}
		var res CoUserStore
		if withContext == false {
			imp := val.(impUser)
			res, err = imp.UserStoreData(inputDefine)
			if err != nil {
				return err
			}
		} else {
			imp := val.(impUserWithContext)
			res, err = imp.UserStoreData(ctx, inputDefine)
			if err != nil {
				return err
			}
		}
		output, err = proto.Marshal(&res)
		if err != nil {
			return err
		}

	case "UserStoreSave":
		inputDefine := CoUserStore{}
		if err = proto.Unmarshal(input, &inputDefine); err != nil {
			return err
		}
		var res CoUserStore
		if withContext == false {
			imp := val.(impUser)
			res, err = imp.UserStoreSave(inputDefine)
			if err != nil {
				return err
			}
		} else {
			imp := val.(impUserWithContext)
			res, err = imp.UserStoreSave(ctx, inputDefine)
			if err != nil {
				return err
			}
		}
		output, err = proto.Marshal(&res)
		if err != nil {
			return err
		}

	case "UserStoreDelete":
		inputDefine := CoUserStore{}
		if err = proto.Unmarshal(input, &inputDefine); err != nil {
			return err
		}
		var res Result
		if withContext == false {
			imp := val.(impUser)
			res, err = imp.UserStoreDelete(inputDefine)
			if err != nil {
				return err
			}
		} else {
			imp := val.(impUserWithContext)
			res, err = imp.UserStoreDelete(ctx, inputDefine)
			if err != nil {
				return err
			}
		}
		output, err = proto.Marshal(&res)
		if err != nil {
			return err
		}

	case "UserSettingInfo":
		inputDefine := CoUserSetting{}
		if err = proto.Unmarshal(input, &inputDefine); err != nil {
			return err
		}
		var res Result
		if withContext == false {
			imp := val.(impUser)
			res, err = imp.UserSettingInfo(inputDefine)
			if err != nil {
				return err
			}
		} else {
			imp := val.(impUserWithContext)
			res, err = imp.UserSettingInfo(ctx, inputDefine)
			if err != nil {
				return err
			}
		}
		output, err = proto.Marshal(&res)
		if err != nil {
			return err
		}

	case "UserSettingSave":
		inputDefine := SaveCoUserSetting{}
		if err = proto.Unmarshal(input, &inputDefine); err != nil {
			return err
		}
		var res Result
		if withContext == false {
			imp := val.(impUser)
			res, err = imp.UserSettingSave(inputDefine)
			if err != nil {
				return err
			}
		} else {
			imp := val.(impUserWithContext)
			res, err = imp.UserSettingSave(ctx, inputDefine)
			if err != nil {
				return err
			}
		}
		output, err = proto.Marshal(&res)
		if err != nil {
			return err
		}

	case "UserSettingValue":
		inputDefine := ResCoUserSettingValue{}
		if err = proto.Unmarshal(input, &inputDefine); err != nil {
			return err
		}
		var res Result
		if withContext == false {
			imp := val.(impUser)
			res, err = imp.UserSettingValue(inputDefine)
			if err != nil {
				return err
			}
		} else {
			imp := val.(impUserWithContext)
			res, err = imp.UserSettingValue(ctx, inputDefine)
			if err != nil {
				return err
			}
		}
		output, err = proto.Marshal(&res)
		if err != nil {
			return err
		}

	case "UserDecoFeature":
		inputDefine := ReqCoUserDecoFeature{}
		if err = proto.Unmarshal(input, &inputDefine); err != nil {
			return err
		}
		var res Result
		if withContext == false {
			imp := val.(impUser)
			res, err = imp.UserDecoFeature(inputDefine)
			if err != nil {
				return err
			}
		} else {
			imp := val.(impUserWithContext)
			res, err = imp.UserDecoFeature(ctx, inputDefine)
			if err != nil {
				return err
			}
		}
		output, err = proto.Marshal(&res)
		if err != nil {
			return err
		}

	case "DecoModuleList":
		inputDefine := ReqCoUserDecoUsePos{}
		if err = proto.Unmarshal(input, &inputDefine); err != nil {
			return err
		}
		var res ResCoUserDecoModuleList
		if withContext == false {
			imp := val.(impUser)
			res, err = imp.DecoModuleList(inputDefine)
			if err != nil {
				return err
			}
		} else {
			imp := val.(impUserWithContext)
			res, err = imp.DecoModuleList(ctx, inputDefine)
			if err != nil {
				return err
			}
		}
		output, err = proto.Marshal(&res)
		if err != nil {
			return err
		}

	case "DecoModuleInfo":
		inputDefine := IdCoId{}
		if err = proto.Unmarshal(input, &inputDefine); err != nil {
			return err
		}
		var res Result
		if withContext == false {
			imp := val.(impUser)
			res, err = imp.DecoModuleInfo(inputDefine)
			if err != nil {
				return err
			}
		} else {
			imp := val.(impUserWithContext)
			res, err = imp.DecoModuleInfo(ctx, inputDefine)
			if err != nil {
				return err
			}
		}
		output, err = proto.Marshal(&res)
		if err != nil {
			return err
		}

	case "DecoModuleData":
		inputDefine := CoUserFeature{}
		if err = proto.Unmarshal(input, &inputDefine); err != nil {
			return err
		}
		var res Result
		if withContext == false {
			imp := val.(impUser)
			res, err = imp.DecoModuleData(inputDefine)
			if err != nil {
				return err
			}
		} else {
			imp := val.(impUserWithContext)
			res, err = imp.DecoModuleData(ctx, inputDefine)
			if err != nil {
				return err
			}
		}
		output, err = proto.Marshal(&res)
		if err != nil {
			return err
		}

	case "DecoSave":
		inputDefine := CoUserFeature{}
		if err = proto.Unmarshal(input, &inputDefine); err != nil {
			return err
		}
		var res CoUserFeature
		if withContext == false {
			imp := val.(impUser)
			res, err = imp.DecoSave(inputDefine)
			if err != nil {
				return err
			}
		} else {
			imp := val.(impUserWithContext)
			res, err = imp.DecoSave(ctx, inputDefine)
			if err != nil {
				return err
			}
		}
		output, err = proto.Marshal(&res)
		if err != nil {
			return err
		}

	case "DecoOperate":
		inputDefine := ReqCoUserDecoOperate{}
		if err = proto.Unmarshal(input, &inputDefine); err != nil {
			return err
		}
		var res Result
		if withContext == false {
			imp := val.(impUser)
			res, err = imp.DecoOperate(inputDefine)
			if err != nil {
				return err
			}
		} else {
			imp := val.(impUserWithContext)
			res, err = imp.DecoOperate(ctx, inputDefine)
			if err != nil {
				return err
			}
		}
		output, err = proto.Marshal(&res)
		if err != nil {
			return err
		}

	case "DecoStyle":
		inputDefine := ReqCoUserDecoStyle{}
		if err = proto.Unmarshal(input, &inputDefine); err != nil {
			return err
		}
		var res Result
		if withContext == false {
			imp := val.(impUser)
			res, err = imp.DecoStyle(inputDefine)
			if err != nil {
				return err
			}
		} else {
			imp := val.(impUserWithContext)
			res, err = imp.DecoStyle(ctx, inputDefine)
			if err != nil {
				return err
			}
		}
		output, err = proto.Marshal(&res)
		if err != nil {
			return err
		}

	case "DecoShopCommonInfo":
		inputDefine := CoUserShopCommon{}
		if err = proto.Unmarshal(input, &inputDefine); err != nil {
			return err
		}
		var res Result
		if withContext == false {
			imp := val.(impUser)
			res, err = imp.DecoShopCommonInfo(inputDefine)
			if err != nil {
				return err
			}
		} else {
			imp := val.(impUserWithContext)
			res, err = imp.DecoShopCommonInfo(ctx, inputDefine)
			if err != nil {
				return err
			}
		}
		output, err = proto.Marshal(&res)
		if err != nil {
			return err
		}

	case "DecoShopCommonSave":
		inputDefine := CoUserShopCommon{}
		if err = proto.Unmarshal(input, &inputDefine); err != nil {
			return err
		}
		var res Result
		if withContext == false {
			imp := val.(impUser)
			res, err = imp.DecoShopCommonSave(inputDefine)
			if err != nil {
				return err
			}
		} else {
			imp := val.(impUserWithContext)
			res, err = imp.DecoShopCommonSave(ctx, inputDefine)
			if err != nil {
				return err
			}
		}
		output, err = proto.Marshal(&res)
		if err != nil {
			return err
		}

	case "DecoShopPageInit":
		inputDefine := CoUserShopInit{}
		if err = proto.Unmarshal(input, &inputDefine); err != nil {
			return err
		}
		var res Result
		if withContext == false {
			imp := val.(impUser)
			res, err = imp.DecoShopPageInit(inputDefine)
			if err != nil {
				return err
			}
		} else {
			imp := val.(impUserWithContext)
			res, err = imp.DecoShopPageInit(ctx, inputDefine)
			if err != nil {
				return err
			}
		}
		output, err = proto.Marshal(&res)
		if err != nil {
			return err
		}

	case "FeatureConfig":
		inputDefine := CoFeatureConfig{}
		if err = proto.Unmarshal(input, &inputDefine); err != nil {
			return err
		}
		var res Result
		if withContext == false {
			imp := val.(impUser)
			res, err = imp.FeatureConfig(inputDefine)
			if err != nil {
				return err
			}
		} else {
			imp := val.(impUserWithContext)
			res, err = imp.FeatureConfig(ctx, inputDefine)
			if err != nil {
				return err
			}
		}
		output, err = proto.Marshal(&res)
		if err != nil {
			return err
		}

	case "FeatureData":
		inputDefine := CoFeatureConfig{}
		if err = proto.Unmarshal(input, &inputDefine); err != nil {
			return err
		}
		var res Result
		if withContext == false {
			imp := val.(impUser)
			res, err = imp.FeatureData(inputDefine)
			if err != nil {
				return err
			}
		} else {
			imp := val.(impUserWithContext)
			res, err = imp.FeatureData(ctx, inputDefine)
			if err != nil {
				return err
			}
		}
		output, err = proto.Marshal(&res)
		if err != nil {
			return err
		}

	case "UserVipPage":
		inputDefine := ReqCoUserVip{}
		if err = proto.Unmarshal(input, &inputDefine); err != nil {
			return err
		}
		var res ResCoUserVip
		if withContext == false {
			imp := val.(impUser)
			res, err = imp.UserVipPage(inputDefine)
			if err != nil {
				return err
			}
		} else {
			imp := val.(impUserWithContext)
			res, err = imp.UserVipPage(ctx, inputDefine)
			if err != nil {
				return err
			}
		}
		output, err = proto.Marshal(&res)
		if err != nil {
			return err
		}

	case "UserVipData":
		inputDefine := CoUserVip{}
		if err = proto.Unmarshal(input, &inputDefine); err != nil {
			return err
		}
		var res CoUserVip
		if withContext == false {
			imp := val.(impUser)
			res, err = imp.UserVipData(inputDefine)
			if err != nil {
				return err
			}
		} else {
			imp := val.(impUserWithContext)
			res, err = imp.UserVipData(ctx, inputDefine)
			if err != nil {
				return err
			}
		}
		output, err = proto.Marshal(&res)
		if err != nil {
			return err
		}

	case "UserVipSave":
		inputDefine := CoUserVip{}
		if err = proto.Unmarshal(input, &inputDefine); err != nil {
			return err
		}
		var res CoUserVip
		if withContext == false {
			imp := val.(impUser)
			res, err = imp.UserVipSave(inputDefine)
			if err != nil {
				return err
			}
		} else {
			imp := val.(impUserWithContext)
			res, err = imp.UserVipSave(ctx, inputDefine)
			if err != nil {
				return err
			}
		}
		output, err = proto.Marshal(&res)
		if err != nil {
			return err
		}

	case "UserVipDelete":
		inputDefine := CoUserVip{}
		if err = proto.Unmarshal(input, &inputDefine); err != nil {
			return err
		}
		var res Result
		if withContext == false {
			imp := val.(impUser)
			res, err = imp.UserVipDelete(inputDefine)
			if err != nil {
				return err
			}
		} else {
			imp := val.(impUserWithContext)
			res, err = imp.UserVipDelete(ctx, inputDefine)
			if err != nil {
				return err
			}
		}
		output, err = proto.Marshal(&res)
		if err != nil {
			return err
		}

	case "SubscribeChoose":
		inputDefine := ReqCoSysVipChoose{}
		if err = proto.Unmarshal(input, &inputDefine); err != nil {
			return err
		}
		var res ResCoSysVip
		if withContext == false {
			imp := val.(impUser)
			res, err = imp.SubscribeChoose(inputDefine)
			if err != nil {
				return err
			}
		} else {
			imp := val.(impUserWithContext)
			res, err = imp.SubscribeChoose(ctx, inputDefine)
			if err != nil {
				return err
			}
		}
		output, err = proto.Marshal(&res)
		if err != nil {
			return err
		}

	case "SubscribeItemId":
		inputDefine := IdCoId{}
		if err = proto.Unmarshal(input, &inputDefine); err != nil {
			return err
		}
		var res Result
		if withContext == false {
			imp := val.(impUser)
			res, err = imp.SubscribeItemId(inputDefine)
			if err != nil {
				return err
			}
		} else {
			imp := val.(impUserWithContext)
			res, err = imp.SubscribeItemId(ctx, inputDefine)
			if err != nil {
				return err
			}
		}
		output, err = proto.Marshal(&res)
		if err != nil {
			return err
		}

	case "SubscribeVipPage":
		inputDefine := ReqCoUserVip{}
		if err = proto.Unmarshal(input, &inputDefine); err != nil {
			return err
		}
		var res Result
		if withContext == false {
			imp := val.(impUser)
			res, err = imp.SubscribeVipPage(inputDefine)
			if err != nil {
				return err
			}
		} else {
			imp := val.(impUserWithContext)
			res, err = imp.SubscribeVipPage(ctx, inputDefine)
			if err != nil {
				return err
			}
		}
		output, err = proto.Marshal(&res)
		if err != nil {
			return err
		}

	default:
		return fmt.Errorf("func mismatch")
	}
	var _status map[string]string
	s, ok := current.GetResponseStatus(ctx)
	if ok && s != nil {
		_status = s
	}
	var _context map[string]string
	c, ok := current.GetResponseContext(ctx)
	if ok && c != nil {
		_context = c
	}
	*resp = requestf.ResponsePacket{
		IVersion:     1,
		CPacketType:  0,
		IRequestId:   req.IRequestId,
		IMessageType: 0,
		IRet:         0,
		SBuffer:      tools.ByteToInt8(output),
		Status:       _status,
		SResultDesc:  "",
		Context:      _context,
	}
	return nil
}

// PermissionsByRequest is client rpc method as defined
func (obj *User) PermissionsByRequest(input Permissions, _opt ...map[string]string) (output Result, err error) {
	ctx := context.Background()
	return obj.PermissionsByRequestWithContext(ctx, input, _opt...)
}

// PermissionsByRequestWithContext is client rpc method as defined
func (obj *User) PermissionsByRequestWithContext(ctx context.Context, input Permissions, _opt ...map[string]string) (output Result, err error) {
	var inputMarshal []byte
	inputMarshal, err = proto.Marshal(&input)
	if err != nil {
		return output, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}

	resp := new(requestf.ResponsePacket)

	err = obj.s.Tars_invoke(ctx, 0, "PermissionsByRequest", inputMarshal, _status, _context, resp)
	if err != nil {
		return output, err
	}
	if err = proto.Unmarshal(tools.Int8ToByte(resp.SBuffer), &output); err != nil {
		return output, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range resp.Status {
			_status[k] = v
		}
	}

	return output, nil
}

// CoAdminList is client rpc method as defined
func (obj *User) CoAdminList(input ReqId, _opt ...map[string]string) (output Res_User_CoUser, err error) {
	ctx := context.Background()
	return obj.CoAdminListWithContext(ctx, input, _opt...)
}

// CoAdminListWithContext is client rpc method as defined
func (obj *User) CoAdminListWithContext(ctx context.Context, input ReqId, _opt ...map[string]string) (output Res_User_CoUser, err error) {
	var inputMarshal []byte
	inputMarshal, err = proto.Marshal(&input)
	if err != nil {
		return output, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}

	resp := new(requestf.ResponsePacket)

	err = obj.s.Tars_invoke(ctx, 0, "CoAdminList", inputMarshal, _status, _context, resp)
	if err != nil {
		return output, err
	}
	if err = proto.Unmarshal(tools.Int8ToByte(resp.SBuffer), &output); err != nil {
		return output, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range resp.Status {
			_status[k] = v
		}
	}

	return output, nil
}

// CoCustomerList is client rpc method as defined
func (obj *User) CoCustomerList(input ReqId, _opt ...map[string]string) (output Res_User_CoUser, err error) {
	ctx := context.Background()
	return obj.CoCustomerListWithContext(ctx, input, _opt...)
}

// CoCustomerListWithContext is client rpc method as defined
func (obj *User) CoCustomerListWithContext(ctx context.Context, input ReqId, _opt ...map[string]string) (output Res_User_CoUser, err error) {
	var inputMarshal []byte
	inputMarshal, err = proto.Marshal(&input)
	if err != nil {
		return output, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}

	resp := new(requestf.ResponsePacket)

	err = obj.s.Tars_invoke(ctx, 0, "CoCustomerList", inputMarshal, _status, _context, resp)
	if err != nil {
		return output, err
	}
	if err = proto.Unmarshal(tools.Int8ToByte(resp.SBuffer), &output); err != nil {
		return output, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range resp.Status {
			_status[k] = v
		}
	}

	return output, nil
}

// CoUserRoles is client rpc method as defined
func (obj *User) CoUserRoles(input Uid, _opt ...map[string]string) (output ResCoMenu, err error) {
	ctx := context.Background()
	return obj.CoUserRolesWithContext(ctx, input, _opt...)
}

// CoUserRolesWithContext is client rpc method as defined
func (obj *User) CoUserRolesWithContext(ctx context.Context, input Uid, _opt ...map[string]string) (output ResCoMenu, err error) {
	var inputMarshal []byte
	inputMarshal, err = proto.Marshal(&input)
	if err != nil {
		return output, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}

	resp := new(requestf.ResponsePacket)

	err = obj.s.Tars_invoke(ctx, 0, "CoUserRoles", inputMarshal, _status, _context, resp)
	if err != nil {
		return output, err
	}
	if err = proto.Unmarshal(tools.Int8ToByte(resp.SBuffer), &output); err != nil {
		return output, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range resp.Status {
			_status[k] = v
		}
	}

	return output, nil
}

// UserPage is client rpc method as defined
func (obj *User) UserPage(input ReqCoUser, _opt ...map[string]string) (output ResCoUser, err error) {
	ctx := context.Background()
	return obj.UserPageWithContext(ctx, input, _opt...)
}

// UserPageWithContext is client rpc method as defined
func (obj *User) UserPageWithContext(ctx context.Context, input ReqCoUser, _opt ...map[string]string) (output ResCoUser, err error) {
	var inputMarshal []byte
	inputMarshal, err = proto.Marshal(&input)
	if err != nil {
		return output, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}

	resp := new(requestf.ResponsePacket)

	err = obj.s.Tars_invoke(ctx, 0, "UserPage", inputMarshal, _status, _context, resp)
	if err != nil {
		return output, err
	}
	if err = proto.Unmarshal(tools.Int8ToByte(resp.SBuffer), &output); err != nil {
		return output, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range resp.Status {
			_status[k] = v
		}
	}

	return output, nil
}

// UserGet is client rpc method as defined
func (obj *User) UserGet(input ReqId, _opt ...map[string]string) (output CoUser, err error) {
	ctx := context.Background()
	return obj.UserGetWithContext(ctx, input, _opt...)
}

// UserGetWithContext is client rpc method as defined
func (obj *User) UserGetWithContext(ctx context.Context, input ReqId, _opt ...map[string]string) (output CoUser, err error) {
	var inputMarshal []byte
	inputMarshal, err = proto.Marshal(&input)
	if err != nil {
		return output, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}

	resp := new(requestf.ResponsePacket)

	err = obj.s.Tars_invoke(ctx, 0, "UserGet", inputMarshal, _status, _context, resp)
	if err != nil {
		return output, err
	}
	if err = proto.Unmarshal(tools.Int8ToByte(resp.SBuffer), &output); err != nil {
		return output, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range resp.Status {
			_status[k] = v
		}
	}

	return output, nil
}

// UserUp is client rpc method as defined
func (obj *User) UserUp(input CoUser, _opt ...map[string]string) (output CoUser, err error) {
	ctx := context.Background()
	return obj.UserUpWithContext(ctx, input, _opt...)
}

// UserUpWithContext is client rpc method as defined
func (obj *User) UserUpWithContext(ctx context.Context, input CoUser, _opt ...map[string]string) (output CoUser, err error) {
	var inputMarshal []byte
	inputMarshal, err = proto.Marshal(&input)
	if err != nil {
		return output, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}

	resp := new(requestf.ResponsePacket)

	err = obj.s.Tars_invoke(ctx, 0, "UserUp", inputMarshal, _status, _context, resp)
	if err != nil {
		return output, err
	}
	if err = proto.Unmarshal(tools.Int8ToByte(resp.SBuffer), &output); err != nil {
		return output, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range resp.Status {
			_status[k] = v
		}
	}

	return output, nil
}

// UserDelete is client rpc method as defined
func (obj *User) UserDelete(input CoUser, _opt ...map[string]string) (output Result, err error) {
	ctx := context.Background()
	return obj.UserDeleteWithContext(ctx, input, _opt...)
}

// UserDeleteWithContext is client rpc method as defined
func (obj *User) UserDeleteWithContext(ctx context.Context, input CoUser, _opt ...map[string]string) (output Result, err error) {
	var inputMarshal []byte
	inputMarshal, err = proto.Marshal(&input)
	if err != nil {
		return output, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}

	resp := new(requestf.ResponsePacket)

	err = obj.s.Tars_invoke(ctx, 0, "UserDelete", inputMarshal, _status, _context, resp)
	if err != nil {
		return output, err
	}
	if err = proto.Unmarshal(tools.Int8ToByte(resp.SBuffer), &output); err != nil {
		return output, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range resp.Status {
			_status[k] = v
		}
	}

	return output, nil
}

// UserDataGet is client rpc method as defined
func (obj *User) UserDataGet(input CoUserData, _opt ...map[string]string) (output CoUserData, err error) {
	ctx := context.Background()
	return obj.UserDataGetWithContext(ctx, input, _opt...)
}

// UserDataGetWithContext is client rpc method as defined
func (obj *User) UserDataGetWithContext(ctx context.Context, input CoUserData, _opt ...map[string]string) (output CoUserData, err error) {
	var inputMarshal []byte
	inputMarshal, err = proto.Marshal(&input)
	if err != nil {
		return output, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}

	resp := new(requestf.ResponsePacket)

	err = obj.s.Tars_invoke(ctx, 0, "UserDataGet", inputMarshal, _status, _context, resp)
	if err != nil {
		return output, err
	}
	if err = proto.Unmarshal(tools.Int8ToByte(resp.SBuffer), &output); err != nil {
		return output, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range resp.Status {
			_status[k] = v
		}
	}

	return output, nil
}

// UserDataUp is client rpc method as defined
func (obj *User) UserDataUp(input CoUserData, _opt ...map[string]string) (output CoUserData, err error) {
	ctx := context.Background()
	return obj.UserDataUpWithContext(ctx, input, _opt...)
}

// UserDataUpWithContext is client rpc method as defined
func (obj *User) UserDataUpWithContext(ctx context.Context, input CoUserData, _opt ...map[string]string) (output CoUserData, err error) {
	var inputMarshal []byte
	inputMarshal, err = proto.Marshal(&input)
	if err != nil {
		return output, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}

	resp := new(requestf.ResponsePacket)

	err = obj.s.Tars_invoke(ctx, 0, "UserDataUp", inputMarshal, _status, _context, resp)
	if err != nil {
		return output, err
	}
	if err = proto.Unmarshal(tools.Int8ToByte(resp.SBuffer), &output); err != nil {
		return output, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range resp.Status {
			_status[k] = v
		}
	}

	return output, nil
}

// UserInfoGet is client rpc method as defined
func (obj *User) UserInfoGet(input Uid, _opt ...map[string]string) (output Result, err error) {
	ctx := context.Background()
	return obj.UserInfoGetWithContext(ctx, input, _opt...)
}

// UserInfoGetWithContext is client rpc method as defined
func (obj *User) UserInfoGetWithContext(ctx context.Context, input Uid, _opt ...map[string]string) (output Result, err error) {
	var inputMarshal []byte
	inputMarshal, err = proto.Marshal(&input)
	if err != nil {
		return output, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}

	resp := new(requestf.ResponsePacket)

	err = obj.s.Tars_invoke(ctx, 0, "UserInfoGet", inputMarshal, _status, _context, resp)
	if err != nil {
		return output, err
	}
	if err = proto.Unmarshal(tools.Int8ToByte(resp.SBuffer), &output); err != nil {
		return output, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range resp.Status {
			_status[k] = v
		}
	}

	return output, nil
}

// UserContactUp is client rpc method as defined
func (obj *User) UserContactUp(input ReqUserContactData, _opt ...map[string]string) (output Result, err error) {
	ctx := context.Background()
	return obj.UserContactUpWithContext(ctx, input, _opt...)
}

// UserContactUpWithContext is client rpc method as defined
func (obj *User) UserContactUpWithContext(ctx context.Context, input ReqUserContactData, _opt ...map[string]string) (output Result, err error) {
	var inputMarshal []byte
	inputMarshal, err = proto.Marshal(&input)
	if err != nil {
		return output, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}

	resp := new(requestf.ResponsePacket)

	err = obj.s.Tars_invoke(ctx, 0, "UserContactUp", inputMarshal, _status, _context, resp)
	if err != nil {
		return output, err
	}
	if err = proto.Unmarshal(tools.Int8ToByte(resp.SBuffer), &output); err != nil {
		return output, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range resp.Status {
			_status[k] = v
		}
	}

	return output, nil
}

// UserAddressPage is client rpc method as defined
func (obj *User) UserAddressPage(input ReqCoUserAddress, _opt ...map[string]string) (output ResCoUserAddress, err error) {
	ctx := context.Background()
	return obj.UserAddressPageWithContext(ctx, input, _opt...)
}

// UserAddressPageWithContext is client rpc method as defined
func (obj *User) UserAddressPageWithContext(ctx context.Context, input ReqCoUserAddress, _opt ...map[string]string) (output ResCoUserAddress, err error) {
	var inputMarshal []byte
	inputMarshal, err = proto.Marshal(&input)
	if err != nil {
		return output, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}

	resp := new(requestf.ResponsePacket)

	err = obj.s.Tars_invoke(ctx, 0, "UserAddressPage", inputMarshal, _status, _context, resp)
	if err != nil {
		return output, err
	}
	if err = proto.Unmarshal(tools.Int8ToByte(resp.SBuffer), &output); err != nil {
		return output, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range resp.Status {
			_status[k] = v
		}
	}

	return output, nil
}

// UserAddressData is client rpc method as defined
func (obj *User) UserAddressData(input CoUserAddress, _opt ...map[string]string) (output CoUserAddress, err error) {
	ctx := context.Background()
	return obj.UserAddressDataWithContext(ctx, input, _opt...)
}

// UserAddressDataWithContext is client rpc method as defined
func (obj *User) UserAddressDataWithContext(ctx context.Context, input CoUserAddress, _opt ...map[string]string) (output CoUserAddress, err error) {
	var inputMarshal []byte
	inputMarshal, err = proto.Marshal(&input)
	if err != nil {
		return output, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}

	resp := new(requestf.ResponsePacket)

	err = obj.s.Tars_invoke(ctx, 0, "UserAddressData", inputMarshal, _status, _context, resp)
	if err != nil {
		return output, err
	}
	if err = proto.Unmarshal(tools.Int8ToByte(resp.SBuffer), &output); err != nil {
		return output, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range resp.Status {
			_status[k] = v
		}
	}

	return output, nil
}

// UserAddressSave is client rpc method as defined
func (obj *User) UserAddressSave(input CoUserAddress, _opt ...map[string]string) (output CoUserAddress, err error) {
	ctx := context.Background()
	return obj.UserAddressSaveWithContext(ctx, input, _opt...)
}

// UserAddressSaveWithContext is client rpc method as defined
func (obj *User) UserAddressSaveWithContext(ctx context.Context, input CoUserAddress, _opt ...map[string]string) (output CoUserAddress, err error) {
	var inputMarshal []byte
	inputMarshal, err = proto.Marshal(&input)
	if err != nil {
		return output, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}

	resp := new(requestf.ResponsePacket)

	err = obj.s.Tars_invoke(ctx, 0, "UserAddressSave", inputMarshal, _status, _context, resp)
	if err != nil {
		return output, err
	}
	if err = proto.Unmarshal(tools.Int8ToByte(resp.SBuffer), &output); err != nil {
		return output, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range resp.Status {
			_status[k] = v
		}
	}

	return output, nil
}

// UserAddressDelete is client rpc method as defined
func (obj *User) UserAddressDelete(input CoUserAddress, _opt ...map[string]string) (output Result, err error) {
	ctx := context.Background()
	return obj.UserAddressDeleteWithContext(ctx, input, _opt...)
}

// UserAddressDeleteWithContext is client rpc method as defined
func (obj *User) UserAddressDeleteWithContext(ctx context.Context, input CoUserAddress, _opt ...map[string]string) (output Result, err error) {
	var inputMarshal []byte
	inputMarshal, err = proto.Marshal(&input)
	if err != nil {
		return output, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}

	resp := new(requestf.ResponsePacket)

	err = obj.s.Tars_invoke(ctx, 0, "UserAddressDelete", inputMarshal, _status, _context, resp)
	if err != nil {
		return output, err
	}
	if err = proto.Unmarshal(tools.Int8ToByte(resp.SBuffer), &output); err != nil {
		return output, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range resp.Status {
			_status[k] = v
		}
	}

	return output, nil
}

// UserChainPage is client rpc method as defined
func (obj *User) UserChainPage(input ReqCoUserChain, _opt ...map[string]string) (output ResCoUserChain, err error) {
	ctx := context.Background()
	return obj.UserChainPageWithContext(ctx, input, _opt...)
}

// UserChainPageWithContext is client rpc method as defined
func (obj *User) UserChainPageWithContext(ctx context.Context, input ReqCoUserChain, _opt ...map[string]string) (output ResCoUserChain, err error) {
	var inputMarshal []byte
	inputMarshal, err = proto.Marshal(&input)
	if err != nil {
		return output, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}

	resp := new(requestf.ResponsePacket)

	err = obj.s.Tars_invoke(ctx, 0, "UserChainPage", inputMarshal, _status, _context, resp)
	if err != nil {
		return output, err
	}
	if err = proto.Unmarshal(tools.Int8ToByte(resp.SBuffer), &output); err != nil {
		return output, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range resp.Status {
			_status[k] = v
		}
	}

	return output, nil
}

// UserChainData is client rpc method as defined
func (obj *User) UserChainData(input CoUserChain, _opt ...map[string]string) (output CoUserChain, err error) {
	ctx := context.Background()
	return obj.UserChainDataWithContext(ctx, input, _opt...)
}

// UserChainDataWithContext is client rpc method as defined
func (obj *User) UserChainDataWithContext(ctx context.Context, input CoUserChain, _opt ...map[string]string) (output CoUserChain, err error) {
	var inputMarshal []byte
	inputMarshal, err = proto.Marshal(&input)
	if err != nil {
		return output, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}

	resp := new(requestf.ResponsePacket)

	err = obj.s.Tars_invoke(ctx, 0, "UserChainData", inputMarshal, _status, _context, resp)
	if err != nil {
		return output, err
	}
	if err = proto.Unmarshal(tools.Int8ToByte(resp.SBuffer), &output); err != nil {
		return output, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range resp.Status {
			_status[k] = v
		}
	}

	return output, nil
}

// UserChainSave is client rpc method as defined
func (obj *User) UserChainSave(input CoUserChain, _opt ...map[string]string) (output CoUserChain, err error) {
	ctx := context.Background()
	return obj.UserChainSaveWithContext(ctx, input, _opt...)
}

// UserChainSaveWithContext is client rpc method as defined
func (obj *User) UserChainSaveWithContext(ctx context.Context, input CoUserChain, _opt ...map[string]string) (output CoUserChain, err error) {
	var inputMarshal []byte
	inputMarshal, err = proto.Marshal(&input)
	if err != nil {
		return output, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}

	resp := new(requestf.ResponsePacket)

	err = obj.s.Tars_invoke(ctx, 0, "UserChainSave", inputMarshal, _status, _context, resp)
	if err != nil {
		return output, err
	}
	if err = proto.Unmarshal(tools.Int8ToByte(resp.SBuffer), &output); err != nil {
		return output, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range resp.Status {
			_status[k] = v
		}
	}

	return output, nil
}

// UserChainDelete is client rpc method as defined
func (obj *User) UserChainDelete(input CoUserChain, _opt ...map[string]string) (output Result, err error) {
	ctx := context.Background()
	return obj.UserChainDeleteWithContext(ctx, input, _opt...)
}

// UserChainDeleteWithContext is client rpc method as defined
func (obj *User) UserChainDeleteWithContext(ctx context.Context, input CoUserChain, _opt ...map[string]string) (output Result, err error) {
	var inputMarshal []byte
	inputMarshal, err = proto.Marshal(&input)
	if err != nil {
		return output, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}

	resp := new(requestf.ResponsePacket)

	err = obj.s.Tars_invoke(ctx, 0, "UserChainDelete", inputMarshal, _status, _context, resp)
	if err != nil {
		return output, err
	}
	if err = proto.Unmarshal(tools.Int8ToByte(resp.SBuffer), &output); err != nil {
		return output, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range resp.Status {
			_status[k] = v
		}
	}

	return output, nil
}

// UserMenuAll is client rpc method as defined
func (obj *User) UserMenuAll(input Uid, _opt ...map[string]string) (output ResCoMenu, err error) {
	ctx := context.Background()
	return obj.UserMenuAllWithContext(ctx, input, _opt...)
}

// UserMenuAllWithContext is client rpc method as defined
func (obj *User) UserMenuAllWithContext(ctx context.Context, input Uid, _opt ...map[string]string) (output ResCoMenu, err error) {
	var inputMarshal []byte
	inputMarshal, err = proto.Marshal(&input)
	if err != nil {
		return output, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}

	resp := new(requestf.ResponsePacket)

	err = obj.s.Tars_invoke(ctx, 0, "UserMenuAll", inputMarshal, _status, _context, resp)
	if err != nil {
		return output, err
	}
	if err = proto.Unmarshal(tools.Int8ToByte(resp.SBuffer), &output); err != nil {
		return output, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range resp.Status {
			_status[k] = v
		}
	}

	return output, nil
}

// UserGroupRolePage is client rpc method as defined
func (obj *User) UserGroupRolePage(input ReqCoUserGroupRole, _opt ...map[string]string) (output ResCoUserGroupRole, err error) {
	ctx := context.Background()
	return obj.UserGroupRolePageWithContext(ctx, input, _opt...)
}

// UserGroupRolePageWithContext is client rpc method as defined
func (obj *User) UserGroupRolePageWithContext(ctx context.Context, input ReqCoUserGroupRole, _opt ...map[string]string) (output ResCoUserGroupRole, err error) {
	var inputMarshal []byte
	inputMarshal, err = proto.Marshal(&input)
	if err != nil {
		return output, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}

	resp := new(requestf.ResponsePacket)

	err = obj.s.Tars_invoke(ctx, 0, "UserGroupRolePage", inputMarshal, _status, _context, resp)
	if err != nil {
		return output, err
	}
	if err = proto.Unmarshal(tools.Int8ToByte(resp.SBuffer), &output); err != nil {
		return output, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range resp.Status {
			_status[k] = v
		}
	}

	return output, nil
}

// UserGroupRoleData is client rpc method as defined
func (obj *User) UserGroupRoleData(input CoUserGroupRole, _opt ...map[string]string) (output CoUserGroupRole, err error) {
	ctx := context.Background()
	return obj.UserGroupRoleDataWithContext(ctx, input, _opt...)
}

// UserGroupRoleDataWithContext is client rpc method as defined
func (obj *User) UserGroupRoleDataWithContext(ctx context.Context, input CoUserGroupRole, _opt ...map[string]string) (output CoUserGroupRole, err error) {
	var inputMarshal []byte
	inputMarshal, err = proto.Marshal(&input)
	if err != nil {
		return output, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}

	resp := new(requestf.ResponsePacket)

	err = obj.s.Tars_invoke(ctx, 0, "UserGroupRoleData", inputMarshal, _status, _context, resp)
	if err != nil {
		return output, err
	}
	if err = proto.Unmarshal(tools.Int8ToByte(resp.SBuffer), &output); err != nil {
		return output, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range resp.Status {
			_status[k] = v
		}
	}

	return output, nil
}

// UserGroupRoleSave is client rpc method as defined
func (obj *User) UserGroupRoleSave(input CoUserGroupRole, _opt ...map[string]string) (output CoUserGroupRole, err error) {
	ctx := context.Background()
	return obj.UserGroupRoleSaveWithContext(ctx, input, _opt...)
}

// UserGroupRoleSaveWithContext is client rpc method as defined
func (obj *User) UserGroupRoleSaveWithContext(ctx context.Context, input CoUserGroupRole, _opt ...map[string]string) (output CoUserGroupRole, err error) {
	var inputMarshal []byte
	inputMarshal, err = proto.Marshal(&input)
	if err != nil {
		return output, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}

	resp := new(requestf.ResponsePacket)

	err = obj.s.Tars_invoke(ctx, 0, "UserGroupRoleSave", inputMarshal, _status, _context, resp)
	if err != nil {
		return output, err
	}
	if err = proto.Unmarshal(tools.Int8ToByte(resp.SBuffer), &output); err != nil {
		return output, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range resp.Status {
			_status[k] = v
		}
	}

	return output, nil
}

// UserGroupRoleDelete is client rpc method as defined
func (obj *User) UserGroupRoleDelete(input CoUserGroupRole, _opt ...map[string]string) (output Result, err error) {
	ctx := context.Background()
	return obj.UserGroupRoleDeleteWithContext(ctx, input, _opt...)
}

// UserGroupRoleDeleteWithContext is client rpc method as defined
func (obj *User) UserGroupRoleDeleteWithContext(ctx context.Context, input CoUserGroupRole, _opt ...map[string]string) (output Result, err error) {
	var inputMarshal []byte
	inputMarshal, err = proto.Marshal(&input)
	if err != nil {
		return output, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}

	resp := new(requestf.ResponsePacket)

	err = obj.s.Tars_invoke(ctx, 0, "UserGroupRoleDelete", inputMarshal, _status, _context, resp)
	if err != nil {
		return output, err
	}
	if err = proto.Unmarshal(tools.Int8ToByte(resp.SBuffer), &output); err != nil {
		return output, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range resp.Status {
			_status[k] = v
		}
	}

	return output, nil
}

// UserCustomerPage is client rpc method as defined
func (obj *User) UserCustomerPage(input ReqCoUserCustomer, _opt ...map[string]string) (output ResCoUserCustomer, err error) {
	ctx := context.Background()
	return obj.UserCustomerPageWithContext(ctx, input, _opt...)
}

// UserCustomerPageWithContext is client rpc method as defined
func (obj *User) UserCustomerPageWithContext(ctx context.Context, input ReqCoUserCustomer, _opt ...map[string]string) (output ResCoUserCustomer, err error) {
	var inputMarshal []byte
	inputMarshal, err = proto.Marshal(&input)
	if err != nil {
		return output, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}

	resp := new(requestf.ResponsePacket)

	err = obj.s.Tars_invoke(ctx, 0, "UserCustomerPage", inputMarshal, _status, _context, resp)
	if err != nil {
		return output, err
	}
	if err = proto.Unmarshal(tools.Int8ToByte(resp.SBuffer), &output); err != nil {
		return output, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range resp.Status {
			_status[k] = v
		}
	}

	return output, nil
}

// UserCustomerData is client rpc method as defined
func (obj *User) UserCustomerData(input CoUserCustomer, _opt ...map[string]string) (output CoUserCustomer, err error) {
	ctx := context.Background()
	return obj.UserCustomerDataWithContext(ctx, input, _opt...)
}

// UserCustomerDataWithContext is client rpc method as defined
func (obj *User) UserCustomerDataWithContext(ctx context.Context, input CoUserCustomer, _opt ...map[string]string) (output CoUserCustomer, err error) {
	var inputMarshal []byte
	inputMarshal, err = proto.Marshal(&input)
	if err != nil {
		return output, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}

	resp := new(requestf.ResponsePacket)

	err = obj.s.Tars_invoke(ctx, 0, "UserCustomerData", inputMarshal, _status, _context, resp)
	if err != nil {
		return output, err
	}
	if err = proto.Unmarshal(tools.Int8ToByte(resp.SBuffer), &output); err != nil {
		return output, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range resp.Status {
			_status[k] = v
		}
	}

	return output, nil
}

// UserCustomerSave is client rpc method as defined
func (obj *User) UserCustomerSave(input CoUserCustomer, _opt ...map[string]string) (output CoUserCustomer, err error) {
	ctx := context.Background()
	return obj.UserCustomerSaveWithContext(ctx, input, _opt...)
}

// UserCustomerSaveWithContext is client rpc method as defined
func (obj *User) UserCustomerSaveWithContext(ctx context.Context, input CoUserCustomer, _opt ...map[string]string) (output CoUserCustomer, err error) {
	var inputMarshal []byte
	inputMarshal, err = proto.Marshal(&input)
	if err != nil {
		return output, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}

	resp := new(requestf.ResponsePacket)

	err = obj.s.Tars_invoke(ctx, 0, "UserCustomerSave", inputMarshal, _status, _context, resp)
	if err != nil {
		return output, err
	}
	if err = proto.Unmarshal(tools.Int8ToByte(resp.SBuffer), &output); err != nil {
		return output, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range resp.Status {
			_status[k] = v
		}
	}

	return output, nil
}

// UserCustomerDelete is client rpc method as defined
func (obj *User) UserCustomerDelete(input CoUserCustomer, _opt ...map[string]string) (output Result, err error) {
	ctx := context.Background()
	return obj.UserCustomerDeleteWithContext(ctx, input, _opt...)
}

// UserCustomerDeleteWithContext is client rpc method as defined
func (obj *User) UserCustomerDeleteWithContext(ctx context.Context, input CoUserCustomer, _opt ...map[string]string) (output Result, err error) {
	var inputMarshal []byte
	inputMarshal, err = proto.Marshal(&input)
	if err != nil {
		return output, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}

	resp := new(requestf.ResponsePacket)

	err = obj.s.Tars_invoke(ctx, 0, "UserCustomerDelete", inputMarshal, _status, _context, resp)
	if err != nil {
		return output, err
	}
	if err = proto.Unmarshal(tools.Int8ToByte(resp.SBuffer), &output); err != nil {
		return output, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range resp.Status {
			_status[k] = v
		}
	}

	return output, nil
}

// UserOrderPage is client rpc method as defined
func (obj *User) UserOrderPage(input ReqCoUserOrder, _opt ...map[string]string) (output ResCoUserOrder, err error) {
	ctx := context.Background()
	return obj.UserOrderPageWithContext(ctx, input, _opt...)
}

// UserOrderPageWithContext is client rpc method as defined
func (obj *User) UserOrderPageWithContext(ctx context.Context, input ReqCoUserOrder, _opt ...map[string]string) (output ResCoUserOrder, err error) {
	var inputMarshal []byte
	inputMarshal, err = proto.Marshal(&input)
	if err != nil {
		return output, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}

	resp := new(requestf.ResponsePacket)

	err = obj.s.Tars_invoke(ctx, 0, "UserOrderPage", inputMarshal, _status, _context, resp)
	if err != nil {
		return output, err
	}
	if err = proto.Unmarshal(tools.Int8ToByte(resp.SBuffer), &output); err != nil {
		return output, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range resp.Status {
			_status[k] = v
		}
	}

	return output, nil
}

// UserOrderData is client rpc method as defined
func (obj *User) UserOrderData(input CoUserOrder, _opt ...map[string]string) (output CoUserOrder, err error) {
	ctx := context.Background()
	return obj.UserOrderDataWithContext(ctx, input, _opt...)
}

// UserOrderDataWithContext is client rpc method as defined
func (obj *User) UserOrderDataWithContext(ctx context.Context, input CoUserOrder, _opt ...map[string]string) (output CoUserOrder, err error) {
	var inputMarshal []byte
	inputMarshal, err = proto.Marshal(&input)
	if err != nil {
		return output, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}

	resp := new(requestf.ResponsePacket)

	err = obj.s.Tars_invoke(ctx, 0, "UserOrderData", inputMarshal, _status, _context, resp)
	if err != nil {
		return output, err
	}
	if err = proto.Unmarshal(tools.Int8ToByte(resp.SBuffer), &output); err != nil {
		return output, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range resp.Status {
			_status[k] = v
		}
	}

	return output, nil
}

// UserOrderUp is client rpc method as defined
func (obj *User) UserOrderUp(input CoUserOrder, _opt ...map[string]string) (output CoUserOrder, err error) {
	ctx := context.Background()
	return obj.UserOrderUpWithContext(ctx, input, _opt...)
}

// UserOrderUpWithContext is client rpc method as defined
func (obj *User) UserOrderUpWithContext(ctx context.Context, input CoUserOrder, _opt ...map[string]string) (output CoUserOrder, err error) {
	var inputMarshal []byte
	inputMarshal, err = proto.Marshal(&input)
	if err != nil {
		return output, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}

	resp := new(requestf.ResponsePacket)

	err = obj.s.Tars_invoke(ctx, 0, "UserOrderUp", inputMarshal, _status, _context, resp)
	if err != nil {
		return output, err
	}
	if err = proto.Unmarshal(tools.Int8ToByte(resp.SBuffer), &output); err != nil {
		return output, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range resp.Status {
			_status[k] = v
		}
	}

	return output, nil
}

// UserOrderDelete is client rpc method as defined
func (obj *User) UserOrderDelete(input CoUserOrder, _opt ...map[string]string) (output Result, err error) {
	ctx := context.Background()
	return obj.UserOrderDeleteWithContext(ctx, input, _opt...)
}

// UserOrderDeleteWithContext is client rpc method as defined
func (obj *User) UserOrderDeleteWithContext(ctx context.Context, input CoUserOrder, _opt ...map[string]string) (output Result, err error) {
	var inputMarshal []byte
	inputMarshal, err = proto.Marshal(&input)
	if err != nil {
		return output, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}

	resp := new(requestf.ResponsePacket)

	err = obj.s.Tars_invoke(ctx, 0, "UserOrderDelete", inputMarshal, _status, _context, resp)
	if err != nil {
		return output, err
	}
	if err = proto.Unmarshal(tools.Int8ToByte(resp.SBuffer), &output); err != nil {
		return output, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range resp.Status {
			_status[k] = v
		}
	}

	return output, nil
}

// UserPointsSetInfo is client rpc method as defined
func (obj *User) UserPointsSetInfo(input CoUserPoints, _opt ...map[string]string) (output CoUserPoints, err error) {
	ctx := context.Background()
	return obj.UserPointsSetInfoWithContext(ctx, input, _opt...)
}

// UserPointsSetInfoWithContext is client rpc method as defined
func (obj *User) UserPointsSetInfoWithContext(ctx context.Context, input CoUserPoints, _opt ...map[string]string) (output CoUserPoints, err error) {
	var inputMarshal []byte
	inputMarshal, err = proto.Marshal(&input)
	if err != nil {
		return output, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}

	resp := new(requestf.ResponsePacket)

	err = obj.s.Tars_invoke(ctx, 0, "UserPointsSetInfo", inputMarshal, _status, _context, resp)
	if err != nil {
		return output, err
	}
	if err = proto.Unmarshal(tools.Int8ToByte(resp.SBuffer), &output); err != nil {
		return output, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range resp.Status {
			_status[k] = v
		}
	}

	return output, nil
}

// UserPointsSetUpdate is client rpc method as defined
func (obj *User) UserPointsSetUpdate(input CoUserPoints, _opt ...map[string]string) (output CoUserPoints, err error) {
	ctx := context.Background()
	return obj.UserPointsSetUpdateWithContext(ctx, input, _opt...)
}

// UserPointsSetUpdateWithContext is client rpc method as defined
func (obj *User) UserPointsSetUpdateWithContext(ctx context.Context, input CoUserPoints, _opt ...map[string]string) (output CoUserPoints, err error) {
	var inputMarshal []byte
	inputMarshal, err = proto.Marshal(&input)
	if err != nil {
		return output, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}

	resp := new(requestf.ResponsePacket)

	err = obj.s.Tars_invoke(ctx, 0, "UserPointsSetUpdate", inputMarshal, _status, _context, resp)
	if err != nil {
		return output, err
	}
	if err = proto.Unmarshal(tools.Int8ToByte(resp.SBuffer), &output); err != nil {
		return output, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range resp.Status {
			_status[k] = v
		}
	}

	return output, nil
}

// UserPointsRuleList is client rpc method as defined
func (obj *User) UserPointsRuleList(input ReqCoUserPointsRule, _opt ...map[string]string) (output ResCoUserPointsRule, err error) {
	ctx := context.Background()
	return obj.UserPointsRuleListWithContext(ctx, input, _opt...)
}

// UserPointsRuleListWithContext is client rpc method as defined
func (obj *User) UserPointsRuleListWithContext(ctx context.Context, input ReqCoUserPointsRule, _opt ...map[string]string) (output ResCoUserPointsRule, err error) {
	var inputMarshal []byte
	inputMarshal, err = proto.Marshal(&input)
	if err != nil {
		return output, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}

	resp := new(requestf.ResponsePacket)

	err = obj.s.Tars_invoke(ctx, 0, "UserPointsRuleList", inputMarshal, _status, _context, resp)
	if err != nil {
		return output, err
	}
	if err = proto.Unmarshal(tools.Int8ToByte(resp.SBuffer), &output); err != nil {
		return output, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range resp.Status {
			_status[k] = v
		}
	}

	return output, nil
}

// UserPointsRuleData is client rpc method as defined
func (obj *User) UserPointsRuleData(input CoUserPointsRule, _opt ...map[string]string) (output CoUserPointsRule, err error) {
	ctx := context.Background()
	return obj.UserPointsRuleDataWithContext(ctx, input, _opt...)
}

// UserPointsRuleDataWithContext is client rpc method as defined
func (obj *User) UserPointsRuleDataWithContext(ctx context.Context, input CoUserPointsRule, _opt ...map[string]string) (output CoUserPointsRule, err error) {
	var inputMarshal []byte
	inputMarshal, err = proto.Marshal(&input)
	if err != nil {
		return output, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}

	resp := new(requestf.ResponsePacket)

	err = obj.s.Tars_invoke(ctx, 0, "UserPointsRuleData", inputMarshal, _status, _context, resp)
	if err != nil {
		return output, err
	}
	if err = proto.Unmarshal(tools.Int8ToByte(resp.SBuffer), &output); err != nil {
		return output, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range resp.Status {
			_status[k] = v
		}
	}

	return output, nil
}

// UserPointsRuleSave is client rpc method as defined
func (obj *User) UserPointsRuleSave(input CoUserPointsRule, _opt ...map[string]string) (output CoUserPointsRule, err error) {
	ctx := context.Background()
	return obj.UserPointsRuleSaveWithContext(ctx, input, _opt...)
}

// UserPointsRuleSaveWithContext is client rpc method as defined
func (obj *User) UserPointsRuleSaveWithContext(ctx context.Context, input CoUserPointsRule, _opt ...map[string]string) (output CoUserPointsRule, err error) {
	var inputMarshal []byte
	inputMarshal, err = proto.Marshal(&input)
	if err != nil {
		return output, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}

	resp := new(requestf.ResponsePacket)

	err = obj.s.Tars_invoke(ctx, 0, "UserPointsRuleSave", inputMarshal, _status, _context, resp)
	if err != nil {
		return output, err
	}
	if err = proto.Unmarshal(tools.Int8ToByte(resp.SBuffer), &output); err != nil {
		return output, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range resp.Status {
			_status[k] = v
		}
	}

	return output, nil
}

// UserPointsRuleDelete is client rpc method as defined
func (obj *User) UserPointsRuleDelete(input CoUserPointsRule, _opt ...map[string]string) (output Result, err error) {
	ctx := context.Background()
	return obj.UserPointsRuleDeleteWithContext(ctx, input, _opt...)
}

// UserPointsRuleDeleteWithContext is client rpc method as defined
func (obj *User) UserPointsRuleDeleteWithContext(ctx context.Context, input CoUserPointsRule, _opt ...map[string]string) (output Result, err error) {
	var inputMarshal []byte
	inputMarshal, err = proto.Marshal(&input)
	if err != nil {
		return output, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}

	resp := new(requestf.ResponsePacket)

	err = obj.s.Tars_invoke(ctx, 0, "UserPointsRuleDelete", inputMarshal, _status, _context, resp)
	if err != nil {
		return output, err
	}
	if err = proto.Unmarshal(tools.Int8ToByte(resp.SBuffer), &output); err != nil {
		return output, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range resp.Status {
			_status[k] = v
		}
	}

	return output, nil
}

// UserBenefitOwn is client rpc method as defined
func (obj *User) UserBenefitOwn(input Uid, _opt ...map[string]string) (output ResUserBenefitOwn, err error) {
	ctx := context.Background()
	return obj.UserBenefitOwnWithContext(ctx, input, _opt...)
}

// UserBenefitOwnWithContext is client rpc method as defined
func (obj *User) UserBenefitOwnWithContext(ctx context.Context, input Uid, _opt ...map[string]string) (output ResUserBenefitOwn, err error) {
	var inputMarshal []byte
	inputMarshal, err = proto.Marshal(&input)
	if err != nil {
		return output, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}

	resp := new(requestf.ResponsePacket)

	err = obj.s.Tars_invoke(ctx, 0, "UserBenefitOwn", inputMarshal, _status, _context, resp)
	if err != nil {
		return output, err
	}
	if err = proto.Unmarshal(tools.Int8ToByte(resp.SBuffer), &output); err != nil {
		return output, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range resp.Status {
			_status[k] = v
		}
	}

	return output, nil
}

// UserBenefitDiyPage is client rpc method as defined
func (obj *User) UserBenefitDiyPage(input ReqCoUserBenefitDiy, _opt ...map[string]string) (output ResCoUserBenefitDiy, err error) {
	ctx := context.Background()
	return obj.UserBenefitDiyPageWithContext(ctx, input, _opt...)
}

// UserBenefitDiyPageWithContext is client rpc method as defined
func (obj *User) UserBenefitDiyPageWithContext(ctx context.Context, input ReqCoUserBenefitDiy, _opt ...map[string]string) (output ResCoUserBenefitDiy, err error) {
	var inputMarshal []byte
	inputMarshal, err = proto.Marshal(&input)
	if err != nil {
		return output, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}

	resp := new(requestf.ResponsePacket)

	err = obj.s.Tars_invoke(ctx, 0, "UserBenefitDiyPage", inputMarshal, _status, _context, resp)
	if err != nil {
		return output, err
	}
	if err = proto.Unmarshal(tools.Int8ToByte(resp.SBuffer), &output); err != nil {
		return output, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range resp.Status {
			_status[k] = v
		}
	}

	return output, nil
}

// UserBenefitDiyData is client rpc method as defined
func (obj *User) UserBenefitDiyData(input CoUserBenefitDiy, _opt ...map[string]string) (output CoUserBenefitDiy, err error) {
	ctx := context.Background()
	return obj.UserBenefitDiyDataWithContext(ctx, input, _opt...)
}

// UserBenefitDiyDataWithContext is client rpc method as defined
func (obj *User) UserBenefitDiyDataWithContext(ctx context.Context, input CoUserBenefitDiy, _opt ...map[string]string) (output CoUserBenefitDiy, err error) {
	var inputMarshal []byte
	inputMarshal, err = proto.Marshal(&input)
	if err != nil {
		return output, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}

	resp := new(requestf.ResponsePacket)

	err = obj.s.Tars_invoke(ctx, 0, "UserBenefitDiyData", inputMarshal, _status, _context, resp)
	if err != nil {
		return output, err
	}
	if err = proto.Unmarshal(tools.Int8ToByte(resp.SBuffer), &output); err != nil {
		return output, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range resp.Status {
			_status[k] = v
		}
	}

	return output, nil
}

// UserBenefitDiySave is client rpc method as defined
func (obj *User) UserBenefitDiySave(input CoUserBenefitDiy, _opt ...map[string]string) (output CoUserBenefitDiy, err error) {
	ctx := context.Background()
	return obj.UserBenefitDiySaveWithContext(ctx, input, _opt...)
}

// UserBenefitDiySaveWithContext is client rpc method as defined
func (obj *User) UserBenefitDiySaveWithContext(ctx context.Context, input CoUserBenefitDiy, _opt ...map[string]string) (output CoUserBenefitDiy, err error) {
	var inputMarshal []byte
	inputMarshal, err = proto.Marshal(&input)
	if err != nil {
		return output, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}

	resp := new(requestf.ResponsePacket)

	err = obj.s.Tars_invoke(ctx, 0, "UserBenefitDiySave", inputMarshal, _status, _context, resp)
	if err != nil {
		return output, err
	}
	if err = proto.Unmarshal(tools.Int8ToByte(resp.SBuffer), &output); err != nil {
		return output, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range resp.Status {
			_status[k] = v
		}
	}

	return output, nil
}

// UserBenefitDiyDelete is client rpc method as defined
func (obj *User) UserBenefitDiyDelete(input CoUserBenefitDiy, _opt ...map[string]string) (output Result, err error) {
	ctx := context.Background()
	return obj.UserBenefitDiyDeleteWithContext(ctx, input, _opt...)
}

// UserBenefitDiyDeleteWithContext is client rpc method as defined
func (obj *User) UserBenefitDiyDeleteWithContext(ctx context.Context, input CoUserBenefitDiy, _opt ...map[string]string) (output Result, err error) {
	var inputMarshal []byte
	inputMarshal, err = proto.Marshal(&input)
	if err != nil {
		return output, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}

	resp := new(requestf.ResponsePacket)

	err = obj.s.Tars_invoke(ctx, 0, "UserBenefitDiyDelete", inputMarshal, _status, _context, resp)
	if err != nil {
		return output, err
	}
	if err = proto.Unmarshal(tools.Int8ToByte(resp.SBuffer), &output); err != nil {
		return output, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range resp.Status {
			_status[k] = v
		}
	}

	return output, nil
}

// UserBenefitPage is client rpc method as defined
func (obj *User) UserBenefitPage(input ReqCoUserBenefit, _opt ...map[string]string) (output Result, err error) {
	ctx := context.Background()
	return obj.UserBenefitPageWithContext(ctx, input, _opt...)
}

// UserBenefitPageWithContext is client rpc method as defined
func (obj *User) UserBenefitPageWithContext(ctx context.Context, input ReqCoUserBenefit, _opt ...map[string]string) (output Result, err error) {
	var inputMarshal []byte
	inputMarshal, err = proto.Marshal(&input)
	if err != nil {
		return output, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}

	resp := new(requestf.ResponsePacket)

	err = obj.s.Tars_invoke(ctx, 0, "UserBenefitPage", inputMarshal, _status, _context, resp)
	if err != nil {
		return output, err
	}
	if err = proto.Unmarshal(tools.Int8ToByte(resp.SBuffer), &output); err != nil {
		return output, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range resp.Status {
			_status[k] = v
		}
	}

	return output, nil
}

// UserBenefitData is client rpc method as defined
func (obj *User) UserBenefitData(input CoUserBenefit, _opt ...map[string]string) (output Result, err error) {
	ctx := context.Background()
	return obj.UserBenefitDataWithContext(ctx, input, _opt...)
}

// UserBenefitDataWithContext is client rpc method as defined
func (obj *User) UserBenefitDataWithContext(ctx context.Context, input CoUserBenefit, _opt ...map[string]string) (output Result, err error) {
	var inputMarshal []byte
	inputMarshal, err = proto.Marshal(&input)
	if err != nil {
		return output, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}

	resp := new(requestf.ResponsePacket)

	err = obj.s.Tars_invoke(ctx, 0, "UserBenefitData", inputMarshal, _status, _context, resp)
	if err != nil {
		return output, err
	}
	if err = proto.Unmarshal(tools.Int8ToByte(resp.SBuffer), &output); err != nil {
		return output, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range resp.Status {
			_status[k] = v
		}
	}

	return output, nil
}

// UserBenefitSave is client rpc method as defined
func (obj *User) UserBenefitSave(input SaveCoUserBenefit, _opt ...map[string]string) (output Result, err error) {
	ctx := context.Background()
	return obj.UserBenefitSaveWithContext(ctx, input, _opt...)
}

// UserBenefitSaveWithContext is client rpc method as defined
func (obj *User) UserBenefitSaveWithContext(ctx context.Context, input SaveCoUserBenefit, _opt ...map[string]string) (output Result, err error) {
	var inputMarshal []byte
	inputMarshal, err = proto.Marshal(&input)
	if err != nil {
		return output, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}

	resp := new(requestf.ResponsePacket)

	err = obj.s.Tars_invoke(ctx, 0, "UserBenefitSave", inputMarshal, _status, _context, resp)
	if err != nil {
		return output, err
	}
	if err = proto.Unmarshal(tools.Int8ToByte(resp.SBuffer), &output); err != nil {
		return output, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range resp.Status {
			_status[k] = v
		}
	}

	return output, nil
}

// UserBenefitDelete is client rpc method as defined
func (obj *User) UserBenefitDelete(input CoUserBenefit, _opt ...map[string]string) (output Result, err error) {
	ctx := context.Background()
	return obj.UserBenefitDeleteWithContext(ctx, input, _opt...)
}

// UserBenefitDeleteWithContext is client rpc method as defined
func (obj *User) UserBenefitDeleteWithContext(ctx context.Context, input CoUserBenefit, _opt ...map[string]string) (output Result, err error) {
	var inputMarshal []byte
	inputMarshal, err = proto.Marshal(&input)
	if err != nil {
		return output, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}

	resp := new(requestf.ResponsePacket)

	err = obj.s.Tars_invoke(ctx, 0, "UserBenefitDelete", inputMarshal, _status, _context, resp)
	if err != nil {
		return output, err
	}
	if err = proto.Unmarshal(tools.Int8ToByte(resp.SBuffer), &output); err != nil {
		return output, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range resp.Status {
			_status[k] = v
		}
	}

	return output, nil
}

// UserStaffPage is client rpc method as defined
func (obj *User) UserStaffPage(input ReqCoUserStaff, _opt ...map[string]string) (output ResCoUserStaff, err error) {
	ctx := context.Background()
	return obj.UserStaffPageWithContext(ctx, input, _opt...)
}

// UserStaffPageWithContext is client rpc method as defined
func (obj *User) UserStaffPageWithContext(ctx context.Context, input ReqCoUserStaff, _opt ...map[string]string) (output ResCoUserStaff, err error) {
	var inputMarshal []byte
	inputMarshal, err = proto.Marshal(&input)
	if err != nil {
		return output, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}

	resp := new(requestf.ResponsePacket)

	err = obj.s.Tars_invoke(ctx, 0, "UserStaffPage", inputMarshal, _status, _context, resp)
	if err != nil {
		return output, err
	}
	if err = proto.Unmarshal(tools.Int8ToByte(resp.SBuffer), &output); err != nil {
		return output, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range resp.Status {
			_status[k] = v
		}
	}

	return output, nil
}

// UserStaffData is client rpc method as defined
func (obj *User) UserStaffData(input CoUserStaff, _opt ...map[string]string) (output CoUserStaff, err error) {
	ctx := context.Background()
	return obj.UserStaffDataWithContext(ctx, input, _opt...)
}

// UserStaffDataWithContext is client rpc method as defined
func (obj *User) UserStaffDataWithContext(ctx context.Context, input CoUserStaff, _opt ...map[string]string) (output CoUserStaff, err error) {
	var inputMarshal []byte
	inputMarshal, err = proto.Marshal(&input)
	if err != nil {
		return output, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}

	resp := new(requestf.ResponsePacket)

	err = obj.s.Tars_invoke(ctx, 0, "UserStaffData", inputMarshal, _status, _context, resp)
	if err != nil {
		return output, err
	}
	if err = proto.Unmarshal(tools.Int8ToByte(resp.SBuffer), &output); err != nil {
		return output, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range resp.Status {
			_status[k] = v
		}
	}

	return output, nil
}

// UserStaffSave is client rpc method as defined
func (obj *User) UserStaffSave(input CoUserStaff, _opt ...map[string]string) (output CoUserStaff, err error) {
	ctx := context.Background()
	return obj.UserStaffSaveWithContext(ctx, input, _opt...)
}

// UserStaffSaveWithContext is client rpc method as defined
func (obj *User) UserStaffSaveWithContext(ctx context.Context, input CoUserStaff, _opt ...map[string]string) (output CoUserStaff, err error) {
	var inputMarshal []byte
	inputMarshal, err = proto.Marshal(&input)
	if err != nil {
		return output, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}

	resp := new(requestf.ResponsePacket)

	err = obj.s.Tars_invoke(ctx, 0, "UserStaffSave", inputMarshal, _status, _context, resp)
	if err != nil {
		return output, err
	}
	if err = proto.Unmarshal(tools.Int8ToByte(resp.SBuffer), &output); err != nil {
		return output, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range resp.Status {
			_status[k] = v
		}
	}

	return output, nil
}

// UserStaffDelete is client rpc method as defined
func (obj *User) UserStaffDelete(input CoUserStaff, _opt ...map[string]string) (output Result, err error) {
	ctx := context.Background()
	return obj.UserStaffDeleteWithContext(ctx, input, _opt...)
}

// UserStaffDeleteWithContext is client rpc method as defined
func (obj *User) UserStaffDeleteWithContext(ctx context.Context, input CoUserStaff, _opt ...map[string]string) (output Result, err error) {
	var inputMarshal []byte
	inputMarshal, err = proto.Marshal(&input)
	if err != nil {
		return output, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}

	resp := new(requestf.ResponsePacket)

	err = obj.s.Tars_invoke(ctx, 0, "UserStaffDelete", inputMarshal, _status, _context, resp)
	if err != nil {
		return output, err
	}
	if err = proto.Unmarshal(tools.Int8ToByte(resp.SBuffer), &output); err != nil {
		return output, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range resp.Status {
			_status[k] = v
		}
	}

	return output, nil
}

// UserStorePage is client rpc method as defined
func (obj *User) UserStorePage(input ReqCoUserStore, _opt ...map[string]string) (output ResCoUserStore, err error) {
	ctx := context.Background()
	return obj.UserStorePageWithContext(ctx, input, _opt...)
}

// UserStorePageWithContext is client rpc method as defined
func (obj *User) UserStorePageWithContext(ctx context.Context, input ReqCoUserStore, _opt ...map[string]string) (output ResCoUserStore, err error) {
	var inputMarshal []byte
	inputMarshal, err = proto.Marshal(&input)
	if err != nil {
		return output, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}

	resp := new(requestf.ResponsePacket)

	err = obj.s.Tars_invoke(ctx, 0, "UserStorePage", inputMarshal, _status, _context, resp)
	if err != nil {
		return output, err
	}
	if err = proto.Unmarshal(tools.Int8ToByte(resp.SBuffer), &output); err != nil {
		return output, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range resp.Status {
			_status[k] = v
		}
	}

	return output, nil
}

// UserStoreData is client rpc method as defined
func (obj *User) UserStoreData(input CoUserStore, _opt ...map[string]string) (output CoUserStore, err error) {
	ctx := context.Background()
	return obj.UserStoreDataWithContext(ctx, input, _opt...)
}

// UserStoreDataWithContext is client rpc method as defined
func (obj *User) UserStoreDataWithContext(ctx context.Context, input CoUserStore, _opt ...map[string]string) (output CoUserStore, err error) {
	var inputMarshal []byte
	inputMarshal, err = proto.Marshal(&input)
	if err != nil {
		return output, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}

	resp := new(requestf.ResponsePacket)

	err = obj.s.Tars_invoke(ctx, 0, "UserStoreData", inputMarshal, _status, _context, resp)
	if err != nil {
		return output, err
	}
	if err = proto.Unmarshal(tools.Int8ToByte(resp.SBuffer), &output); err != nil {
		return output, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range resp.Status {
			_status[k] = v
		}
	}

	return output, nil
}

// UserStoreSave is client rpc method as defined
func (obj *User) UserStoreSave(input CoUserStore, _opt ...map[string]string) (output CoUserStore, err error) {
	ctx := context.Background()
	return obj.UserStoreSaveWithContext(ctx, input, _opt...)
}

// UserStoreSaveWithContext is client rpc method as defined
func (obj *User) UserStoreSaveWithContext(ctx context.Context, input CoUserStore, _opt ...map[string]string) (output CoUserStore, err error) {
	var inputMarshal []byte
	inputMarshal, err = proto.Marshal(&input)
	if err != nil {
		return output, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}

	resp := new(requestf.ResponsePacket)

	err = obj.s.Tars_invoke(ctx, 0, "UserStoreSave", inputMarshal, _status, _context, resp)
	if err != nil {
		return output, err
	}
	if err = proto.Unmarshal(tools.Int8ToByte(resp.SBuffer), &output); err != nil {
		return output, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range resp.Status {
			_status[k] = v
		}
	}

	return output, nil
}

// UserStoreDelete is client rpc method as defined
func (obj *User) UserStoreDelete(input CoUserStore, _opt ...map[string]string) (output Result, err error) {
	ctx := context.Background()
	return obj.UserStoreDeleteWithContext(ctx, input, _opt...)
}

// UserStoreDeleteWithContext is client rpc method as defined
func (obj *User) UserStoreDeleteWithContext(ctx context.Context, input CoUserStore, _opt ...map[string]string) (output Result, err error) {
	var inputMarshal []byte
	inputMarshal, err = proto.Marshal(&input)
	if err != nil {
		return output, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}

	resp := new(requestf.ResponsePacket)

	err = obj.s.Tars_invoke(ctx, 0, "UserStoreDelete", inputMarshal, _status, _context, resp)
	if err != nil {
		return output, err
	}
	if err = proto.Unmarshal(tools.Int8ToByte(resp.SBuffer), &output); err != nil {
		return output, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range resp.Status {
			_status[k] = v
		}
	}

	return output, nil
}

// UserSettingInfo is client rpc method as defined
func (obj *User) UserSettingInfo(input CoUserSetting, _opt ...map[string]string) (output Result, err error) {
	ctx := context.Background()
	return obj.UserSettingInfoWithContext(ctx, input, _opt...)
}

// UserSettingInfoWithContext is client rpc method as defined
func (obj *User) UserSettingInfoWithContext(ctx context.Context, input CoUserSetting, _opt ...map[string]string) (output Result, err error) {
	var inputMarshal []byte
	inputMarshal, err = proto.Marshal(&input)
	if err != nil {
		return output, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}

	resp := new(requestf.ResponsePacket)

	err = obj.s.Tars_invoke(ctx, 0, "UserSettingInfo", inputMarshal, _status, _context, resp)
	if err != nil {
		return output, err
	}
	if err = proto.Unmarshal(tools.Int8ToByte(resp.SBuffer), &output); err != nil {
		return output, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range resp.Status {
			_status[k] = v
		}
	}

	return output, nil
}

// UserSettingSave is client rpc method as defined
func (obj *User) UserSettingSave(input SaveCoUserSetting, _opt ...map[string]string) (output Result, err error) {
	ctx := context.Background()
	return obj.UserSettingSaveWithContext(ctx, input, _opt...)
}

// UserSettingSaveWithContext is client rpc method as defined
func (obj *User) UserSettingSaveWithContext(ctx context.Context, input SaveCoUserSetting, _opt ...map[string]string) (output Result, err error) {
	var inputMarshal []byte
	inputMarshal, err = proto.Marshal(&input)
	if err != nil {
		return output, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}

	resp := new(requestf.ResponsePacket)

	err = obj.s.Tars_invoke(ctx, 0, "UserSettingSave", inputMarshal, _status, _context, resp)
	if err != nil {
		return output, err
	}
	if err = proto.Unmarshal(tools.Int8ToByte(resp.SBuffer), &output); err != nil {
		return output, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range resp.Status {
			_status[k] = v
		}
	}

	return output, nil
}

// UserSettingValue is client rpc method as defined
func (obj *User) UserSettingValue(input ResCoUserSettingValue, _opt ...map[string]string) (output Result, err error) {
	ctx := context.Background()
	return obj.UserSettingValueWithContext(ctx, input, _opt...)
}

// UserSettingValueWithContext is client rpc method as defined
func (obj *User) UserSettingValueWithContext(ctx context.Context, input ResCoUserSettingValue, _opt ...map[string]string) (output Result, err error) {
	var inputMarshal []byte
	inputMarshal, err = proto.Marshal(&input)
	if err != nil {
		return output, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}

	resp := new(requestf.ResponsePacket)

	err = obj.s.Tars_invoke(ctx, 0, "UserSettingValue", inputMarshal, _status, _context, resp)
	if err != nil {
		return output, err
	}
	if err = proto.Unmarshal(tools.Int8ToByte(resp.SBuffer), &output); err != nil {
		return output, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range resp.Status {
			_status[k] = v
		}
	}

	return output, nil
}

// UserDecoFeature is client rpc method as defined
func (obj *User) UserDecoFeature(input ReqCoUserDecoFeature, _opt ...map[string]string) (output Result, err error) {
	ctx := context.Background()
	return obj.UserDecoFeatureWithContext(ctx, input, _opt...)
}

// UserDecoFeatureWithContext is client rpc method as defined
func (obj *User) UserDecoFeatureWithContext(ctx context.Context, input ReqCoUserDecoFeature, _opt ...map[string]string) (output Result, err error) {
	var inputMarshal []byte
	inputMarshal, err = proto.Marshal(&input)
	if err != nil {
		return output, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}

	resp := new(requestf.ResponsePacket)

	err = obj.s.Tars_invoke(ctx, 0, "UserDecoFeature", inputMarshal, _status, _context, resp)
	if err != nil {
		return output, err
	}
	if err = proto.Unmarshal(tools.Int8ToByte(resp.SBuffer), &output); err != nil {
		return output, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range resp.Status {
			_status[k] = v
		}
	}

	return output, nil
}

// DecoModuleList is client rpc method as defined
func (obj *User) DecoModuleList(input ReqCoUserDecoUsePos, _opt ...map[string]string) (output ResCoUserDecoModuleList, err error) {
	ctx := context.Background()
	return obj.DecoModuleListWithContext(ctx, input, _opt...)
}

// DecoModuleListWithContext is client rpc method as defined
func (obj *User) DecoModuleListWithContext(ctx context.Context, input ReqCoUserDecoUsePos, _opt ...map[string]string) (output ResCoUserDecoModuleList, err error) {
	var inputMarshal []byte
	inputMarshal, err = proto.Marshal(&input)
	if err != nil {
		return output, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}

	resp := new(requestf.ResponsePacket)

	err = obj.s.Tars_invoke(ctx, 0, "DecoModuleList", inputMarshal, _status, _context, resp)
	if err != nil {
		return output, err
	}
	if err = proto.Unmarshal(tools.Int8ToByte(resp.SBuffer), &output); err != nil {
		return output, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range resp.Status {
			_status[k] = v
		}
	}

	return output, nil
}

// DecoModuleInfo is client rpc method as defined
func (obj *User) DecoModuleInfo(input IdCoId, _opt ...map[string]string) (output Result, err error) {
	ctx := context.Background()
	return obj.DecoModuleInfoWithContext(ctx, input, _opt...)
}

// DecoModuleInfoWithContext is client rpc method as defined
func (obj *User) DecoModuleInfoWithContext(ctx context.Context, input IdCoId, _opt ...map[string]string) (output Result, err error) {
	var inputMarshal []byte
	inputMarshal, err = proto.Marshal(&input)
	if err != nil {
		return output, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}

	resp := new(requestf.ResponsePacket)

	err = obj.s.Tars_invoke(ctx, 0, "DecoModuleInfo", inputMarshal, _status, _context, resp)
	if err != nil {
		return output, err
	}
	if err = proto.Unmarshal(tools.Int8ToByte(resp.SBuffer), &output); err != nil {
		return output, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range resp.Status {
			_status[k] = v
		}
	}

	return output, nil
}

// DecoModuleData is client rpc method as defined
func (obj *User) DecoModuleData(input CoUserFeature, _opt ...map[string]string) (output Result, err error) {
	ctx := context.Background()
	return obj.DecoModuleDataWithContext(ctx, input, _opt...)
}

// DecoModuleDataWithContext is client rpc method as defined
func (obj *User) DecoModuleDataWithContext(ctx context.Context, input CoUserFeature, _opt ...map[string]string) (output Result, err error) {
	var inputMarshal []byte
	inputMarshal, err = proto.Marshal(&input)
	if err != nil {
		return output, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}

	resp := new(requestf.ResponsePacket)

	err = obj.s.Tars_invoke(ctx, 0, "DecoModuleData", inputMarshal, _status, _context, resp)
	if err != nil {
		return output, err
	}
	if err = proto.Unmarshal(tools.Int8ToByte(resp.SBuffer), &output); err != nil {
		return output, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range resp.Status {
			_status[k] = v
		}
	}

	return output, nil
}

// DecoSave is client rpc method as defined
func (obj *User) DecoSave(input CoUserFeature, _opt ...map[string]string) (output CoUserFeature, err error) {
	ctx := context.Background()
	return obj.DecoSaveWithContext(ctx, input, _opt...)
}

// DecoSaveWithContext is client rpc method as defined
func (obj *User) DecoSaveWithContext(ctx context.Context, input CoUserFeature, _opt ...map[string]string) (output CoUserFeature, err error) {
	var inputMarshal []byte
	inputMarshal, err = proto.Marshal(&input)
	if err != nil {
		return output, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}

	resp := new(requestf.ResponsePacket)

	err = obj.s.Tars_invoke(ctx, 0, "DecoSave", inputMarshal, _status, _context, resp)
	if err != nil {
		return output, err
	}
	if err = proto.Unmarshal(tools.Int8ToByte(resp.SBuffer), &output); err != nil {
		return output, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range resp.Status {
			_status[k] = v
		}
	}

	return output, nil
}

// DecoOperate is client rpc method as defined
func (obj *User) DecoOperate(input ReqCoUserDecoOperate, _opt ...map[string]string) (output Result, err error) {
	ctx := context.Background()
	return obj.DecoOperateWithContext(ctx, input, _opt...)
}

// DecoOperateWithContext is client rpc method as defined
func (obj *User) DecoOperateWithContext(ctx context.Context, input ReqCoUserDecoOperate, _opt ...map[string]string) (output Result, err error) {
	var inputMarshal []byte
	inputMarshal, err = proto.Marshal(&input)
	if err != nil {
		return output, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}

	resp := new(requestf.ResponsePacket)

	err = obj.s.Tars_invoke(ctx, 0, "DecoOperate", inputMarshal, _status, _context, resp)
	if err != nil {
		return output, err
	}
	if err = proto.Unmarshal(tools.Int8ToByte(resp.SBuffer), &output); err != nil {
		return output, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range resp.Status {
			_status[k] = v
		}
	}

	return output, nil
}

// DecoStyle is client rpc method as defined
func (obj *User) DecoStyle(input ReqCoUserDecoStyle, _opt ...map[string]string) (output Result, err error) {
	ctx := context.Background()
	return obj.DecoStyleWithContext(ctx, input, _opt...)
}

// DecoStyleWithContext is client rpc method as defined
func (obj *User) DecoStyleWithContext(ctx context.Context, input ReqCoUserDecoStyle, _opt ...map[string]string) (output Result, err error) {
	var inputMarshal []byte
	inputMarshal, err = proto.Marshal(&input)
	if err != nil {
		return output, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}

	resp := new(requestf.ResponsePacket)

	err = obj.s.Tars_invoke(ctx, 0, "DecoStyle", inputMarshal, _status, _context, resp)
	if err != nil {
		return output, err
	}
	if err = proto.Unmarshal(tools.Int8ToByte(resp.SBuffer), &output); err != nil {
		return output, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range resp.Status {
			_status[k] = v
		}
	}

	return output, nil
}

// DecoShopCommonInfo is client rpc method as defined
func (obj *User) DecoShopCommonInfo(input CoUserShopCommon, _opt ...map[string]string) (output Result, err error) {
	ctx := context.Background()
	return obj.DecoShopCommonInfoWithContext(ctx, input, _opt...)
}

// DecoShopCommonInfoWithContext is client rpc method as defined
func (obj *User) DecoShopCommonInfoWithContext(ctx context.Context, input CoUserShopCommon, _opt ...map[string]string) (output Result, err error) {
	var inputMarshal []byte
	inputMarshal, err = proto.Marshal(&input)
	if err != nil {
		return output, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}

	resp := new(requestf.ResponsePacket)

	err = obj.s.Tars_invoke(ctx, 0, "DecoShopCommonInfo", inputMarshal, _status, _context, resp)
	if err != nil {
		return output, err
	}
	if err = proto.Unmarshal(tools.Int8ToByte(resp.SBuffer), &output); err != nil {
		return output, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range resp.Status {
			_status[k] = v
		}
	}

	return output, nil
}

// DecoShopCommonSave is client rpc method as defined
func (obj *User) DecoShopCommonSave(input CoUserShopCommon, _opt ...map[string]string) (output Result, err error) {
	ctx := context.Background()
	return obj.DecoShopCommonSaveWithContext(ctx, input, _opt...)
}

// DecoShopCommonSaveWithContext is client rpc method as defined
func (obj *User) DecoShopCommonSaveWithContext(ctx context.Context, input CoUserShopCommon, _opt ...map[string]string) (output Result, err error) {
	var inputMarshal []byte
	inputMarshal, err = proto.Marshal(&input)
	if err != nil {
		return output, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}

	resp := new(requestf.ResponsePacket)

	err = obj.s.Tars_invoke(ctx, 0, "DecoShopCommonSave", inputMarshal, _status, _context, resp)
	if err != nil {
		return output, err
	}
	if err = proto.Unmarshal(tools.Int8ToByte(resp.SBuffer), &output); err != nil {
		return output, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range resp.Status {
			_status[k] = v
		}
	}

	return output, nil
}

// DecoShopPageInit is client rpc method as defined
func (obj *User) DecoShopPageInit(input CoUserShopInit, _opt ...map[string]string) (output Result, err error) {
	ctx := context.Background()
	return obj.DecoShopPageInitWithContext(ctx, input, _opt...)
}

// DecoShopPageInitWithContext is client rpc method as defined
func (obj *User) DecoShopPageInitWithContext(ctx context.Context, input CoUserShopInit, _opt ...map[string]string) (output Result, err error) {
	var inputMarshal []byte
	inputMarshal, err = proto.Marshal(&input)
	if err != nil {
		return output, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}

	resp := new(requestf.ResponsePacket)

	err = obj.s.Tars_invoke(ctx, 0, "DecoShopPageInit", inputMarshal, _status, _context, resp)
	if err != nil {
		return output, err
	}
	if err = proto.Unmarshal(tools.Int8ToByte(resp.SBuffer), &output); err != nil {
		return output, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range resp.Status {
			_status[k] = v
		}
	}

	return output, nil
}

// FeatureConfig is client rpc method as defined
func (obj *User) FeatureConfig(input CoFeatureConfig, _opt ...map[string]string) (output Result, err error) {
	ctx := context.Background()
	return obj.FeatureConfigWithContext(ctx, input, _opt...)
}

// FeatureConfigWithContext is client rpc method as defined
func (obj *User) FeatureConfigWithContext(ctx context.Context, input CoFeatureConfig, _opt ...map[string]string) (output Result, err error) {
	var inputMarshal []byte
	inputMarshal, err = proto.Marshal(&input)
	if err != nil {
		return output, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}

	resp := new(requestf.ResponsePacket)

	err = obj.s.Tars_invoke(ctx, 0, "FeatureConfig", inputMarshal, _status, _context, resp)
	if err != nil {
		return output, err
	}
	if err = proto.Unmarshal(tools.Int8ToByte(resp.SBuffer), &output); err != nil {
		return output, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range resp.Status {
			_status[k] = v
		}
	}

	return output, nil
}

// FeatureData is client rpc method as defined
func (obj *User) FeatureData(input CoFeatureConfig, _opt ...map[string]string) (output Result, err error) {
	ctx := context.Background()
	return obj.FeatureDataWithContext(ctx, input, _opt...)
}

// FeatureDataWithContext is client rpc method as defined
func (obj *User) FeatureDataWithContext(ctx context.Context, input CoFeatureConfig, _opt ...map[string]string) (output Result, err error) {
	var inputMarshal []byte
	inputMarshal, err = proto.Marshal(&input)
	if err != nil {
		return output, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}

	resp := new(requestf.ResponsePacket)

	err = obj.s.Tars_invoke(ctx, 0, "FeatureData", inputMarshal, _status, _context, resp)
	if err != nil {
		return output, err
	}
	if err = proto.Unmarshal(tools.Int8ToByte(resp.SBuffer), &output); err != nil {
		return output, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range resp.Status {
			_status[k] = v
		}
	}

	return output, nil
}

// UserVipPage is client rpc method as defined
func (obj *User) UserVipPage(input ReqCoUserVip, _opt ...map[string]string) (output ResCoUserVip, err error) {
	ctx := context.Background()
	return obj.UserVipPageWithContext(ctx, input, _opt...)
}

// UserVipPageWithContext is client rpc method as defined
func (obj *User) UserVipPageWithContext(ctx context.Context, input ReqCoUserVip, _opt ...map[string]string) (output ResCoUserVip, err error) {
	var inputMarshal []byte
	inputMarshal, err = proto.Marshal(&input)
	if err != nil {
		return output, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}

	resp := new(requestf.ResponsePacket)

	err = obj.s.Tars_invoke(ctx, 0, "UserVipPage", inputMarshal, _status, _context, resp)
	if err != nil {
		return output, err
	}
	if err = proto.Unmarshal(tools.Int8ToByte(resp.SBuffer), &output); err != nil {
		return output, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range resp.Status {
			_status[k] = v
		}
	}

	return output, nil
}

// UserVipData is client rpc method as defined
func (obj *User) UserVipData(input CoUserVip, _opt ...map[string]string) (output CoUserVip, err error) {
	ctx := context.Background()
	return obj.UserVipDataWithContext(ctx, input, _opt...)
}

// UserVipDataWithContext is client rpc method as defined
func (obj *User) UserVipDataWithContext(ctx context.Context, input CoUserVip, _opt ...map[string]string) (output CoUserVip, err error) {
	var inputMarshal []byte
	inputMarshal, err = proto.Marshal(&input)
	if err != nil {
		return output, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}

	resp := new(requestf.ResponsePacket)

	err = obj.s.Tars_invoke(ctx, 0, "UserVipData", inputMarshal, _status, _context, resp)
	if err != nil {
		return output, err
	}
	if err = proto.Unmarshal(tools.Int8ToByte(resp.SBuffer), &output); err != nil {
		return output, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range resp.Status {
			_status[k] = v
		}
	}

	return output, nil
}

// UserVipSave is client rpc method as defined
func (obj *User) UserVipSave(input CoUserVip, _opt ...map[string]string) (output CoUserVip, err error) {
	ctx := context.Background()
	return obj.UserVipSaveWithContext(ctx, input, _opt...)
}

// UserVipSaveWithContext is client rpc method as defined
func (obj *User) UserVipSaveWithContext(ctx context.Context, input CoUserVip, _opt ...map[string]string) (output CoUserVip, err error) {
	var inputMarshal []byte
	inputMarshal, err = proto.Marshal(&input)
	if err != nil {
		return output, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}

	resp := new(requestf.ResponsePacket)

	err = obj.s.Tars_invoke(ctx, 0, "UserVipSave", inputMarshal, _status, _context, resp)
	if err != nil {
		return output, err
	}
	if err = proto.Unmarshal(tools.Int8ToByte(resp.SBuffer), &output); err != nil {
		return output, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range resp.Status {
			_status[k] = v
		}
	}

	return output, nil
}

// UserVipDelete is client rpc method as defined
func (obj *User) UserVipDelete(input CoUserVip, _opt ...map[string]string) (output Result, err error) {
	ctx := context.Background()
	return obj.UserVipDeleteWithContext(ctx, input, _opt...)
}

// UserVipDeleteWithContext is client rpc method as defined
func (obj *User) UserVipDeleteWithContext(ctx context.Context, input CoUserVip, _opt ...map[string]string) (output Result, err error) {
	var inputMarshal []byte
	inputMarshal, err = proto.Marshal(&input)
	if err != nil {
		return output, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}

	resp := new(requestf.ResponsePacket)

	err = obj.s.Tars_invoke(ctx, 0, "UserVipDelete", inputMarshal, _status, _context, resp)
	if err != nil {
		return output, err
	}
	if err = proto.Unmarshal(tools.Int8ToByte(resp.SBuffer), &output); err != nil {
		return output, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range resp.Status {
			_status[k] = v
		}
	}

	return output, nil
}

// SubscribeChoose is client rpc method as defined
func (obj *User) SubscribeChoose(input ReqCoSysVipChoose, _opt ...map[string]string) (output ResCoSysVip, err error) {
	ctx := context.Background()
	return obj.SubscribeChooseWithContext(ctx, input, _opt...)
}

// SubscribeChooseWithContext is client rpc method as defined
func (obj *User) SubscribeChooseWithContext(ctx context.Context, input ReqCoSysVipChoose, _opt ...map[string]string) (output ResCoSysVip, err error) {
	var inputMarshal []byte
	inputMarshal, err = proto.Marshal(&input)
	if err != nil {
		return output, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}

	resp := new(requestf.ResponsePacket)

	err = obj.s.Tars_invoke(ctx, 0, "SubscribeChoose", inputMarshal, _status, _context, resp)
	if err != nil {
		return output, err
	}
	if err = proto.Unmarshal(tools.Int8ToByte(resp.SBuffer), &output); err != nil {
		return output, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range resp.Status {
			_status[k] = v
		}
	}

	return output, nil
}

// SubscribeItemId is client rpc method as defined
func (obj *User) SubscribeItemId(input IdCoId, _opt ...map[string]string) (output Result, err error) {
	ctx := context.Background()
	return obj.SubscribeItemIdWithContext(ctx, input, _opt...)
}

// SubscribeItemIdWithContext is client rpc method as defined
func (obj *User) SubscribeItemIdWithContext(ctx context.Context, input IdCoId, _opt ...map[string]string) (output Result, err error) {
	var inputMarshal []byte
	inputMarshal, err = proto.Marshal(&input)
	if err != nil {
		return output, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}

	resp := new(requestf.ResponsePacket)

	err = obj.s.Tars_invoke(ctx, 0, "SubscribeItemId", inputMarshal, _status, _context, resp)
	if err != nil {
		return output, err
	}
	if err = proto.Unmarshal(tools.Int8ToByte(resp.SBuffer), &output); err != nil {
		return output, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range resp.Status {
			_status[k] = v
		}
	}

	return output, nil
}

// SubscribeVipPage is client rpc method as defined
func (obj *User) SubscribeVipPage(input ReqCoUserVip, _opt ...map[string]string) (output Result, err error) {
	ctx := context.Background()
	return obj.SubscribeVipPageWithContext(ctx, input, _opt...)
}

// SubscribeVipPageWithContext is client rpc method as defined
func (obj *User) SubscribeVipPageWithContext(ctx context.Context, input ReqCoUserVip, _opt ...map[string]string) (output Result, err error) {
	var inputMarshal []byte
	inputMarshal, err = proto.Marshal(&input)
	if err != nil {
		return output, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}

	resp := new(requestf.ResponsePacket)

	err = obj.s.Tars_invoke(ctx, 0, "SubscribeVipPage", inputMarshal, _status, _context, resp)
	if err != nil {
		return output, err
	}
	if err = proto.Unmarshal(tools.Int8ToByte(resp.SBuffer), &output); err != nil {
		return output, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range resp.Status {
			_status[k] = v
		}
	}

	return output, nil
}
