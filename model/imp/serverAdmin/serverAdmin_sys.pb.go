// Code generated by protoc-gen-go. DO NOT EDIT.
// source: serverAdmin_sys.proto

package serverAdmin

import (
	context "context"
	fmt "fmt"
	tars "github.com/TarsCloud/TarsGo/tars"
	model "github.com/TarsCloud/TarsGo/tars/model"
	requestf "github.com/TarsCloud/TarsGo/tars/protocol/res/requestf"
	current "github.com/TarsCloud/TarsGo/tars/util/current"
	tools "github.com/TarsCloud/TarsGo/tars/util/tools"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// 输出空
type ResultEmpty struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ResultEmpty) Reset()         { *m = ResultEmpty{} }
func (m *ResultEmpty) String() string { return proto.CompactTextString(m) }
func (*ResultEmpty) ProtoMessage()    {}
func (*ResultEmpty) Descriptor() ([]byte, []int) {
	return fileDescriptor_a86454ed0438be5e, []int{0}
}

func (m *ResultEmpty) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResultEmpty.Unmarshal(m, b)
}
func (m *ResultEmpty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResultEmpty.Marshal(b, m, deterministic)
}
func (m *ResultEmpty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResultEmpty.Merge(m, src)
}
func (m *ResultEmpty) XXX_Size() int {
	return xxx_messageInfo_ResultEmpty.Size(m)
}
func (m *ResultEmpty) XXX_DiscardUnknown() {
	xxx_messageInfo_ResultEmpty.DiscardUnknown(m)
}

var xxx_messageInfo_ResultEmpty proto.InternalMessageInfo

// 分页
type PageInfo struct {
	Page                 int32    `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	PageSize             int32    `protobuf:"varint,2,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
	OrderKey             string   `protobuf:"bytes,3,opt,name=orderKey,proto3" json:"orderKey,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PageInfo) Reset()         { *m = PageInfo{} }
func (m *PageInfo) String() string { return proto.CompactTextString(m) }
func (*PageInfo) ProtoMessage()    {}
func (*PageInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_a86454ed0438be5e, []int{1}
}

func (m *PageInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PageInfo.Unmarshal(m, b)
}
func (m *PageInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PageInfo.Marshal(b, m, deterministic)
}
func (m *PageInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PageInfo.Merge(m, src)
}
func (m *PageInfo) XXX_Size() int {
	return xxx_messageInfo_PageInfo.Size(m)
}
func (m *PageInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_PageInfo.DiscardUnknown(m)
}

var xxx_messageInfo_PageInfo proto.InternalMessageInfo

func (m *PageInfo) GetPage() int32 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *PageInfo) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *PageInfo) GetOrderKey() string {
	if m != nil {
		return m.OrderKey
	}
	return ""
}

// 默认输出
type Result struct {
	Code                 int32             `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg                  string            `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Header               map[string]string `protobuf:"bytes,3,rep,name=header,proto3" json:"header,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Body                 []byte            `protobuf:"bytes,4,opt,name=body,proto3" json:"body,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *Result) Reset()         { *m = Result{} }
func (m *Result) String() string { return proto.CompactTextString(m) }
func (*Result) ProtoMessage()    {}
func (*Result) Descriptor() ([]byte, []int) {
	return fileDescriptor_a86454ed0438be5e, []int{2}
}

func (m *Result) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Result.Unmarshal(m, b)
}
func (m *Result) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Result.Marshal(b, m, deterministic)
}
func (m *Result) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Result.Merge(m, src)
}
func (m *Result) XXX_Size() int {
	return xxx_messageInfo_Result.Size(m)
}
func (m *Result) XXX_DiscardUnknown() {
	xxx_messageInfo_Result.DiscardUnknown(m)
}

var xxx_messageInfo_Result proto.InternalMessageInfo

func (m *Result) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *Result) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *Result) GetHeader() map[string]string {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *Result) GetBody() []byte {
	if m != nil {
		return m.Body
	}
	return nil
}

// ID
type ReqId struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqId) Reset()         { *m = ReqId{} }
func (m *ReqId) String() string { return proto.CompactTextString(m) }
func (*ReqId) ProtoMessage()    {}
func (*ReqId) Descriptor() ([]byte, []int) {
	return fileDescriptor_a86454ed0438be5e, []int{3}
}

func (m *ReqId) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReqId.Unmarshal(m, b)
}
func (m *ReqId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReqId.Marshal(b, m, deterministic)
}
func (m *ReqId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqId.Merge(m, src)
}
func (m *ReqId) XXX_Size() int {
	return xxx_messageInfo_ReqId.Size(m)
}
func (m *ReqId) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqId.DiscardUnknown(m)
}

var xxx_messageInfo_ReqId proto.InternalMessageInfo

func (m *ReqId) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

// 管理员登录提交
type ReqLogin struct {
	Username             string   `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Password             string   `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	Userkey              string   `protobuf:"bytes,3,opt,name=userkey,proto3" json:"userkey,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqLogin) Reset()         { *m = ReqLogin{} }
func (m *ReqLogin) String() string { return proto.CompactTextString(m) }
func (*ReqLogin) ProtoMessage()    {}
func (*ReqLogin) Descriptor() ([]byte, []int) {
	return fileDescriptor_a86454ed0438be5e, []int{4}
}

func (m *ReqLogin) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReqLogin.Unmarshal(m, b)
}
func (m *ReqLogin) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReqLogin.Marshal(b, m, deterministic)
}
func (m *ReqLogin) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqLogin.Merge(m, src)
}
func (m *ReqLogin) XXX_Size() int {
	return xxx_messageInfo_ReqLogin.Size(m)
}
func (m *ReqLogin) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqLogin.DiscardUnknown(m)
}

var xxx_messageInfo_ReqLogin proto.InternalMessageInfo

func (m *ReqLogin) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *ReqLogin) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *ReqLogin) GetUserkey() string {
	if m != nil {
		return m.Userkey
	}
	return ""
}

// 权限检查
type ReqPermissions struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Path                 string   `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	Method               string   `protobuf:"bytes,3,opt,name=method,proto3" json:"method,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqPermissions) Reset()         { *m = ReqPermissions{} }
func (m *ReqPermissions) String() string { return proto.CompactTextString(m) }
func (*ReqPermissions) ProtoMessage()    {}
func (*ReqPermissions) Descriptor() ([]byte, []int) {
	return fileDescriptor_a86454ed0438be5e, []int{5}
}

func (m *ReqPermissions) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReqPermissions.Unmarshal(m, b)
}
func (m *ReqPermissions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReqPermissions.Marshal(b, m, deterministic)
}
func (m *ReqPermissions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqPermissions.Merge(m, src)
}
func (m *ReqPermissions) XXX_Size() int {
	return xxx_messageInfo_ReqPermissions.Size(m)
}
func (m *ReqPermissions) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqPermissions.DiscardUnknown(m)
}

var xxx_messageInfo_ReqPermissions proto.InternalMessageInfo

func (m *ReqPermissions) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ReqPermissions) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *ReqPermissions) GetMethod() string {
	if m != nil {
		return m.Method
	}
	return ""
}

// 管理员
type SystemUser struct {
	Id                   int64          `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	CreatedAt            int32          `protobuf:"varint,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt            int32          `protobuf:"varint,3,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	Username             string         `protobuf:"bytes,4,opt,name=username,proto3" json:"username,omitempty"`
	Password             string         `protobuf:"bytes,5,opt,name=password,proto3" json:"password,omitempty"`
	Encrypt              string         `protobuf:"bytes,6,opt,name=encrypt,proto3" json:"encrypt,omitempty"`
	NickName             string         `protobuf:"bytes,7,opt,name=nick_name,json=nickName,proto3" json:"nick_name,omitempty"`
	Avatar               string         `protobuf:"bytes,8,opt,name=avatar,proto3" json:"avatar,omitempty"`
	WeiXin               string         `protobuf:"bytes,9,opt,name=wei_xin,json=weiXin,proto3" json:"wei_xin,omitempty"`
	Mobile               string         `protobuf:"bytes,10,opt,name=mobile,proto3" json:"mobile,omitempty"`
	Online               int32          `protobuf:"varint,11,opt,name=online,proto3" json:"online,omitempty"`
	State                int32          `protobuf:"varint,12,opt,name=state,proto3" json:"state,omitempty"`
	LoginFailure         int32          `protobuf:"varint,13,opt,name=loginFailure,proto3" json:"loginFailure,omitempty"`
	LoginNum             int32          `protobuf:"varint,14,opt,name=login_num,json=loginNum,proto3" json:"login_num,omitempty"`
	LastLoginIp          string         `protobuf:"bytes,15,opt,name=last_login_ip,json=lastLoginIp,proto3" json:"last_login_ip,omitempty"`
	LastLoginTime        int32          `protobuf:"varint,16,opt,name=last_login_time,json=lastLoginTime,proto3" json:"last_login_time,omitempty"`
	Group                []*SystemGroup `protobuf:"bytes,17,rep,name=group,proto3" json:"group,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *SystemUser) Reset()         { *m = SystemUser{} }
func (m *SystemUser) String() string { return proto.CompactTextString(m) }
func (*SystemUser) ProtoMessage()    {}
func (*SystemUser) Descriptor() ([]byte, []int) {
	return fileDescriptor_a86454ed0438be5e, []int{6}
}

func (m *SystemUser) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SystemUser.Unmarshal(m, b)
}
func (m *SystemUser) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SystemUser.Marshal(b, m, deterministic)
}
func (m *SystemUser) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SystemUser.Merge(m, src)
}
func (m *SystemUser) XXX_Size() int {
	return xxx_messageInfo_SystemUser.Size(m)
}
func (m *SystemUser) XXX_DiscardUnknown() {
	xxx_messageInfo_SystemUser.DiscardUnknown(m)
}

var xxx_messageInfo_SystemUser proto.InternalMessageInfo

func (m *SystemUser) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *SystemUser) GetCreatedAt() int32 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *SystemUser) GetUpdatedAt() int32 {
	if m != nil {
		return m.UpdatedAt
	}
	return 0
}

func (m *SystemUser) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *SystemUser) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *SystemUser) GetEncrypt() string {
	if m != nil {
		return m.Encrypt
	}
	return ""
}

func (m *SystemUser) GetNickName() string {
	if m != nil {
		return m.NickName
	}
	return ""
}

func (m *SystemUser) GetAvatar() string {
	if m != nil {
		return m.Avatar
	}
	return ""
}

func (m *SystemUser) GetWeiXin() string {
	if m != nil {
		return m.WeiXin
	}
	return ""
}

func (m *SystemUser) GetMobile() string {
	if m != nil {
		return m.Mobile
	}
	return ""
}

func (m *SystemUser) GetOnline() int32 {
	if m != nil {
		return m.Online
	}
	return 0
}

func (m *SystemUser) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *SystemUser) GetLoginFailure() int32 {
	if m != nil {
		return m.LoginFailure
	}
	return 0
}

func (m *SystemUser) GetLoginNum() int32 {
	if m != nil {
		return m.LoginNum
	}
	return 0
}

func (m *SystemUser) GetLastLoginIp() string {
	if m != nil {
		return m.LastLoginIp
	}
	return ""
}

func (m *SystemUser) GetLastLoginTime() int32 {
	if m != nil {
		return m.LastLoginTime
	}
	return 0
}

func (m *SystemUser) GetGroup() []*SystemGroup {
	if m != nil {
		return m.Group
	}
	return nil
}

type ResSystemUser struct {
	List                 []*SystemUser `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	Count                int32         `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *ResSystemUser) Reset()         { *m = ResSystemUser{} }
func (m *ResSystemUser) String() string { return proto.CompactTextString(m) }
func (*ResSystemUser) ProtoMessage()    {}
func (*ResSystemUser) Descriptor() ([]byte, []int) {
	return fileDescriptor_a86454ed0438be5e, []int{7}
}

func (m *ResSystemUser) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResSystemUser.Unmarshal(m, b)
}
func (m *ResSystemUser) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResSystemUser.Marshal(b, m, deterministic)
}
func (m *ResSystemUser) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResSystemUser.Merge(m, src)
}
func (m *ResSystemUser) XXX_Size() int {
	return xxx_messageInfo_ResSystemUser.Size(m)
}
func (m *ResSystemUser) XXX_DiscardUnknown() {
	xxx_messageInfo_ResSystemUser.DiscardUnknown(m)
}

var xxx_messageInfo_ResSystemUser proto.InternalMessageInfo

func (m *ResSystemUser) GetList() []*SystemUser {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *ResSystemUser) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

// 管理员组
type SystemGroup struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	CreatedAt            int32    `protobuf:"varint,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt            int32    `protobuf:"varint,3,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	Pid                  int64    `protobuf:"varint,4,opt,name=pid,proto3" json:"pid,omitempty"`
	Name                 string   `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	Api                  string   `protobuf:"bytes,6,opt,name=api,proto3" json:"api,omitempty"`
	Menus                string   `protobuf:"bytes,7,opt,name=menus,proto3" json:"menus,omitempty"`
	State                int32    `protobuf:"varint,8,opt,name=state,proto3" json:"state,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SystemGroup) Reset()         { *m = SystemGroup{} }
func (m *SystemGroup) String() string { return proto.CompactTextString(m) }
func (*SystemGroup) ProtoMessage()    {}
func (*SystemGroup) Descriptor() ([]byte, []int) {
	return fileDescriptor_a86454ed0438be5e, []int{8}
}

func (m *SystemGroup) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SystemGroup.Unmarshal(m, b)
}
func (m *SystemGroup) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SystemGroup.Marshal(b, m, deterministic)
}
func (m *SystemGroup) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SystemGroup.Merge(m, src)
}
func (m *SystemGroup) XXX_Size() int {
	return xxx_messageInfo_SystemGroup.Size(m)
}
func (m *SystemGroup) XXX_DiscardUnknown() {
	xxx_messageInfo_SystemGroup.DiscardUnknown(m)
}

var xxx_messageInfo_SystemGroup proto.InternalMessageInfo

func (m *SystemGroup) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *SystemGroup) GetCreatedAt() int32 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *SystemGroup) GetUpdatedAt() int32 {
	if m != nil {
		return m.UpdatedAt
	}
	return 0
}

func (m *SystemGroup) GetPid() int64 {
	if m != nil {
		return m.Pid
	}
	return 0
}

func (m *SystemGroup) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SystemGroup) GetApi() string {
	if m != nil {
		return m.Api
	}
	return ""
}

func (m *SystemGroup) GetMenus() string {
	if m != nil {
		return m.Menus
	}
	return ""
}

func (m *SystemGroup) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

type ResSystemGroup struct {
	List                 []*SystemGroup `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	Count                int32          `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *ResSystemGroup) Reset()         { *m = ResSystemGroup{} }
func (m *ResSystemGroup) String() string { return proto.CompactTextString(m) }
func (*ResSystemGroup) ProtoMessage()    {}
func (*ResSystemGroup) Descriptor() ([]byte, []int) {
	return fileDescriptor_a86454ed0438be5e, []int{9}
}

func (m *ResSystemGroup) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResSystemGroup.Unmarshal(m, b)
}
func (m *ResSystemGroup) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResSystemGroup.Marshal(b, m, deterministic)
}
func (m *ResSystemGroup) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResSystemGroup.Merge(m, src)
}
func (m *ResSystemGroup) XXX_Size() int {
	return xxx_messageInfo_ResSystemGroup.Size(m)
}
func (m *ResSystemGroup) XXX_DiscardUnknown() {
	xxx_messageInfo_ResSystemGroup.DiscardUnknown(m)
}

var xxx_messageInfo_ResSystemGroup proto.InternalMessageInfo

func (m *ResSystemGroup) GetList() []*SystemGroup {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *ResSystemGroup) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

//管理员组成员绑定
type SystemGroupsLink struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	GroupId              int64    `protobuf:"varint,2,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SystemGroupsLink) Reset()         { *m = SystemGroupsLink{} }
func (m *SystemGroupsLink) String() string { return proto.CompactTextString(m) }
func (*SystemGroupsLink) ProtoMessage()    {}
func (*SystemGroupsLink) Descriptor() ([]byte, []int) {
	return fileDescriptor_a86454ed0438be5e, []int{10}
}

func (m *SystemGroupsLink) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SystemGroupsLink.Unmarshal(m, b)
}
func (m *SystemGroupsLink) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SystemGroupsLink.Marshal(b, m, deterministic)
}
func (m *SystemGroupsLink) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SystemGroupsLink.Merge(m, src)
}
func (m *SystemGroupsLink) XXX_Size() int {
	return xxx_messageInfo_SystemGroupsLink.Size(m)
}
func (m *SystemGroupsLink) XXX_DiscardUnknown() {
	xxx_messageInfo_SystemGroupsLink.DiscardUnknown(m)
}

var xxx_messageInfo_SystemGroupsLink proto.InternalMessageInfo

func (m *SystemGroupsLink) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *SystemGroupsLink) GetGroupId() int64 {
	if m != nil {
		return m.GroupId
	}
	return 0
}

// Menu 数据结构
type SystemMenu struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	CreatedAt            int32    `protobuf:"varint,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt            int32    `protobuf:"varint,3,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	Title                string   `protobuf:"bytes,4,opt,name=title,proto3" json:"title,omitempty"`
	Pid                  int64    `protobuf:"varint,5,opt,name=pid,proto3" json:"pid,omitempty"`
	Type                 int32    `protobuf:"varint,6,opt,name=type,proto3" json:"type,omitempty"`
	Path                 string   `protobuf:"bytes,7,opt,name=path,proto3" json:"path,omitempty"`
	Icon                 string   `protobuf:"bytes,8,opt,name=icon,proto3" json:"icon,omitempty"`
	Component            string   `protobuf:"bytes,9,opt,name=component,proto3" json:"component,omitempty"`
	Keepalive            int32    `protobuf:"varint,10,opt,name=keepalive,proto3" json:"keepalive,omitempty"`
	Sort                 int32    `protobuf:"varint,11,opt,name=sort,proto3" json:"sort,omitempty"`
	State                int32    `protobuf:"varint,12,opt,name=state,proto3" json:"state,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SystemMenu) Reset()         { *m = SystemMenu{} }
func (m *SystemMenu) String() string { return proto.CompactTextString(m) }
func (*SystemMenu) ProtoMessage()    {}
func (*SystemMenu) Descriptor() ([]byte, []int) {
	return fileDescriptor_a86454ed0438be5e, []int{11}
}

func (m *SystemMenu) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SystemMenu.Unmarshal(m, b)
}
func (m *SystemMenu) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SystemMenu.Marshal(b, m, deterministic)
}
func (m *SystemMenu) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SystemMenu.Merge(m, src)
}
func (m *SystemMenu) XXX_Size() int {
	return xxx_messageInfo_SystemMenu.Size(m)
}
func (m *SystemMenu) XXX_DiscardUnknown() {
	xxx_messageInfo_SystemMenu.DiscardUnknown(m)
}

var xxx_messageInfo_SystemMenu proto.InternalMessageInfo

func (m *SystemMenu) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *SystemMenu) GetCreatedAt() int32 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *SystemMenu) GetUpdatedAt() int32 {
	if m != nil {
		return m.UpdatedAt
	}
	return 0
}

func (m *SystemMenu) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *SystemMenu) GetPid() int64 {
	if m != nil {
		return m.Pid
	}
	return 0
}

func (m *SystemMenu) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *SystemMenu) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *SystemMenu) GetIcon() string {
	if m != nil {
		return m.Icon
	}
	return ""
}

func (m *SystemMenu) GetComponent() string {
	if m != nil {
		return m.Component
	}
	return ""
}

func (m *SystemMenu) GetKeepalive() int32 {
	if m != nil {
		return m.Keepalive
	}
	return 0
}

func (m *SystemMenu) GetSort() int32 {
	if m != nil {
		return m.Sort
	}
	return 0
}

func (m *SystemMenu) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

// 管理员组
type ResSystemMenu struct {
	List                 []*SystemMenu `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	Count                int32         `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *ResSystemMenu) Reset()         { *m = ResSystemMenu{} }
func (m *ResSystemMenu) String() string { return proto.CompactTextString(m) }
func (*ResSystemMenu) ProtoMessage()    {}
func (*ResSystemMenu) Descriptor() ([]byte, []int) {
	return fileDescriptor_a86454ed0438be5e, []int{12}
}

func (m *ResSystemMenu) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResSystemMenu.Unmarshal(m, b)
}
func (m *ResSystemMenu) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResSystemMenu.Marshal(b, m, deterministic)
}
func (m *ResSystemMenu) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResSystemMenu.Merge(m, src)
}
func (m *ResSystemMenu) XXX_Size() int {
	return xxx_messageInfo_ResSystemMenu.Size(m)
}
func (m *ResSystemMenu) XXX_DiscardUnknown() {
	xxx_messageInfo_ResSystemMenu.DiscardUnknown(m)
}

var xxx_messageInfo_ResSystemMenu proto.InternalMessageInfo

func (m *ResSystemMenu) GetList() []*SystemMenu {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *ResSystemMenu) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

// API 结构体
type SystemApi struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	CreatedAt            int32    `protobuf:"varint,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt            int32    `protobuf:"varint,3,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	Path                 string   `protobuf:"bytes,4,opt,name=path,proto3" json:"path,omitempty"`
	Description          string   `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	ApiGroup             string   `protobuf:"bytes,6,opt,name=api_group,json=apiGroup,proto3" json:"api_group,omitempty"`
	Method               string   `protobuf:"bytes,7,opt,name=method,proto3" json:"method,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SystemApi) Reset()         { *m = SystemApi{} }
func (m *SystemApi) String() string { return proto.CompactTextString(m) }
func (*SystemApi) ProtoMessage()    {}
func (*SystemApi) Descriptor() ([]byte, []int) {
	return fileDescriptor_a86454ed0438be5e, []int{13}
}

func (m *SystemApi) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SystemApi.Unmarshal(m, b)
}
func (m *SystemApi) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SystemApi.Marshal(b, m, deterministic)
}
func (m *SystemApi) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SystemApi.Merge(m, src)
}
func (m *SystemApi) XXX_Size() int {
	return xxx_messageInfo_SystemApi.Size(m)
}
func (m *SystemApi) XXX_DiscardUnknown() {
	xxx_messageInfo_SystemApi.DiscardUnknown(m)
}

var xxx_messageInfo_SystemApi proto.InternalMessageInfo

func (m *SystemApi) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *SystemApi) GetCreatedAt() int32 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *SystemApi) GetUpdatedAt() int32 {
	if m != nil {
		return m.UpdatedAt
	}
	return 0
}

func (m *SystemApi) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *SystemApi) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *SystemApi) GetApiGroup() string {
	if m != nil {
		return m.ApiGroup
	}
	return ""
}

func (m *SystemApi) GetMethod() string {
	if m != nil {
		return m.Method
	}
	return ""
}

type ReqSystemAPI struct {
	Req                  *SystemApi `protobuf:"bytes,1,opt,name=req,proto3" json:"req,omitempty"`
	Page                 *PageInfo  `protobuf:"bytes,2,opt,name=page,proto3" json:"page,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *ReqSystemAPI) Reset()         { *m = ReqSystemAPI{} }
func (m *ReqSystemAPI) String() string { return proto.CompactTextString(m) }
func (*ReqSystemAPI) ProtoMessage()    {}
func (*ReqSystemAPI) Descriptor() ([]byte, []int) {
	return fileDescriptor_a86454ed0438be5e, []int{14}
}

func (m *ReqSystemAPI) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReqSystemAPI.Unmarshal(m, b)
}
func (m *ReqSystemAPI) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReqSystemAPI.Marshal(b, m, deterministic)
}
func (m *ReqSystemAPI) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqSystemAPI.Merge(m, src)
}
func (m *ReqSystemAPI) XXX_Size() int {
	return xxx_messageInfo_ReqSystemAPI.Size(m)
}
func (m *ReqSystemAPI) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqSystemAPI.DiscardUnknown(m)
}

var xxx_messageInfo_ReqSystemAPI proto.InternalMessageInfo

func (m *ReqSystemAPI) GetReq() *SystemApi {
	if m != nil {
		return m.Req
	}
	return nil
}

func (m *ReqSystemAPI) GetPage() *PageInfo {
	if m != nil {
		return m.Page
	}
	return nil
}

type ResSystemApi struct {
	List                 []*SystemApi `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	Count                int32        `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *ResSystemApi) Reset()         { *m = ResSystemApi{} }
func (m *ResSystemApi) String() string { return proto.CompactTextString(m) }
func (*ResSystemApi) ProtoMessage()    {}
func (*ResSystemApi) Descriptor() ([]byte, []int) {
	return fileDescriptor_a86454ed0438be5e, []int{15}
}

func (m *ResSystemApi) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResSystemApi.Unmarshal(m, b)
}
func (m *ResSystemApi) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResSystemApi.Marshal(b, m, deterministic)
}
func (m *ResSystemApi) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResSystemApi.Merge(m, src)
}
func (m *ResSystemApi) XXX_Size() int {
	return xxx_messageInfo_ResSystemApi.Size(m)
}
func (m *ResSystemApi) XXX_DiscardUnknown() {
	xxx_messageInfo_ResSystemApi.DiscardUnknown(m)
}

var xxx_messageInfo_ResSystemApi proto.InternalMessageInfo

func (m *ResSystemApi) GetList() []*SystemApi {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *ResSystemApi) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

// 文件上传附件 结构体
type SystemUp struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	CreatedAt            int32    `protobuf:"varint,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt            int32    `protobuf:"varint,3,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	Type                 int32    `protobuf:"varint,4,opt,name=type,proto3" json:"type,omitempty"`
	Aid                  int64    `protobuf:"varint,5,opt,name=aid,proto3" json:"aid,omitempty"`
	FileId               int64    `protobuf:"varint,6,opt,name=file_id,json=fileId,proto3" json:"file_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SystemUp) Reset()         { *m = SystemUp{} }
func (m *SystemUp) String() string { return proto.CompactTextString(m) }
func (*SystemUp) ProtoMessage()    {}
func (*SystemUp) Descriptor() ([]byte, []int) {
	return fileDescriptor_a86454ed0438be5e, []int{16}
}

func (m *SystemUp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SystemUp.Unmarshal(m, b)
}
func (m *SystemUp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SystemUp.Marshal(b, m, deterministic)
}
func (m *SystemUp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SystemUp.Merge(m, src)
}
func (m *SystemUp) XXX_Size() int {
	return xxx_messageInfo_SystemUp.Size(m)
}
func (m *SystemUp) XXX_DiscardUnknown() {
	xxx_messageInfo_SystemUp.DiscardUnknown(m)
}

var xxx_messageInfo_SystemUp proto.InternalMessageInfo

func (m *SystemUp) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *SystemUp) GetCreatedAt() int32 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *SystemUp) GetUpdatedAt() int32 {
	if m != nil {
		return m.UpdatedAt
	}
	return 0
}

func (m *SystemUp) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *SystemUp) GetAid() int64 {
	if m != nil {
		return m.Aid
	}
	return 0
}

func (m *SystemUp) GetFileId() int64 {
	if m != nil {
		return m.FileId
	}
	return 0
}

// 附件公共附件调用
type SystemUpCommon struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	CreatedAt            int32    `protobuf:"varint,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt            int32    `protobuf:"varint,3,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	Type                 int32    `protobuf:"varint,4,opt,name=type,proto3" json:"type,omitempty"`
	FileType             int32    `protobuf:"varint,5,opt,name=file_type,json=fileType,proto3" json:"file_type,omitempty"`
	FileId               int64    `protobuf:"varint,6,opt,name=file_id,json=fileId,proto3" json:"file_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SystemUpCommon) Reset()         { *m = SystemUpCommon{} }
func (m *SystemUpCommon) String() string { return proto.CompactTextString(m) }
func (*SystemUpCommon) ProtoMessage()    {}
func (*SystemUpCommon) Descriptor() ([]byte, []int) {
	return fileDescriptor_a86454ed0438be5e, []int{17}
}

func (m *SystemUpCommon) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SystemUpCommon.Unmarshal(m, b)
}
func (m *SystemUpCommon) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SystemUpCommon.Marshal(b, m, deterministic)
}
func (m *SystemUpCommon) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SystemUpCommon.Merge(m, src)
}
func (m *SystemUpCommon) XXX_Size() int {
	return xxx_messageInfo_SystemUpCommon.Size(m)
}
func (m *SystemUpCommon) XXX_DiscardUnknown() {
	xxx_messageInfo_SystemUpCommon.DiscardUnknown(m)
}

var xxx_messageInfo_SystemUpCommon proto.InternalMessageInfo

func (m *SystemUpCommon) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *SystemUpCommon) GetCreatedAt() int32 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *SystemUpCommon) GetUpdatedAt() int32 {
	if m != nil {
		return m.UpdatedAt
	}
	return 0
}

func (m *SystemUpCommon) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *SystemUpCommon) GetFileType() int32 {
	if m != nil {
		return m.FileType
	}
	return 0
}

func (m *SystemUpCommon) GetFileId() int64 {
	if m != nil {
		return m.FileId
	}
	return 0
}

type ReqSystemUpCommon struct {
	List                 []*SystemUpCommon `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *ReqSystemUpCommon) Reset()         { *m = ReqSystemUpCommon{} }
func (m *ReqSystemUpCommon) String() string { return proto.CompactTextString(m) }
func (*ReqSystemUpCommon) ProtoMessage()    {}
func (*ReqSystemUpCommon) Descriptor() ([]byte, []int) {
	return fileDescriptor_a86454ed0438be5e, []int{18}
}

func (m *ReqSystemUpCommon) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReqSystemUpCommon.Unmarshal(m, b)
}
func (m *ReqSystemUpCommon) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReqSystemUpCommon.Marshal(b, m, deterministic)
}
func (m *ReqSystemUpCommon) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqSystemUpCommon.Merge(m, src)
}
func (m *ReqSystemUpCommon) XXX_Size() int {
	return xxx_messageInfo_ReqSystemUpCommon.Size(m)
}
func (m *ReqSystemUpCommon) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqSystemUpCommon.DiscardUnknown(m)
}

var xxx_messageInfo_ReqSystemUpCommon proto.InternalMessageInfo

func (m *ReqSystemUpCommon) GetList() []*SystemUpCommon {
	if m != nil {
		return m.List
	}
	return nil
}

type ReqSystemUpCommonPage struct {
	Page                 *PageInfo `protobuf:"bytes,1,opt,name=page,proto3" json:"page,omitempty"`
	Type                 int32     `protobuf:"varint,4,opt,name=type,proto3" json:"type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *ReqSystemUpCommonPage) Reset()         { *m = ReqSystemUpCommonPage{} }
func (m *ReqSystemUpCommonPage) String() string { return proto.CompactTextString(m) }
func (*ReqSystemUpCommonPage) ProtoMessage()    {}
func (*ReqSystemUpCommonPage) Descriptor() ([]byte, []int) {
	return fileDescriptor_a86454ed0438be5e, []int{19}
}

func (m *ReqSystemUpCommonPage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReqSystemUpCommonPage.Unmarshal(m, b)
}
func (m *ReqSystemUpCommonPage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReqSystemUpCommonPage.Marshal(b, m, deterministic)
}
func (m *ReqSystemUpCommonPage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqSystemUpCommonPage.Merge(m, src)
}
func (m *ReqSystemUpCommonPage) XXX_Size() int {
	return xxx_messageInfo_ReqSystemUpCommonPage.Size(m)
}
func (m *ReqSystemUpCommonPage) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqSystemUpCommonPage.DiscardUnknown(m)
}

var xxx_messageInfo_ReqSystemUpCommonPage proto.InternalMessageInfo

func (m *ReqSystemUpCommonPage) GetPage() *PageInfo {
	if m != nil {
		return m.Page
	}
	return nil
}

func (m *ReqSystemUpCommonPage) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

type SystemUpFile struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	CreatedAt            int32    `protobuf:"varint,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt            int32    `protobuf:"varint,3,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	Hash                 string   `protobuf:"bytes,4,opt,name=hash,proto3" json:"hash,omitempty"`
	Path                 string   `protobuf:"bytes,5,opt,name=path,proto3" json:"path,omitempty"`
	Name                 string   `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
	Tag                  string   `protobuf:"bytes,7,opt,name=tag,proto3" json:"tag,omitempty"`
	Size                 int64    `protobuf:"varint,8,opt,name=size,proto3" json:"size,omitempty"`
	Duration             int64    `protobuf:"varint,10,opt,name=duration,proto3" json:"duration,omitempty"`
	State                int32    `protobuf:"varint,11,opt,name=state,proto3" json:"state,omitempty"`
	Type                 int32    `protobuf:"varint,12,opt,name=type,proto3" json:"type,omitempty"`
	Aid                  int64    `protobuf:"varint,13,opt,name=aid,proto3" json:"aid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SystemUpFile) Reset()         { *m = SystemUpFile{} }
func (m *SystemUpFile) String() string { return proto.CompactTextString(m) }
func (*SystemUpFile) ProtoMessage()    {}
func (*SystemUpFile) Descriptor() ([]byte, []int) {
	return fileDescriptor_a86454ed0438be5e, []int{20}
}

func (m *SystemUpFile) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SystemUpFile.Unmarshal(m, b)
}
func (m *SystemUpFile) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SystemUpFile.Marshal(b, m, deterministic)
}
func (m *SystemUpFile) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SystemUpFile.Merge(m, src)
}
func (m *SystemUpFile) XXX_Size() int {
	return xxx_messageInfo_SystemUpFile.Size(m)
}
func (m *SystemUpFile) XXX_DiscardUnknown() {
	xxx_messageInfo_SystemUpFile.DiscardUnknown(m)
}

var xxx_messageInfo_SystemUpFile proto.InternalMessageInfo

func (m *SystemUpFile) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *SystemUpFile) GetCreatedAt() int32 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *SystemUpFile) GetUpdatedAt() int32 {
	if m != nil {
		return m.UpdatedAt
	}
	return 0
}

func (m *SystemUpFile) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func (m *SystemUpFile) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *SystemUpFile) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SystemUpFile) GetTag() string {
	if m != nil {
		return m.Tag
	}
	return ""
}

func (m *SystemUpFile) GetSize() int64 {
	if m != nil {
		return m.Size
	}
	return 0
}

func (m *SystemUpFile) GetDuration() int64 {
	if m != nil {
		return m.Duration
	}
	return 0
}

func (m *SystemUpFile) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *SystemUpFile) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *SystemUpFile) GetAid() int64 {
	if m != nil {
		return m.Aid
	}
	return 0
}

type ResSystemUpFile struct {
	List                 []*SystemUpFile `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	Count                int32           `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *ResSystemUpFile) Reset()         { *m = ResSystemUpFile{} }
func (m *ResSystemUpFile) String() string { return proto.CompactTextString(m) }
func (*ResSystemUpFile) ProtoMessage()    {}
func (*ResSystemUpFile) Descriptor() ([]byte, []int) {
	return fileDescriptor_a86454ed0438be5e, []int{21}
}

func (m *ResSystemUpFile) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResSystemUpFile.Unmarshal(m, b)
}
func (m *ResSystemUpFile) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResSystemUpFile.Marshal(b, m, deterministic)
}
func (m *ResSystemUpFile) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResSystemUpFile.Merge(m, src)
}
func (m *ResSystemUpFile) XXX_Size() int {
	return xxx_messageInfo_ResSystemUpFile.Size(m)
}
func (m *ResSystemUpFile) XXX_DiscardUnknown() {
	xxx_messageInfo_ResSystemUpFile.DiscardUnknown(m)
}

var xxx_messageInfo_ResSystemUpFile proto.InternalMessageInfo

func (m *ResSystemUpFile) GetList() []*SystemUpFile {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *ResSystemUpFile) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

type ReqSystemUpCheck struct {
	UpName               string   `protobuf:"bytes,1,opt,name=upName,proto3" json:"upName,omitempty"`
	Type                 int32    `protobuf:"varint,4,opt,name=type,proto3" json:"type,omitempty"`
	Aid                  int64    `protobuf:"varint,5,opt,name=aid,proto3" json:"aid,omitempty"`
	Hash                 string   `protobuf:"bytes,6,opt,name=hash,proto3" json:"hash,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqSystemUpCheck) Reset()         { *m = ReqSystemUpCheck{} }
func (m *ReqSystemUpCheck) String() string { return proto.CompactTextString(m) }
func (*ReqSystemUpCheck) ProtoMessage()    {}
func (*ReqSystemUpCheck) Descriptor() ([]byte, []int) {
	return fileDescriptor_a86454ed0438be5e, []int{22}
}

func (m *ReqSystemUpCheck) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReqSystemUpCheck.Unmarshal(m, b)
}
func (m *ReqSystemUpCheck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReqSystemUpCheck.Marshal(b, m, deterministic)
}
func (m *ReqSystemUpCheck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqSystemUpCheck.Merge(m, src)
}
func (m *ReqSystemUpCheck) XXX_Size() int {
	return xxx_messageInfo_ReqSystemUpCheck.Size(m)
}
func (m *ReqSystemUpCheck) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqSystemUpCheck.DiscardUnknown(m)
}

var xxx_messageInfo_ReqSystemUpCheck proto.InternalMessageInfo

func (m *ReqSystemUpCheck) GetUpName() string {
	if m != nil {
		return m.UpName
	}
	return ""
}

func (m *ReqSystemUpCheck) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *ReqSystemUpCheck) GetAid() int64 {
	if m != nil {
		return m.Aid
	}
	return 0
}

func (m *ReqSystemUpCheck) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

// 附件管理
type ReqSystemUp struct {
	UpName               string        `protobuf:"bytes,1,opt,name=upName,proto3" json:"upName,omitempty"`
	Att                  *SystemUp     `protobuf:"bytes,2,opt,name=att,proto3" json:"att,omitempty"`
	File                 *SystemUpFile `protobuf:"bytes,3,opt,name=file,proto3" json:"file,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *ReqSystemUp) Reset()         { *m = ReqSystemUp{} }
func (m *ReqSystemUp) String() string { return proto.CompactTextString(m) }
func (*ReqSystemUp) ProtoMessage()    {}
func (*ReqSystemUp) Descriptor() ([]byte, []int) {
	return fileDescriptor_a86454ed0438be5e, []int{23}
}

func (m *ReqSystemUp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReqSystemUp.Unmarshal(m, b)
}
func (m *ReqSystemUp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReqSystemUp.Marshal(b, m, deterministic)
}
func (m *ReqSystemUp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqSystemUp.Merge(m, src)
}
func (m *ReqSystemUp) XXX_Size() int {
	return xxx_messageInfo_ReqSystemUp.Size(m)
}
func (m *ReqSystemUp) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqSystemUp.DiscardUnknown(m)
}

var xxx_messageInfo_ReqSystemUp proto.InternalMessageInfo

func (m *ReqSystemUp) GetUpName() string {
	if m != nil {
		return m.UpName
	}
	return ""
}

func (m *ReqSystemUp) GetAtt() *SystemUp {
	if m != nil {
		return m.Att
	}
	return nil
}

func (m *ReqSystemUp) GetFile() *SystemUpFile {
	if m != nil {
		return m.File
	}
	return nil
}

type ReqSystemUpPage struct {
	UpName               string    `protobuf:"bytes,1,opt,name=upName,proto3" json:"upName,omitempty"`
	Page                 *PageInfo `protobuf:"bytes,2,opt,name=page,proto3" json:"page,omitempty"`
	Req                  *SystemUp `protobuf:"bytes,3,opt,name=req,proto3" json:"req,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *ReqSystemUpPage) Reset()         { *m = ReqSystemUpPage{} }
func (m *ReqSystemUpPage) String() string { return proto.CompactTextString(m) }
func (*ReqSystemUpPage) ProtoMessage()    {}
func (*ReqSystemUpPage) Descriptor() ([]byte, []int) {
	return fileDescriptor_a86454ed0438be5e, []int{24}
}

func (m *ReqSystemUpPage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReqSystemUpPage.Unmarshal(m, b)
}
func (m *ReqSystemUpPage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReqSystemUpPage.Marshal(b, m, deterministic)
}
func (m *ReqSystemUpPage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqSystemUpPage.Merge(m, src)
}
func (m *ReqSystemUpPage) XXX_Size() int {
	return xxx_messageInfo_ReqSystemUpPage.Size(m)
}
func (m *ReqSystemUpPage) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqSystemUpPage.DiscardUnknown(m)
}

var xxx_messageInfo_ReqSystemUpPage proto.InternalMessageInfo

func (m *ReqSystemUpPage) GetUpName() string {
	if m != nil {
		return m.UpName
	}
	return ""
}

func (m *ReqSystemUpPage) GetPage() *PageInfo {
	if m != nil {
		return m.Page
	}
	return nil
}

func (m *ReqSystemUpPage) GetReq() *SystemUp {
	if m != nil {
		return m.Req
	}
	return nil
}

// 管理员日志
type SystemLog struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	CreatedAt            int32    `protobuf:"varint,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt            int32    `protobuf:"varint,3,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	Type                 int32    `protobuf:"varint,4,opt,name=type,proto3" json:"type,omitempty"`
	Lid                  int64    `protobuf:"varint,5,opt,name=lid,proto3" json:"lid,omitempty"`
	Msg                  string   `protobuf:"bytes,6,opt,name=msg,proto3" json:"msg,omitempty"`
	Data                 string   `protobuf:"bytes,7,opt,name=data,proto3" json:"data,omitempty"`
	Ip                   string   `protobuf:"bytes,8,opt,name=ip,proto3" json:"ip,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SystemLog) Reset()         { *m = SystemLog{} }
func (m *SystemLog) String() string { return proto.CompactTextString(m) }
func (*SystemLog) ProtoMessage()    {}
func (*SystemLog) Descriptor() ([]byte, []int) {
	return fileDescriptor_a86454ed0438be5e, []int{25}
}

func (m *SystemLog) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SystemLog.Unmarshal(m, b)
}
func (m *SystemLog) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SystemLog.Marshal(b, m, deterministic)
}
func (m *SystemLog) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SystemLog.Merge(m, src)
}
func (m *SystemLog) XXX_Size() int {
	return xxx_messageInfo_SystemLog.Size(m)
}
func (m *SystemLog) XXX_DiscardUnknown() {
	xxx_messageInfo_SystemLog.DiscardUnknown(m)
}

var xxx_messageInfo_SystemLog proto.InternalMessageInfo

func (m *SystemLog) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *SystemLog) GetCreatedAt() int32 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *SystemLog) GetUpdatedAt() int32 {
	if m != nil {
		return m.UpdatedAt
	}
	return 0
}

func (m *SystemLog) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *SystemLog) GetLid() int64 {
	if m != nil {
		return m.Lid
	}
	return 0
}

func (m *SystemLog) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *SystemLog) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

func (m *SystemLog) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

type ResSystemLog struct {
	List                 []*SystemLog `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	Count                int32        `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *ResSystemLog) Reset()         { *m = ResSystemLog{} }
func (m *ResSystemLog) String() string { return proto.CompactTextString(m) }
func (*ResSystemLog) ProtoMessage()    {}
func (*ResSystemLog) Descriptor() ([]byte, []int) {
	return fileDescriptor_a86454ed0438be5e, []int{26}
}

func (m *ResSystemLog) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResSystemLog.Unmarshal(m, b)
}
func (m *ResSystemLog) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResSystemLog.Marshal(b, m, deterministic)
}
func (m *ResSystemLog) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResSystemLog.Merge(m, src)
}
func (m *ResSystemLog) XXX_Size() int {
	return xxx_messageInfo_ResSystemLog.Size(m)
}
func (m *ResSystemLog) XXX_DiscardUnknown() {
	xxx_messageInfo_ResSystemLog.DiscardUnknown(m)
}

var xxx_messageInfo_ResSystemLog proto.InternalMessageInfo

func (m *ResSystemLog) GetList() []*SystemLog {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *ResSystemLog) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

type ReqSystemUser struct {
	User                 *SystemUser `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	Group                []int64     `protobuf:"varint,2,rep,packed,name=group,proto3" json:"group,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *ReqSystemUser) Reset()         { *m = ReqSystemUser{} }
func (m *ReqSystemUser) String() string { return proto.CompactTextString(m) }
func (*ReqSystemUser) ProtoMessage()    {}
func (*ReqSystemUser) Descriptor() ([]byte, []int) {
	return fileDescriptor_a86454ed0438be5e, []int{27}
}

func (m *ReqSystemUser) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReqSystemUser.Unmarshal(m, b)
}
func (m *ReqSystemUser) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReqSystemUser.Marshal(b, m, deterministic)
}
func (m *ReqSystemUser) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqSystemUser.Merge(m, src)
}
func (m *ReqSystemUser) XXX_Size() int {
	return xxx_messageInfo_ReqSystemUser.Size(m)
}
func (m *ReqSystemUser) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqSystemUser.DiscardUnknown(m)
}

var xxx_messageInfo_ReqSystemUser proto.InternalMessageInfo

func (m *ReqSystemUser) GetUser() *SystemUser {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *ReqSystemUser) GetGroup() []int64 {
	if m != nil {
		return m.Group
	}
	return nil
}

type ReqLogPage struct {
	Page                 *PageInfo  `protobuf:"bytes,1,opt,name=page,proto3" json:"page,omitempty"`
	Req                  *SystemLog `protobuf:"bytes,2,opt,name=req,proto3" json:"req,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *ReqLogPage) Reset()         { *m = ReqLogPage{} }
func (m *ReqLogPage) String() string { return proto.CompactTextString(m) }
func (*ReqLogPage) ProtoMessage()    {}
func (*ReqLogPage) Descriptor() ([]byte, []int) {
	return fileDescriptor_a86454ed0438be5e, []int{28}
}

func (m *ReqLogPage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReqLogPage.Unmarshal(m, b)
}
func (m *ReqLogPage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReqLogPage.Marshal(b, m, deterministic)
}
func (m *ReqLogPage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqLogPage.Merge(m, src)
}
func (m *ReqLogPage) XXX_Size() int {
	return xxx_messageInfo_ReqLogPage.Size(m)
}
func (m *ReqLogPage) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqLogPage.DiscardUnknown(m)
}

var xxx_messageInfo_ReqLogPage proto.InternalMessageInfo

func (m *ReqLogPage) GetPage() *PageInfo {
	if m != nil {
		return m.Page
	}
	return nil
}

func (m *ReqLogPage) GetReq() *SystemLog {
	if m != nil {
		return m.Req
	}
	return nil
}

// 系统配置中心
type SysConfig struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	CreatedAt            int32    `protobuf:"varint,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt            int32    `protobuf:"varint,3,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	Name                 string   `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Alias                string   `protobuf:"bytes,5,opt,name=alias,proto3" json:"alias,omitempty"`
	LimitAdmin           []int64  `protobuf:"varint,6,rep,packed,name=limit_admin,json=limitAdmin,proto3" json:"limit_admin,omitempty"`
	ConfigRule           []byte   `protobuf:"bytes,7,opt,name=config_rule,json=configRule,proto3" json:"config_rule,omitempty"`
	ConfigValue          []byte   `protobuf:"bytes,8,opt,name=config_value,json=configValue,proto3" json:"config_value,omitempty"`
	AdminId              int64    `protobuf:"varint,9,opt,name=admin_id,json=adminId,proto3" json:"admin_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SysConfig) Reset()         { *m = SysConfig{} }
func (m *SysConfig) String() string { return proto.CompactTextString(m) }
func (*SysConfig) ProtoMessage()    {}
func (*SysConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_a86454ed0438be5e, []int{29}
}

func (m *SysConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SysConfig.Unmarshal(m, b)
}
func (m *SysConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SysConfig.Marshal(b, m, deterministic)
}
func (m *SysConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SysConfig.Merge(m, src)
}
func (m *SysConfig) XXX_Size() int {
	return xxx_messageInfo_SysConfig.Size(m)
}
func (m *SysConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_SysConfig.DiscardUnknown(m)
}

var xxx_messageInfo_SysConfig proto.InternalMessageInfo

func (m *SysConfig) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *SysConfig) GetCreatedAt() int32 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *SysConfig) GetUpdatedAt() int32 {
	if m != nil {
		return m.UpdatedAt
	}
	return 0
}

func (m *SysConfig) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SysConfig) GetAlias() string {
	if m != nil {
		return m.Alias
	}
	return ""
}

func (m *SysConfig) GetLimitAdmin() []int64 {
	if m != nil {
		return m.LimitAdmin
	}
	return nil
}

func (m *SysConfig) GetConfigRule() []byte {
	if m != nil {
		return m.ConfigRule
	}
	return nil
}

func (m *SysConfig) GetConfigValue() []byte {
	if m != nil {
		return m.ConfigValue
	}
	return nil
}

func (m *SysConfig) GetAdminId() int64 {
	if m != nil {
		return m.AdminId
	}
	return 0
}

type ResSysConfigValue struct {
	Alias                map[string]int64 `protobuf:"bytes,1,rep,name=alias,proto3" json:"alias,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *ResSysConfigValue) Reset()         { *m = ResSysConfigValue{} }
func (m *ResSysConfigValue) String() string { return proto.CompactTextString(m) }
func (*ResSysConfigValue) ProtoMessage()    {}
func (*ResSysConfigValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_a86454ed0438be5e, []int{30}
}

func (m *ResSysConfigValue) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResSysConfigValue.Unmarshal(m, b)
}
func (m *ResSysConfigValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResSysConfigValue.Marshal(b, m, deterministic)
}
func (m *ResSysConfigValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResSysConfigValue.Merge(m, src)
}
func (m *ResSysConfigValue) XXX_Size() int {
	return xxx_messageInfo_ResSysConfigValue.Size(m)
}
func (m *ResSysConfigValue) XXX_DiscardUnknown() {
	xxx_messageInfo_ResSysConfigValue.DiscardUnknown(m)
}

var xxx_messageInfo_ResSysConfigValue proto.InternalMessageInfo

func (m *ResSysConfigValue) GetAlias() map[string]int64 {
	if m != nil {
		return m.Alias
	}
	return nil
}

type ResSysConfig struct {
	List                 []*SysConfig `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	Count                int32        `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *ResSysConfig) Reset()         { *m = ResSysConfig{} }
func (m *ResSysConfig) String() string { return proto.CompactTextString(m) }
func (*ResSysConfig) ProtoMessage()    {}
func (*ResSysConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_a86454ed0438be5e, []int{31}
}

func (m *ResSysConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResSysConfig.Unmarshal(m, b)
}
func (m *ResSysConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResSysConfig.Marshal(b, m, deterministic)
}
func (m *ResSysConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResSysConfig.Merge(m, src)
}
func (m *ResSysConfig) XXX_Size() int {
	return xxx_messageInfo_ResSysConfig.Size(m)
}
func (m *ResSysConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_ResSysConfig.DiscardUnknown(m)
}

var xxx_messageInfo_ResSysConfig proto.InternalMessageInfo

func (m *ResSysConfig) GetList() []*SysConfig {
	if m != nil {
		return m.List
	}
	return nil
}

func (m *ResSysConfig) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func init() {
	proto.RegisterType((*ResultEmpty)(nil), "serverAdmin.ResultEmpty")
	proto.RegisterType((*PageInfo)(nil), "serverAdmin.PageInfo")
	proto.RegisterType((*Result)(nil), "serverAdmin.Result")
	proto.RegisterMapType((map[string]string)(nil), "serverAdmin.Result.HeaderEntry")
	proto.RegisterType((*ReqId)(nil), "serverAdmin.ReqId")
	proto.RegisterType((*ReqLogin)(nil), "serverAdmin.ReqLogin")
	proto.RegisterType((*ReqPermissions)(nil), "serverAdmin.ReqPermissions")
	proto.RegisterType((*SystemUser)(nil), "serverAdmin.SystemUser")
	proto.RegisterType((*ResSystemUser)(nil), "serverAdmin.ResSystemUser")
	proto.RegisterType((*SystemGroup)(nil), "serverAdmin.SystemGroup")
	proto.RegisterType((*ResSystemGroup)(nil), "serverAdmin.ResSystemGroup")
	proto.RegisterType((*SystemGroupsLink)(nil), "serverAdmin.SystemGroupsLink")
	proto.RegisterType((*SystemMenu)(nil), "serverAdmin.SystemMenu")
	proto.RegisterType((*ResSystemMenu)(nil), "serverAdmin.ResSystemMenu")
	proto.RegisterType((*SystemApi)(nil), "serverAdmin.SystemApi")
	proto.RegisterType((*ReqSystemAPI)(nil), "serverAdmin.ReqSystemAPI")
	proto.RegisterType((*ResSystemApi)(nil), "serverAdmin.ResSystemApi")
	proto.RegisterType((*SystemUp)(nil), "serverAdmin.SystemUp")
	proto.RegisterType((*SystemUpCommon)(nil), "serverAdmin.SystemUpCommon")
	proto.RegisterType((*ReqSystemUpCommon)(nil), "serverAdmin.ReqSystemUpCommon")
	proto.RegisterType((*ReqSystemUpCommonPage)(nil), "serverAdmin.ReqSystemUpCommonPage")
	proto.RegisterType((*SystemUpFile)(nil), "serverAdmin.SystemUpFile")
	proto.RegisterType((*ResSystemUpFile)(nil), "serverAdmin.ResSystemUpFile")
	proto.RegisterType((*ReqSystemUpCheck)(nil), "serverAdmin.ReqSystemUpCheck")
	proto.RegisterType((*ReqSystemUp)(nil), "serverAdmin.ReqSystemUp")
	proto.RegisterType((*ReqSystemUpPage)(nil), "serverAdmin.ReqSystemUpPage")
	proto.RegisterType((*SystemLog)(nil), "serverAdmin.SystemLog")
	proto.RegisterType((*ResSystemLog)(nil), "serverAdmin.ResSystemLog")
	proto.RegisterType((*ReqSystemUser)(nil), "serverAdmin.ReqSystemUser")
	proto.RegisterType((*ReqLogPage)(nil), "serverAdmin.ReqLogPage")
	proto.RegisterType((*SysConfig)(nil), "serverAdmin.SysConfig")
	proto.RegisterType((*ResSysConfigValue)(nil), "serverAdmin.ResSysConfigValue")
	proto.RegisterMapType((map[string]int64)(nil), "serverAdmin.ResSysConfigValue.AliasEntry")
	proto.RegisterType((*ResSysConfig)(nil), "serverAdmin.ResSysConfig")
}

func init() { proto.RegisterFile("serverAdmin_sys.proto", fileDescriptor_a86454ed0438be5e) }

var fileDescriptor_a86454ed0438be5e = []byte{
	// 1881 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x59, 0x4b, 0x73, 0xdb, 0xc8,
	0x11, 0x36, 0x49, 0x91, 0x22, 0x9b, 0x94, 0xad, 0x9d, 0xf5, 0x03, 0xa2, 0xbc, 0xbb, 0x0a, 0x0e,
	0x89, 0x36, 0x0f, 0xa5, 0xca, 0x39, 0x64, 0xf3, 0xd8, 0xec, 0xd2, 0x96, 0xbd, 0xcb, 0x44, 0x71,
	0x54, 0xb0, 0xad, 0xca, 0x21, 0x55, 0x2c, 0x98, 0x18, 0x53, 0x53, 0xc2, 0x4b, 0xc0, 0x40, 0x0e,
	0x53, 0xb5, 0xa7, 0xdc, 0x73, 0x4c, 0xfe, 0x40, 0x0e, 0xf9, 0x03, 0xc9, 0x35, 0x97, 0xfc, 0xa5,
	0x1c, 0x53, 0x95, 0xea, 0x9e, 0x01, 0x08, 0x48, 0x18, 0xd0, 0x76, 0x69, 0x7d, 0xd2, 0x4c, 0x4f,
	0xcf, 0x87, 0x9e, 0xaf, 0x1f, 0xd3, 0x43, 0xc1, 0x9d, 0x94, 0x27, 0x17, 0x3c, 0x99, 0x78, 0x81,
	0x08, 0x67, 0xe9, 0x32, 0x3d, 0x88, 0x93, 0x48, 0x46, 0x6c, 0x58, 0x12, 0xdb, 0x5b, 0x30, 0x74,
	0x78, 0x9a, 0xf9, 0xf2, 0x71, 0x10, 0xcb, 0xa5, 0x7d, 0x02, 0xfd, 0x63, 0x77, 0xc1, 0xa7, 0xe1,
	0xab, 0x88, 0x31, 0xd8, 0x88, 0xdd, 0x05, 0xb7, 0x5a, 0x7b, 0xad, 0xfd, 0xae, 0x43, 0x63, 0x36,
	0x86, 0x3e, 0xfe, 0x7d, 0x26, 0xfe, 0xc4, 0xad, 0x36, 0xc9, 0x8b, 0x39, 0xae, 0x45, 0x89, 0xc7,
	0x93, 0xdf, 0xf0, 0xa5, 0xd5, 0xd9, 0x6b, 0xed, 0x0f, 0x9c, 0x62, 0x6e, 0xff, 0xab, 0x05, 0x3d,
	0xf5, 0x1d, 0x84, 0x9d, 0x47, 0x5e, 0x01, 0x8b, 0x63, 0xb6, 0x0d, 0x9d, 0x20, 0x5d, 0x10, 0xe2,
	0xc0, 0xc1, 0x21, 0xfb, 0x29, 0xf4, 0x4e, 0xb9, 0xeb, 0xf1, 0xc4, 0xea, 0xec, 0x75, 0xf6, 0x87,
	0x0f, 0x3e, 0x39, 0x28, 0x59, 0x7d, 0xa0, 0xa0, 0x0e, 0xbe, 0x26, 0x8d, 0xc7, 0xa1, 0x4c, 0x96,
	0x8e, 0x56, 0x47, 0xf8, 0x97, 0x91, 0xb7, 0xb4, 0x36, 0xf6, 0x5a, 0xfb, 0x23, 0x87, 0xc6, 0xe3,
	0x9f, 0xc1, 0xb0, 0xa4, 0x8a, 0x5f, 0x3b, 0xe3, 0x4b, 0x32, 0x60, 0xe0, 0xe0, 0x90, 0xdd, 0x86,
	0xee, 0x85, 0xeb, 0x67, 0x5c, 0x5b, 0xa0, 0x26, 0x3f, 0x6f, 0x7f, 0xd6, 0xb2, 0xef, 0x41, 0xd7,
	0xe1, 0xe7, 0x53, 0x8f, 0xdd, 0x84, 0xb6, 0xf0, 0x68, 0x4f, 0xc7, 0x69, 0x0b, 0xcf, 0xfe, 0x03,
	0xf4, 0x1d, 0x7e, 0x7e, 0x14, 0x2d, 0x44, 0x88, 0x27, 0xcf, 0x52, 0x9e, 0x84, 0x6e, 0xc0, 0x35,
	0x6a, 0x31, 0x57, 0x8c, 0xa5, 0xe9, 0xeb, 0x28, 0xf1, 0x34, 0x7a, 0x31, 0x67, 0x16, 0x6c, 0xa2,
	0xde, 0x59, 0x41, 0x58, 0x3e, 0xb5, 0x8f, 0xe0, 0xa6, 0xc3, 0xcf, 0x8f, 0x79, 0x12, 0x88, 0x34,
	0x15, 0x51, 0x98, 0x5e, 0xfe, 0xbe, 0xf2, 0x8e, 0x3c, 0xd5, 0x98, 0x34, 0x66, 0x77, 0xa1, 0x17,
	0x70, 0x79, 0x1a, 0x79, 0x1a, 0x4e, 0xcf, 0xec, 0xff, 0x75, 0x00, 0x9e, 0x2d, 0x53, 0xc9, 0x83,
	0x17, 0x29, 0x4f, 0xae, 0x40, 0x7d, 0x04, 0x30, 0x4f, 0xb8, 0x2b, 0xb9, 0x37, 0x73, 0xa5, 0x76,
	0xeb, 0x40, 0x4b, 0x26, 0x12, 0x97, 0xb3, 0xd8, 0xcb, 0x97, 0x3b, 0x6a, 0x59, 0x4b, 0x26, 0xb2,
	0x72, 0xf8, 0x8d, 0x86, 0xc3, 0x77, 0xaf, 0x1e, 0x9e, 0x87, 0xf3, 0x64, 0x19, 0x4b, 0xab, 0xa7,
	0x0e, 0xaf, 0xa7, 0x6c, 0x17, 0x06, 0xa1, 0x98, 0x9f, 0xcd, 0x08, 0x72, 0x53, 0x6d, 0x43, 0xc1,
	0x53, 0x84, 0xbc, 0x0b, 0x3d, 0xf7, 0xc2, 0x95, 0x6e, 0x62, 0xf5, 0xd5, 0x19, 0xd5, 0x8c, 0xdd,
	0x83, 0xcd, 0xd7, 0x5c, 0xcc, 0xfe, 0x28, 0x42, 0x6b, 0xa0, 0x16, 0x5e, 0x73, 0xf1, 0x7b, 0x11,
	0x12, 0x29, 0xd1, 0x4b, 0xe1, 0x73, 0x0b, 0x34, 0x29, 0x34, 0x43, 0x79, 0x14, 0xfa, 0x22, 0xe4,
	0xd6, 0x90, 0x8e, 0xa4, 0x67, 0x18, 0x0b, 0xa9, 0x74, 0x25, 0xb7, 0x46, 0x24, 0x56, 0x13, 0x66,
	0xc3, 0xc8, 0x47, 0x5f, 0x3f, 0x71, 0x85, 0x9f, 0x25, 0xdc, 0xda, 0xa2, 0xc5, 0x8a, 0x0c, 0xed,
	0xa6, 0xf9, 0x2c, 0xcc, 0x02, 0xeb, 0xa6, 0xca, 0x0e, 0x12, 0x3c, 0xcd, 0x02, 0x66, 0xc3, 0x96,
	0xef, 0xa6, 0x72, 0xa6, 0x34, 0x44, 0x6c, 0xdd, 0x22, 0x6b, 0x86, 0x28, 0xa4, 0x28, 0x9a, 0xc6,
	0xec, 0xbb, 0x70, 0xab, 0xa4, 0x23, 0x45, 0xc0, 0xad, 0x6d, 0x82, 0xd9, 0x2a, 0xb4, 0x9e, 0x8b,
	0x80, 0xb3, 0x03, 0xe8, 0x2e, 0x92, 0x28, 0x8b, 0xad, 0x0f, 0x28, 0x37, 0xac, 0x4a, 0x6e, 0x28,
	0x47, 0x7f, 0x85, 0xeb, 0x8e, 0x52, 0xb3, 0x1d, 0xd8, 0x72, 0x78, 0x5a, 0x8a, 0x80, 0x1f, 0xc0,
	0x86, 0x2f, 0x52, 0x69, 0xb5, 0x68, 0xff, 0xbd, 0x9a, 0xfd, 0xa8, 0xe6, 0x90, 0x12, 0x12, 0x32,
	0x8f, 0xb2, 0x30, 0x8f, 0x0c, 0x35, 0xb1, 0xff, 0xdd, 0x82, 0x61, 0xe9, 0x53, 0xd7, 0x1c, 0x54,
	0xdb, 0xd0, 0x89, 0x85, 0x47, 0xf1, 0xd4, 0x71, 0x70, 0x88, 0xf1, 0x4e, 0xf1, 0xa0, 0xc2, 0x88,
	0xc6, 0xa8, 0xe5, 0xc6, 0x42, 0x87, 0x0f, 0x0e, 0xd1, 0xd6, 0x80, 0x87, 0x59, 0xaa, 0xc3, 0x46,
	0x4d, 0x56, 0x2e, 0xed, 0x97, 0x5c, 0x6a, 0x3f, 0xc7, 0x1c, 0x4b, 0xcb, 0x67, 0xf8, 0x61, 0x85,
	0x16, 0x33, 0xad, 0x4d, 0xbc, 0x7c, 0x0e, 0xdb, 0x25, 0xd5, 0xf4, 0x48, 0x84, 0x67, 0x57, 0xb8,
	0xd9, 0x81, 0x3e, 0x39, 0x66, 0x26, 0x54, 0x4d, 0xe8, 0x38, 0x9b, 0x34, 0x9f, 0x7a, 0xf6, 0xdf,
	0xdb, 0x79, 0xaa, 0xfe, 0x96, 0x87, 0xd9, 0x35, 0xb3, 0x7a, 0x1b, 0xba, 0x52, 0x48, 0x3f, 0xcf,
	0x53, 0x35, 0xc9, 0xb9, 0xee, 0x56, 0xb8, 0x96, 0xcb, 0x98, 0x13, 0xb1, 0x5d, 0x87, 0xc6, 0x45,
	0xbd, 0xd9, 0x2c, 0xd5, 0x1b, 0x06, 0x1b, 0x62, 0x1e, 0x85, 0x3a, 0x13, 0x69, 0xcc, 0xee, 0xc3,
	0x60, 0x1e, 0x05, 0x71, 0x14, 0xf2, 0x50, 0xea, 0x4c, 0x5c, 0x09, 0x70, 0xf5, 0x8c, 0xf3, 0xd8,
	0xf5, 0xc5, 0x85, 0xca, 0xc7, 0xae, 0xb3, 0x12, 0x20, 0x5e, 0x1a, 0x25, 0x52, 0x27, 0x24, 0x8d,
	0xeb, 0xd3, 0xb1, 0x12, 0xd1, 0x44, 0xd4, 0xfa, 0x88, 0x46, 0xb5, 0x46, 0xcf, 0xfd, 0xa7, 0x05,
	0x03, 0xa5, 0x3a, 0x89, 0xc5, 0x35, 0x33, 0x9f, 0xb3, 0xb7, 0x51, 0x62, 0x6f, 0x0f, 0x86, 0x1e,
	0x4f, 0xe7, 0x89, 0x88, 0xa5, 0x88, 0x42, 0x1d, 0xd8, 0x65, 0x11, 0x16, 0x14, 0x37, 0x16, 0x33,
	0x95, 0xeb, 0x2a, 0xca, 0xfb, 0x6e, 0x2c, 0x54, 0xb0, 0xae, 0x8a, 0xfd, 0x66, 0xa5, 0xd8, 0xcf,
	0x61, 0xe4, 0xf0, 0x73, 0x7d, 0x90, 0xe3, 0x29, 0xdb, 0x87, 0x4e, 0xc2, 0xcf, 0xe9, 0x24, 0xc3,
	0x07, 0x77, 0x6b, 0x88, 0x99, 0xc4, 0xc2, 0x41, 0x15, 0xf6, 0xa9, 0xbe, 0xf0, 0xdb, 0xa4, 0x7a,
	0xa7, 0xa2, 0x9a, 0x77, 0x05, 0xaa, 0x0f, 0xb0, 0x8f, 0xf1, 0x23, 0xe9, 0x8a, 0xad, 0xef, 0x57,
	0xe8, 0x37, 0x7d, 0xa5, 0x89, 0xfd, 0xbf, 0xb5, 0xa0, 0xaf, 0x4b, 0x4f, 0x7c, 0xfd, 0xe4, 0x53,
	0x38, 0x6f, 0x94, 0xc2, 0x19, 0x4b, 0xc7, 0x2a, 0xe8, 0x5d, 0xe1, 0xe1, 0x05, 0xf2, 0x4a, 0xf8,
	0x1c, 0x73, 0xb2, 0x47, 0xd2, 0x1e, 0x4e, 0xa7, 0x9e, 0xfd, 0x8f, 0x16, 0xdc, 0xcc, 0x2d, 0x7b,
	0x14, 0x05, 0x41, 0x14, 0xbe, 0x07, 0xfb, 0x76, 0x61, 0x40, 0xd6, 0xd0, 0x42, 0x57, 0xdd, 0x25,
	0x28, 0x78, 0x8e, 0x8b, 0x46, 0x53, 0x0f, 0xe1, 0x83, 0xc2, 0xf7, 0x85, 0xb1, 0x3f, 0xae, 0xf8,
	0x66, 0xb7, 0xae, 0xd8, 0x6b, 0x55, 0xe5, 0x20, 0xfb, 0x04, 0xee, 0x5c, 0x41, 0x41, 0xff, 0x17,
	0x01, 0xd2, 0x5a, 0x1b, 0x20, 0x75, 0x67, 0xb2, 0xff, 0xda, 0x86, 0x51, 0x8e, 0xfa, 0x04, 0xaf,
	0xe0, 0x6b, 0xa7, 0xf1, 0xd4, 0x4d, 0x8b, 0x1c, 0xc3, 0x71, 0x91, 0x77, 0xdd, 0x6a, 0xd5, 0xa2,
	0x9b, 0xa4, 0x57, 0xbd, 0x49, 0xa4, 0xbb, 0xd0, 0x99, 0x84, 0x43, 0xaa, 0x45, 0xd8, 0xe5, 0xf6,
	0xc9, 0x3a, 0x1a, 0x63, 0x3b, 0xe3, 0x65, 0x89, 0x4b, 0xe9, 0x0a, 0x24, 0x2f, 0xe6, 0xab, 0x3a,
	0x35, 0x2c, 0xb7, 0x0d, 0x39, 0x0d, 0xa3, 0xab, 0xa1, 0xb7, 0x55, 0x84, 0x9e, 0x7d, 0x02, 0xb7,
	0x56, 0xf7, 0xb3, 0xa2, 0xe6, 0x47, 0x15, 0xa7, 0xed, 0xd4, 0x3a, 0x0d, 0x15, 0x1b, 0x73, 0xca,
	0x83, 0xed, 0xb2, 0x23, 0x4f, 0xf9, 0xfc, 0x0c, 0xcb, 0x46, 0x16, 0x3f, 0x5d, 0x75, 0xaa, 0x7a,
	0xf6, 0x86, 0x49, 0x92, 0x73, 0xdc, 0x5b, 0x71, 0x6c, 0x7f, 0x83, 0x4f, 0x88, 0xe2, 0x2b, 0xc6,
	0x0f, 0x7c, 0x0f, 0x3a, 0xae, 0x94, 0xb5, 0xc5, 0x25, 0xdf, 0xeb, 0xa0, 0x06, 0x1e, 0x1d, 0xc3,
	0x99, 0x1c, 0xdc, 0x7c, 0x74, 0x54, 0xb3, 0xbf, 0x41, 0xf2, 0x8a, 0xcf, 0x53, 0x9c, 0x9a, 0x4c,
	0x78, 0xf3, 0x02, 0x87, 0xd6, 0x62, 0xd5, 0xec, 0x34, 0x5a, 0x9b, 0xf0, 0x73, 0xfb, 0x9f, 0xc5,
	0xad, 0x71, 0x14, 0x2d, 0xde, 0x4f, 0xe1, 0xf2, 0x57, 0x3e, 0xf1, 0x85, 0x97, 0x3f, 0x9e, 0x7a,
	0xab, 0xc7, 0x13, 0x83, 0x0d, 0xcf, 0x95, 0x6e, 0x7e, 0x57, 0xe3, 0x98, 0x2c, 0x8b, 0xf5, 0x4d,
	0xdd, 0x16, 0x71, 0xa5, 0x82, 0xa3, 0xe5, 0xeb, 0x2b, 0xf8, 0x51, 0xb4, 0x68, 0x8c, 0x36, 0xba,
	0x93, 0xcf, 0xab, 0x5d, 0x26, 0xbe, 0x04, 0x74, 0xb9, 0x30, 0x77, 0x99, 0xa8, 0x84, 0x98, 0xea,
	0x9e, 0x6b, 0xef, 0x75, 0xf6, 0x3b, 0x79, 0xe7, 0xea, 0x02, 0xa8, 0x57, 0xd6, 0xdb, 0xd6, 0x1f,
	0x7d, 0xeb, 0xb5, 0x8d, 0xb7, 0x1e, 0x9e, 0x86, 0x1c, 0xf8, 0xe7, 0x36, 0x39, 0xf0, 0x51, 0x14,
	0xbe, 0x12, 0xdf, 0x82, 0x03, 0x4b, 0xef, 0x22, 0x55, 0x6a, 0x6e, 0x43, 0xd7, 0xf5, 0x85, 0x9b,
	0xea, 0x9a, 0xa4, 0x26, 0xec, 0x13, 0x18, 0xfa, 0x22, 0x10, 0x72, 0xe6, 0xa2, 0x8d, 0x56, 0x8f,
	0x48, 0x00, 0x12, 0x91, 0xd5, 0xa8, 0x30, 0x27, 0x13, 0x67, 0x49, 0xe6, 0xab, 0x67, 0xd1, 0xc8,
	0x01, 0x25, 0x72, 0x32, 0x9f, 0xb3, 0xef, 0xc0, 0x48, 0x2b, 0xa8, 0xa7, 0x6c, 0x9f, 0x34, 0xf4,
	0xa6, 0x13, 0x14, 0x61, 0xdf, 0x49, 0xf0, 0x78, 0x71, 0x0c, 0x54, 0xdf, 0x49, 0xf3, 0xa9, 0x67,
	0xff, 0xa5, 0x85, 0x57, 0x47, 0x5a, 0x10, 0xa1, 0x36, 0x7c, 0x91, 0xdb, 0xaa, 0xa2, 0xe2, 0xd3,
	0xcb, 0x8f, 0xf0, 0xaa, 0xfa, 0xc1, 0x04, 0x75, 0xd5, 0x73, 0x5c, 0xed, 0x1b, 0x7f, 0x06, 0xb0,
	0x12, 0xae, 0x7b, 0x78, 0x77, 0xca, 0x0f, 0xef, 0x22, 0x3e, 0xb5, 0x63, 0xd6, 0xc4, 0xa7, 0xd2,
	0x6a, 0x8a, 0xcf, 0x07, 0xff, 0xfd, 0x50, 0x1f, 0xff, 0xd9, 0x32, 0x65, 0xbf, 0x86, 0xdb, 0xa5,
	0xd7, 0xf5, 0xc3, 0xa5, 0xc3, 0xcf, 0x33, 0x9e, 0x4a, 0xb6, 0x7b, 0xe9, 0x88, 0xe5, 0x37, 0xf8,
	0xf8, 0xc3, 0x9a, 0x1f, 0x21, 0xec, 0x1b, 0xec, 0x4b, 0xba, 0xd6, 0x30, 0x96, 0xd5, 0xcf, 0x01,
	0x77, 0x2e, 0x63, 0x90, 0x78, 0x6c, 0x4a, 0x00, 0xfb, 0x06, 0x9b, 0xc0, 0xad, 0x32, 0xc2, 0xef,
	0x32, 0xc9, 0x4c, 0xda, 0xeb, 0x8d, 0x70, 0x22, 0x9f, 0xa7, 0x8c, 0x5d, 0x36, 0x62, 0xea, 0x8d,
	0xc7, 0x35, 0xfe, 0xd3, 0x9d, 0xb1, 0x7d, 0x83, 0x3d, 0xa6, 0x07, 0x1d, 0x19, 0x81, 0x24, 0x5a,
	0x35, 0xdf, 0xa1, 0x1f, 0x89, 0x4c, 0x30, 0xfa, 0x2c, 0x0f, 0x0b, 0x18, 0xca, 0xd9, 0xfa, 0x2c,
	0x5d, 0x83, 0xf1, 0xcb, 0x02, 0xe3, 0x10, 0x6b, 0x57, 0xdd, 0x59, 0x1a, 0xd8, 0x3c, 0x2c, 0x76,
	0x3f, 0x73, 0x2f, 0x38, 0xbb, 0xfc, 0xa9, 0x52, 0x89, 0x6a, 0x42, 0xf9, 0x02, 0xb6, 0x72, 0x1b,
	0xb8, 0xcf, 0x25, 0x7f, 0x6b, 0x8f, 0x3c, 0x21, 0x33, 0xa8, 0x59, 0x9f, 0xf8, 0x7e, 0x03, 0x9f,
	0xbb, 0xf5, 0x5c, 0xd0, 0x4e, 0x3a, 0xce, 0x28, 0xc7, 0x69, 0x62, 0xf4, 0xcd, 0x51, 0x88, 0x53,
	0xe3, 0xeb, 0x76, 0x6c, 0x5c, 0xa9, 0xa2, 0x10, 0xb7, 0xef, 0x86, 0x32, 0xa1, 0x86, 0x5a, 0xd9,
	0xa2, 0xb8, 0x35, 0xe3, 0x18, 0xc8, 0x3d, 0xa4, 0x67, 0x32, 0x46, 0x6e, 0x33, 0xb7, 0xcd, 0x21,
	0xaf, 0x62, 0x15, 0x27, 0xef, 0x10, 0xab, 0x1a, 0x63, 0x52, 0x60, 0x10, 0xaf, 0xa6, 0xa7, 0xe7,
	0xd8, 0xb4, 0x50, 0x81, 0x20, 0x52, 0xdf, 0x05, 0x42, 0x45, 0x2b, 0x59, 0x61, 0x8e, 0x56, 0x02,
	0x31, 0x10, 0xfa, 0x90, 0x6e, 0xc1, 0x49, 0x2c, 0x9a, 0xf9, 0xdc, 0xa9, 0xe7, 0x62, 0x12, 0x8b,
	0xc2, 0x29, 0x93, 0x58, 0x10, 0x9b, 0x3b, 0xf5, 0x79, 0x37, 0x39, 0x9e, 0x36, 0xa3, 0xfc, 0x2a,
	0x47, 0x21, 0x3e, 0x0d, 0x6f, 0xc9, 0xb1, 0x41, 0x5e, 0xde, 0x4f, 0x64, 0xbe, 0xfd, 0xfe, 0xcf,
	0x29, 0xc6, 0xf1, 0xfb, 0x8a, 0x49, 0x13, 0x42, 0x23, 0x91, 0x2f, 0xea, 0xf2, 0xa3, 0xd4, 0xa7,
	0x8e, 0xcd, 0x7d, 0x2d, 0x79, 0x13, 0x4d, 0x38, 0x11, 0x1e, 0x8f, 0x8c, 0x05, 0xb0, 0x11, 0xe0,
	0x6b, 0xe2, 0x20, 0xef, 0xf9, 0x3f, 0x32, 0x59, 0x41, 0xcb, 0xcd, 0x48, 0x53, 0x7d, 0x1c, 0x72,
	0xe9, 0x7d, 0x13, 0x10, 0xae, 0x8e, 0xef, 0x1b, 0x6a, 0x7a, 0x0e, 0xf5, 0x42, 0xdd, 0x72, 0xe5,
	0x17, 0xa5, 0x6d, 0xb4, 0xac, 0xd0, 0x59, 0x0b, 0xfb, 0x15, 0x55, 0x93, 0x7c, 0xcb, 0xc4, 0xf3,
	0xd8, 0xc7, 0xcd, 0xa8, 0x26, 0xcf, 0xfd, 0xa2, 0x02, 0x74, 0xc8, 0xfd, 0x5a, 0xde, 0x8d, 0x6e,
	0x47, 0xc6, 0xf3, 0x4e, 0xf5, 0x5e, 0x4d, 0x0b, 0x40, 0x87, 0x31, 0x44, 0xfe, 0x51, 0xb4, 0xb0,
	0x6f, 0xb0, 0x47, 0x94, 0xc4, 0xaa, 0x95, 0x69, 0x2a, 0x48, 0x3b, 0xc6, 0x3e, 0x8c, 0x8a, 0xc9,
	0x0a, 0xa4, 0x3e, 0x83, 0xd4, 0xda, 0xd8, 0x20, 0xbf, 0x04, 0x51, 0x9f, 0x44, 0x6b, 0x21, 0xbe,
	0x24, 0x5f, 0x6b, 0x2b, 0x0c, 0x79, 0xa4, 0x41, 0x0c, 0x84, 0x2a, 0xb7, 0x96, 0xbb, 0xd1, 0x8f,
	0x9b, 0xdb, 0x4f, 0x03, 0xd0, 0xcb, 0x1e, 0xfd, 0xdb, 0xeb, 0x27, 0xff, 0x0f, 0x00, 0x00, 0xff,
	0xff, 0x9f, 0x67, 0x00, 0x58, 0x0f, 0x1b, 0x00, 0x00,
}

// This following code was generated by tarsrpc
// Gernerated from serverAdmin_sys.proto
type AdminSys struct {
	s model.Servant
}

//SetServant is required by the servant interface.
func (obj *AdminSys) SetServant(s model.Servant) {
	obj.s = s
}

//AddServant is required by the servant interface
func (obj *AdminSys) AddServant(imp impAdminSys, objStr string) {
	tars.AddServant(obj, imp, objStr)
}

////AddServant adds servant  for the service with context
func (obj *AdminSys) AddServantWithContext(imp impAdminSysWithContext, objStr string) {
	tars.AddServantWithContext(obj, imp, objStr)
}

//TarsSetTimeout is required by the servant interface. t is the timeout in ms.
func (obj *AdminSys) TarsSetTimeout(t int) {
	obj.s.TarsSetTimeout(t)
}

//TarsSetProtocol is required by the servant interface. t is the protocol.
func (obj *AdminSys) TarsSetProtocol(p model.Protocol) {
	obj.s.TarsSetProtocol(p)
}

type impAdminSys interface {
	PermissionsByRequest(input ReqPermissions) (output Result, err error)
	SysUserLogin(input ReqLogin) (output SystemUser, err error)
	SysUserLoginOut(input SystemUser) (output Result, err error)
	SysUserRoles(input ReqId) (output ResSystemMenu, err error)
	SysUserList(input ResultEmpty) (output ResSystemUser, err error)
	SysUserPage(input PageInfo) (output ResSystemUser, err error)
	SysUserData(input ReqId) (output SystemUser, err error)
	SysUserSave(input ReqSystemUser) (output SystemUser, err error)
	SysUserDelete(input SystemUser) (output Result, err error)
	SysGroupAll(input ResultEmpty) (output ResSystemGroup, err error)
	SysGroupPage(input PageInfo) (output ResSystemGroup, err error)
	SysGroupData(input SystemGroup) (output SystemGroup, err error)
	SysGroupSave(input SystemGroup) (output SystemGroup, err error)
	SysGroupDelete(input SystemGroup) (output Result, err error)
	SysMenuAll(input ResultEmpty) (output ResSystemMenu, err error)
	SysMenuPage(input PageInfo) (output ResSystemMenu, err error)
	SysMenuData(input SystemMenu) (output SystemMenu, err error)
	SysMenuSave(input SystemMenu) (output SystemMenu, err error)
	SysMenuDelete(input SystemMenu) (output Result, err error)
	SysApiAll(input ResultEmpty) (output ResSystemApi, err error)
	SysApiPage(input ReqSystemAPI) (output ResSystemApi, err error)
	SysApiData(input SystemApi) (output SystemApi, err error)
	SysApiSave(input SystemApi) (output SystemApi, err error)
	SysApiDelete(input SystemApi) (output Result, err error)
	SysUpSave(input ReqSystemUp) (output SystemUpFile, err error)
	SysVideoData(input ReqId) (output SystemUpFile, err error)
	SysUpCheck(input ReqSystemUpCheck) (output SystemUpFile, err error)
	SysUpPage(input ReqSystemUpPage) (output ResSystemUpFile, err error)
	SysUpCommonPage(input ReqSystemUpCommonPage) (output ResSystemUpFile, err error)
	SysUpCommonAdd(input ReqSystemUpCommon) (output Result, err error)
	SysUpCommonDel(input ReqId) (output Result, err error)
	SysLogPage(input ReqLogPage) (output ResSystemLog, err error)
	SysConfigPage(input PageInfo) (output ResSysConfig, err error)
	SysConfigData(input SysConfig) (output SysConfig, err error)
	SysConfigSave(input SysConfig) (output SysConfig, err error)
	SysConfigDelete(input SysConfig) (output Result, err error)
	SysConfigValue(input ResSysConfigValue) (output Result, err error)
}

type impAdminSysWithContext interface {
	PermissionsByRequest(ctx context.Context, input ReqPermissions) (output Result, err error)
	SysUserLogin(ctx context.Context, input ReqLogin) (output SystemUser, err error)
	SysUserLoginOut(ctx context.Context, input SystemUser) (output Result, err error)
	SysUserRoles(ctx context.Context, input ReqId) (output ResSystemMenu, err error)
	SysUserList(ctx context.Context, input ResultEmpty) (output ResSystemUser, err error)
	SysUserPage(ctx context.Context, input PageInfo) (output ResSystemUser, err error)
	SysUserData(ctx context.Context, input ReqId) (output SystemUser, err error)
	SysUserSave(ctx context.Context, input ReqSystemUser) (output SystemUser, err error)
	SysUserDelete(ctx context.Context, input SystemUser) (output Result, err error)
	SysGroupAll(ctx context.Context, input ResultEmpty) (output ResSystemGroup, err error)
	SysGroupPage(ctx context.Context, input PageInfo) (output ResSystemGroup, err error)
	SysGroupData(ctx context.Context, input SystemGroup) (output SystemGroup, err error)
	SysGroupSave(ctx context.Context, input SystemGroup) (output SystemGroup, err error)
	SysGroupDelete(ctx context.Context, input SystemGroup) (output Result, err error)
	SysMenuAll(ctx context.Context, input ResultEmpty) (output ResSystemMenu, err error)
	SysMenuPage(ctx context.Context, input PageInfo) (output ResSystemMenu, err error)
	SysMenuData(ctx context.Context, input SystemMenu) (output SystemMenu, err error)
	SysMenuSave(ctx context.Context, input SystemMenu) (output SystemMenu, err error)
	SysMenuDelete(ctx context.Context, input SystemMenu) (output Result, err error)
	SysApiAll(ctx context.Context, input ResultEmpty) (output ResSystemApi, err error)
	SysApiPage(ctx context.Context, input ReqSystemAPI) (output ResSystemApi, err error)
	SysApiData(ctx context.Context, input SystemApi) (output SystemApi, err error)
	SysApiSave(ctx context.Context, input SystemApi) (output SystemApi, err error)
	SysApiDelete(ctx context.Context, input SystemApi) (output Result, err error)
	SysUpSave(ctx context.Context, input ReqSystemUp) (output SystemUpFile, err error)
	SysVideoData(ctx context.Context, input ReqId) (output SystemUpFile, err error)
	SysUpCheck(ctx context.Context, input ReqSystemUpCheck) (output SystemUpFile, err error)
	SysUpPage(ctx context.Context, input ReqSystemUpPage) (output ResSystemUpFile, err error)
	SysUpCommonPage(ctx context.Context, input ReqSystemUpCommonPage) (output ResSystemUpFile, err error)
	SysUpCommonAdd(ctx context.Context, input ReqSystemUpCommon) (output Result, err error)
	SysUpCommonDel(ctx context.Context, input ReqId) (output Result, err error)
	SysLogPage(ctx context.Context, input ReqLogPage) (output ResSystemLog, err error)
	SysConfigPage(ctx context.Context, input PageInfo) (output ResSysConfig, err error)
	SysConfigData(ctx context.Context, input SysConfig) (output SysConfig, err error)
	SysConfigSave(ctx context.Context, input SysConfig) (output SysConfig, err error)
	SysConfigDelete(ctx context.Context, input SysConfig) (output Result, err error)
	SysConfigValue(ctx context.Context, input ResSysConfigValue) (output Result, err error)
}

//Dispatch is used to call the user implement of the defined method.
func (obj *AdminSys) Dispatch(ctx context.Context, val interface{}, req *requestf.RequestPacket, resp *requestf.ResponsePacket, withContext bool) (err error) {
	input := tools.Int8ToByte(req.SBuffer)
	var output []byte
	funcName := req.SFuncName
	switch funcName {

	case "PermissionsByRequest":
		inputDefine := ReqPermissions{}
		if err = proto.Unmarshal(input, &inputDefine); err != nil {
			return err
		}
		var res Result
		if withContext == false {
			imp := val.(impAdminSys)
			res, err = imp.PermissionsByRequest(inputDefine)
			if err != nil {
				return err
			}
		} else {
			imp := val.(impAdminSysWithContext)
			res, err = imp.PermissionsByRequest(ctx, inputDefine)
			if err != nil {
				return err
			}
		}
		output, err = proto.Marshal(&res)
		if err != nil {
			return err
		}

	case "SysUserLogin":
		inputDefine := ReqLogin{}
		if err = proto.Unmarshal(input, &inputDefine); err != nil {
			return err
		}
		var res SystemUser
		if withContext == false {
			imp := val.(impAdminSys)
			res, err = imp.SysUserLogin(inputDefine)
			if err != nil {
				return err
			}
		} else {
			imp := val.(impAdminSysWithContext)
			res, err = imp.SysUserLogin(ctx, inputDefine)
			if err != nil {
				return err
			}
		}
		output, err = proto.Marshal(&res)
		if err != nil {
			return err
		}

	case "SysUserLoginOut":
		inputDefine := SystemUser{}
		if err = proto.Unmarshal(input, &inputDefine); err != nil {
			return err
		}
		var res Result
		if withContext == false {
			imp := val.(impAdminSys)
			res, err = imp.SysUserLoginOut(inputDefine)
			if err != nil {
				return err
			}
		} else {
			imp := val.(impAdminSysWithContext)
			res, err = imp.SysUserLoginOut(ctx, inputDefine)
			if err != nil {
				return err
			}
		}
		output, err = proto.Marshal(&res)
		if err != nil {
			return err
		}

	case "SysUserRoles":
		inputDefine := ReqId{}
		if err = proto.Unmarshal(input, &inputDefine); err != nil {
			return err
		}
		var res ResSystemMenu
		if withContext == false {
			imp := val.(impAdminSys)
			res, err = imp.SysUserRoles(inputDefine)
			if err != nil {
				return err
			}
		} else {
			imp := val.(impAdminSysWithContext)
			res, err = imp.SysUserRoles(ctx, inputDefine)
			if err != nil {
				return err
			}
		}
		output, err = proto.Marshal(&res)
		if err != nil {
			return err
		}

	case "SysUserList":
		inputDefine := ResultEmpty{}
		if err = proto.Unmarshal(input, &inputDefine); err != nil {
			return err
		}
		var res ResSystemUser
		if withContext == false {
			imp := val.(impAdminSys)
			res, err = imp.SysUserList(inputDefine)
			if err != nil {
				return err
			}
		} else {
			imp := val.(impAdminSysWithContext)
			res, err = imp.SysUserList(ctx, inputDefine)
			if err != nil {
				return err
			}
		}
		output, err = proto.Marshal(&res)
		if err != nil {
			return err
		}

	case "SysUserPage":
		inputDefine := PageInfo{}
		if err = proto.Unmarshal(input, &inputDefine); err != nil {
			return err
		}
		var res ResSystemUser
		if withContext == false {
			imp := val.(impAdminSys)
			res, err = imp.SysUserPage(inputDefine)
			if err != nil {
				return err
			}
		} else {
			imp := val.(impAdminSysWithContext)
			res, err = imp.SysUserPage(ctx, inputDefine)
			if err != nil {
				return err
			}
		}
		output, err = proto.Marshal(&res)
		if err != nil {
			return err
		}

	case "SysUserData":
		inputDefine := ReqId{}
		if err = proto.Unmarshal(input, &inputDefine); err != nil {
			return err
		}
		var res SystemUser
		if withContext == false {
			imp := val.(impAdminSys)
			res, err = imp.SysUserData(inputDefine)
			if err != nil {
				return err
			}
		} else {
			imp := val.(impAdminSysWithContext)
			res, err = imp.SysUserData(ctx, inputDefine)
			if err != nil {
				return err
			}
		}
		output, err = proto.Marshal(&res)
		if err != nil {
			return err
		}

	case "SysUserSave":
		inputDefine := ReqSystemUser{}
		if err = proto.Unmarshal(input, &inputDefine); err != nil {
			return err
		}
		var res SystemUser
		if withContext == false {
			imp := val.(impAdminSys)
			res, err = imp.SysUserSave(inputDefine)
			if err != nil {
				return err
			}
		} else {
			imp := val.(impAdminSysWithContext)
			res, err = imp.SysUserSave(ctx, inputDefine)
			if err != nil {
				return err
			}
		}
		output, err = proto.Marshal(&res)
		if err != nil {
			return err
		}

	case "SysUserDelete":
		inputDefine := SystemUser{}
		if err = proto.Unmarshal(input, &inputDefine); err != nil {
			return err
		}
		var res Result
		if withContext == false {
			imp := val.(impAdminSys)
			res, err = imp.SysUserDelete(inputDefine)
			if err != nil {
				return err
			}
		} else {
			imp := val.(impAdminSysWithContext)
			res, err = imp.SysUserDelete(ctx, inputDefine)
			if err != nil {
				return err
			}
		}
		output, err = proto.Marshal(&res)
		if err != nil {
			return err
		}

	case "SysGroupAll":
		inputDefine := ResultEmpty{}
		if err = proto.Unmarshal(input, &inputDefine); err != nil {
			return err
		}
		var res ResSystemGroup
		if withContext == false {
			imp := val.(impAdminSys)
			res, err = imp.SysGroupAll(inputDefine)
			if err != nil {
				return err
			}
		} else {
			imp := val.(impAdminSysWithContext)
			res, err = imp.SysGroupAll(ctx, inputDefine)
			if err != nil {
				return err
			}
		}
		output, err = proto.Marshal(&res)
		if err != nil {
			return err
		}

	case "SysGroupPage":
		inputDefine := PageInfo{}
		if err = proto.Unmarshal(input, &inputDefine); err != nil {
			return err
		}
		var res ResSystemGroup
		if withContext == false {
			imp := val.(impAdminSys)
			res, err = imp.SysGroupPage(inputDefine)
			if err != nil {
				return err
			}
		} else {
			imp := val.(impAdminSysWithContext)
			res, err = imp.SysGroupPage(ctx, inputDefine)
			if err != nil {
				return err
			}
		}
		output, err = proto.Marshal(&res)
		if err != nil {
			return err
		}

	case "SysGroupData":
		inputDefine := SystemGroup{}
		if err = proto.Unmarshal(input, &inputDefine); err != nil {
			return err
		}
		var res SystemGroup
		if withContext == false {
			imp := val.(impAdminSys)
			res, err = imp.SysGroupData(inputDefine)
			if err != nil {
				return err
			}
		} else {
			imp := val.(impAdminSysWithContext)
			res, err = imp.SysGroupData(ctx, inputDefine)
			if err != nil {
				return err
			}
		}
		output, err = proto.Marshal(&res)
		if err != nil {
			return err
		}

	case "SysGroupSave":
		inputDefine := SystemGroup{}
		if err = proto.Unmarshal(input, &inputDefine); err != nil {
			return err
		}
		var res SystemGroup
		if withContext == false {
			imp := val.(impAdminSys)
			res, err = imp.SysGroupSave(inputDefine)
			if err != nil {
				return err
			}
		} else {
			imp := val.(impAdminSysWithContext)
			res, err = imp.SysGroupSave(ctx, inputDefine)
			if err != nil {
				return err
			}
		}
		output, err = proto.Marshal(&res)
		if err != nil {
			return err
		}

	case "SysGroupDelete":
		inputDefine := SystemGroup{}
		if err = proto.Unmarshal(input, &inputDefine); err != nil {
			return err
		}
		var res Result
		if withContext == false {
			imp := val.(impAdminSys)
			res, err = imp.SysGroupDelete(inputDefine)
			if err != nil {
				return err
			}
		} else {
			imp := val.(impAdminSysWithContext)
			res, err = imp.SysGroupDelete(ctx, inputDefine)
			if err != nil {
				return err
			}
		}
		output, err = proto.Marshal(&res)
		if err != nil {
			return err
		}

	case "SysMenuAll":
		inputDefine := ResultEmpty{}
		if err = proto.Unmarshal(input, &inputDefine); err != nil {
			return err
		}
		var res ResSystemMenu
		if withContext == false {
			imp := val.(impAdminSys)
			res, err = imp.SysMenuAll(inputDefine)
			if err != nil {
				return err
			}
		} else {
			imp := val.(impAdminSysWithContext)
			res, err = imp.SysMenuAll(ctx, inputDefine)
			if err != nil {
				return err
			}
		}
		output, err = proto.Marshal(&res)
		if err != nil {
			return err
		}

	case "SysMenuPage":
		inputDefine := PageInfo{}
		if err = proto.Unmarshal(input, &inputDefine); err != nil {
			return err
		}
		var res ResSystemMenu
		if withContext == false {
			imp := val.(impAdminSys)
			res, err = imp.SysMenuPage(inputDefine)
			if err != nil {
				return err
			}
		} else {
			imp := val.(impAdminSysWithContext)
			res, err = imp.SysMenuPage(ctx, inputDefine)
			if err != nil {
				return err
			}
		}
		output, err = proto.Marshal(&res)
		if err != nil {
			return err
		}

	case "SysMenuData":
		inputDefine := SystemMenu{}
		if err = proto.Unmarshal(input, &inputDefine); err != nil {
			return err
		}
		var res SystemMenu
		if withContext == false {
			imp := val.(impAdminSys)
			res, err = imp.SysMenuData(inputDefine)
			if err != nil {
				return err
			}
		} else {
			imp := val.(impAdminSysWithContext)
			res, err = imp.SysMenuData(ctx, inputDefine)
			if err != nil {
				return err
			}
		}
		output, err = proto.Marshal(&res)
		if err != nil {
			return err
		}

	case "SysMenuSave":
		inputDefine := SystemMenu{}
		if err = proto.Unmarshal(input, &inputDefine); err != nil {
			return err
		}
		var res SystemMenu
		if withContext == false {
			imp := val.(impAdminSys)
			res, err = imp.SysMenuSave(inputDefine)
			if err != nil {
				return err
			}
		} else {
			imp := val.(impAdminSysWithContext)
			res, err = imp.SysMenuSave(ctx, inputDefine)
			if err != nil {
				return err
			}
		}
		output, err = proto.Marshal(&res)
		if err != nil {
			return err
		}

	case "SysMenuDelete":
		inputDefine := SystemMenu{}
		if err = proto.Unmarshal(input, &inputDefine); err != nil {
			return err
		}
		var res Result
		if withContext == false {
			imp := val.(impAdminSys)
			res, err = imp.SysMenuDelete(inputDefine)
			if err != nil {
				return err
			}
		} else {
			imp := val.(impAdminSysWithContext)
			res, err = imp.SysMenuDelete(ctx, inputDefine)
			if err != nil {
				return err
			}
		}
		output, err = proto.Marshal(&res)
		if err != nil {
			return err
		}

	case "SysApiAll":
		inputDefine := ResultEmpty{}
		if err = proto.Unmarshal(input, &inputDefine); err != nil {
			return err
		}
		var res ResSystemApi
		if withContext == false {
			imp := val.(impAdminSys)
			res, err = imp.SysApiAll(inputDefine)
			if err != nil {
				return err
			}
		} else {
			imp := val.(impAdminSysWithContext)
			res, err = imp.SysApiAll(ctx, inputDefine)
			if err != nil {
				return err
			}
		}
		output, err = proto.Marshal(&res)
		if err != nil {
			return err
		}

	case "SysApiPage":
		inputDefine := ReqSystemAPI{}
		if err = proto.Unmarshal(input, &inputDefine); err != nil {
			return err
		}
		var res ResSystemApi
		if withContext == false {
			imp := val.(impAdminSys)
			res, err = imp.SysApiPage(inputDefine)
			if err != nil {
				return err
			}
		} else {
			imp := val.(impAdminSysWithContext)
			res, err = imp.SysApiPage(ctx, inputDefine)
			if err != nil {
				return err
			}
		}
		output, err = proto.Marshal(&res)
		if err != nil {
			return err
		}

	case "SysApiData":
		inputDefine := SystemApi{}
		if err = proto.Unmarshal(input, &inputDefine); err != nil {
			return err
		}
		var res SystemApi
		if withContext == false {
			imp := val.(impAdminSys)
			res, err = imp.SysApiData(inputDefine)
			if err != nil {
				return err
			}
		} else {
			imp := val.(impAdminSysWithContext)
			res, err = imp.SysApiData(ctx, inputDefine)
			if err != nil {
				return err
			}
		}
		output, err = proto.Marshal(&res)
		if err != nil {
			return err
		}

	case "SysApiSave":
		inputDefine := SystemApi{}
		if err = proto.Unmarshal(input, &inputDefine); err != nil {
			return err
		}
		var res SystemApi
		if withContext == false {
			imp := val.(impAdminSys)
			res, err = imp.SysApiSave(inputDefine)
			if err != nil {
				return err
			}
		} else {
			imp := val.(impAdminSysWithContext)
			res, err = imp.SysApiSave(ctx, inputDefine)
			if err != nil {
				return err
			}
		}
		output, err = proto.Marshal(&res)
		if err != nil {
			return err
		}

	case "SysApiDelete":
		inputDefine := SystemApi{}
		if err = proto.Unmarshal(input, &inputDefine); err != nil {
			return err
		}
		var res Result
		if withContext == false {
			imp := val.(impAdminSys)
			res, err = imp.SysApiDelete(inputDefine)
			if err != nil {
				return err
			}
		} else {
			imp := val.(impAdminSysWithContext)
			res, err = imp.SysApiDelete(ctx, inputDefine)
			if err != nil {
				return err
			}
		}
		output, err = proto.Marshal(&res)
		if err != nil {
			return err
		}

	case "SysUpSave":
		inputDefine := ReqSystemUp{}
		if err = proto.Unmarshal(input, &inputDefine); err != nil {
			return err
		}
		var res SystemUpFile
		if withContext == false {
			imp := val.(impAdminSys)
			res, err = imp.SysUpSave(inputDefine)
			if err != nil {
				return err
			}
		} else {
			imp := val.(impAdminSysWithContext)
			res, err = imp.SysUpSave(ctx, inputDefine)
			if err != nil {
				return err
			}
		}
		output, err = proto.Marshal(&res)
		if err != nil {
			return err
		}

	case "SysVideoData":
		inputDefine := ReqId{}
		if err = proto.Unmarshal(input, &inputDefine); err != nil {
			return err
		}
		var res SystemUpFile
		if withContext == false {
			imp := val.(impAdminSys)
			res, err = imp.SysVideoData(inputDefine)
			if err != nil {
				return err
			}
		} else {
			imp := val.(impAdminSysWithContext)
			res, err = imp.SysVideoData(ctx, inputDefine)
			if err != nil {
				return err
			}
		}
		output, err = proto.Marshal(&res)
		if err != nil {
			return err
		}

	case "SysUpCheck":
		inputDefine := ReqSystemUpCheck{}
		if err = proto.Unmarshal(input, &inputDefine); err != nil {
			return err
		}
		var res SystemUpFile
		if withContext == false {
			imp := val.(impAdminSys)
			res, err = imp.SysUpCheck(inputDefine)
			if err != nil {
				return err
			}
		} else {
			imp := val.(impAdminSysWithContext)
			res, err = imp.SysUpCheck(ctx, inputDefine)
			if err != nil {
				return err
			}
		}
		output, err = proto.Marshal(&res)
		if err != nil {
			return err
		}

	case "SysUpPage":
		inputDefine := ReqSystemUpPage{}
		if err = proto.Unmarshal(input, &inputDefine); err != nil {
			return err
		}
		var res ResSystemUpFile
		if withContext == false {
			imp := val.(impAdminSys)
			res, err = imp.SysUpPage(inputDefine)
			if err != nil {
				return err
			}
		} else {
			imp := val.(impAdminSysWithContext)
			res, err = imp.SysUpPage(ctx, inputDefine)
			if err != nil {
				return err
			}
		}
		output, err = proto.Marshal(&res)
		if err != nil {
			return err
		}

	case "SysUpCommonPage":
		inputDefine := ReqSystemUpCommonPage{}
		if err = proto.Unmarshal(input, &inputDefine); err != nil {
			return err
		}
		var res ResSystemUpFile
		if withContext == false {
			imp := val.(impAdminSys)
			res, err = imp.SysUpCommonPage(inputDefine)
			if err != nil {
				return err
			}
		} else {
			imp := val.(impAdminSysWithContext)
			res, err = imp.SysUpCommonPage(ctx, inputDefine)
			if err != nil {
				return err
			}
		}
		output, err = proto.Marshal(&res)
		if err != nil {
			return err
		}

	case "SysUpCommonAdd":
		inputDefine := ReqSystemUpCommon{}
		if err = proto.Unmarshal(input, &inputDefine); err != nil {
			return err
		}
		var res Result
		if withContext == false {
			imp := val.(impAdminSys)
			res, err = imp.SysUpCommonAdd(inputDefine)
			if err != nil {
				return err
			}
		} else {
			imp := val.(impAdminSysWithContext)
			res, err = imp.SysUpCommonAdd(ctx, inputDefine)
			if err != nil {
				return err
			}
		}
		output, err = proto.Marshal(&res)
		if err != nil {
			return err
		}

	case "SysUpCommonDel":
		inputDefine := ReqId{}
		if err = proto.Unmarshal(input, &inputDefine); err != nil {
			return err
		}
		var res Result
		if withContext == false {
			imp := val.(impAdminSys)
			res, err = imp.SysUpCommonDel(inputDefine)
			if err != nil {
				return err
			}
		} else {
			imp := val.(impAdminSysWithContext)
			res, err = imp.SysUpCommonDel(ctx, inputDefine)
			if err != nil {
				return err
			}
		}
		output, err = proto.Marshal(&res)
		if err != nil {
			return err
		}

	case "SysLogPage":
		inputDefine := ReqLogPage{}
		if err = proto.Unmarshal(input, &inputDefine); err != nil {
			return err
		}
		var res ResSystemLog
		if withContext == false {
			imp := val.(impAdminSys)
			res, err = imp.SysLogPage(inputDefine)
			if err != nil {
				return err
			}
		} else {
			imp := val.(impAdminSysWithContext)
			res, err = imp.SysLogPage(ctx, inputDefine)
			if err != nil {
				return err
			}
		}
		output, err = proto.Marshal(&res)
		if err != nil {
			return err
		}

	case "SysConfigPage":
		inputDefine := PageInfo{}
		if err = proto.Unmarshal(input, &inputDefine); err != nil {
			return err
		}
		var res ResSysConfig
		if withContext == false {
			imp := val.(impAdminSys)
			res, err = imp.SysConfigPage(inputDefine)
			if err != nil {
				return err
			}
		} else {
			imp := val.(impAdminSysWithContext)
			res, err = imp.SysConfigPage(ctx, inputDefine)
			if err != nil {
				return err
			}
		}
		output, err = proto.Marshal(&res)
		if err != nil {
			return err
		}

	case "SysConfigData":
		inputDefine := SysConfig{}
		if err = proto.Unmarshal(input, &inputDefine); err != nil {
			return err
		}
		var res SysConfig
		if withContext == false {
			imp := val.(impAdminSys)
			res, err = imp.SysConfigData(inputDefine)
			if err != nil {
				return err
			}
		} else {
			imp := val.(impAdminSysWithContext)
			res, err = imp.SysConfigData(ctx, inputDefine)
			if err != nil {
				return err
			}
		}
		output, err = proto.Marshal(&res)
		if err != nil {
			return err
		}

	case "SysConfigSave":
		inputDefine := SysConfig{}
		if err = proto.Unmarshal(input, &inputDefine); err != nil {
			return err
		}
		var res SysConfig
		if withContext == false {
			imp := val.(impAdminSys)
			res, err = imp.SysConfigSave(inputDefine)
			if err != nil {
				return err
			}
		} else {
			imp := val.(impAdminSysWithContext)
			res, err = imp.SysConfigSave(ctx, inputDefine)
			if err != nil {
				return err
			}
		}
		output, err = proto.Marshal(&res)
		if err != nil {
			return err
		}

	case "SysConfigDelete":
		inputDefine := SysConfig{}
		if err = proto.Unmarshal(input, &inputDefine); err != nil {
			return err
		}
		var res Result
		if withContext == false {
			imp := val.(impAdminSys)
			res, err = imp.SysConfigDelete(inputDefine)
			if err != nil {
				return err
			}
		} else {
			imp := val.(impAdminSysWithContext)
			res, err = imp.SysConfigDelete(ctx, inputDefine)
			if err != nil {
				return err
			}
		}
		output, err = proto.Marshal(&res)
		if err != nil {
			return err
		}

	case "SysConfigValue":
		inputDefine := ResSysConfigValue{}
		if err = proto.Unmarshal(input, &inputDefine); err != nil {
			return err
		}
		var res Result
		if withContext == false {
			imp := val.(impAdminSys)
			res, err = imp.SysConfigValue(inputDefine)
			if err != nil {
				return err
			}
		} else {
			imp := val.(impAdminSysWithContext)
			res, err = imp.SysConfigValue(ctx, inputDefine)
			if err != nil {
				return err
			}
		}
		output, err = proto.Marshal(&res)
		if err != nil {
			return err
		}

	default:
		return fmt.Errorf("func mismatch")
	}
	var _status map[string]string
	s, ok := current.GetResponseStatus(ctx)
	if ok && s != nil {
		_status = s
	}
	var _context map[string]string
	c, ok := current.GetResponseContext(ctx)
	if ok && c != nil {
		_context = c
	}
	*resp = requestf.ResponsePacket{
		IVersion:     1,
		CPacketType:  0,
		IRequestId:   req.IRequestId,
		IMessageType: 0,
		IRet:         0,
		SBuffer:      tools.ByteToInt8(output),
		Status:       _status,
		SResultDesc:  "",
		Context:      _context,
	}
	return nil
}

// PermissionsByRequest is client rpc method as defined
func (obj *AdminSys) PermissionsByRequest(input ReqPermissions, _opt ...map[string]string) (output Result, err error) {
	ctx := context.Background()
	return obj.PermissionsByRequestWithContext(ctx, input, _opt...)
}

// PermissionsByRequestWithContext is client rpc method as defined
func (obj *AdminSys) PermissionsByRequestWithContext(ctx context.Context, input ReqPermissions, _opt ...map[string]string) (output Result, err error) {
	var inputMarshal []byte
	inputMarshal, err = proto.Marshal(&input)
	if err != nil {
		return output, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}

	resp := new(requestf.ResponsePacket)

	err = obj.s.Tars_invoke(ctx, 0, "PermissionsByRequest", inputMarshal, _status, _context, resp)
	if err != nil {
		return output, err
	}
	if err = proto.Unmarshal(tools.Int8ToByte(resp.SBuffer), &output); err != nil {
		return output, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range resp.Status {
			_status[k] = v
		}
	}

	return output, nil
}

// SysUserLogin is client rpc method as defined
func (obj *AdminSys) SysUserLogin(input ReqLogin, _opt ...map[string]string) (output SystemUser, err error) {
	ctx := context.Background()
	return obj.SysUserLoginWithContext(ctx, input, _opt...)
}

// SysUserLoginWithContext is client rpc method as defined
func (obj *AdminSys) SysUserLoginWithContext(ctx context.Context, input ReqLogin, _opt ...map[string]string) (output SystemUser, err error) {
	var inputMarshal []byte
	inputMarshal, err = proto.Marshal(&input)
	if err != nil {
		return output, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}

	resp := new(requestf.ResponsePacket)

	err = obj.s.Tars_invoke(ctx, 0, "SysUserLogin", inputMarshal, _status, _context, resp)
	if err != nil {
		return output, err
	}
	if err = proto.Unmarshal(tools.Int8ToByte(resp.SBuffer), &output); err != nil {
		return output, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range resp.Status {
			_status[k] = v
		}
	}

	return output, nil
}

// SysUserLoginOut is client rpc method as defined
func (obj *AdminSys) SysUserLoginOut(input SystemUser, _opt ...map[string]string) (output Result, err error) {
	ctx := context.Background()
	return obj.SysUserLoginOutWithContext(ctx, input, _opt...)
}

// SysUserLoginOutWithContext is client rpc method as defined
func (obj *AdminSys) SysUserLoginOutWithContext(ctx context.Context, input SystemUser, _opt ...map[string]string) (output Result, err error) {
	var inputMarshal []byte
	inputMarshal, err = proto.Marshal(&input)
	if err != nil {
		return output, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}

	resp := new(requestf.ResponsePacket)

	err = obj.s.Tars_invoke(ctx, 0, "SysUserLoginOut", inputMarshal, _status, _context, resp)
	if err != nil {
		return output, err
	}
	if err = proto.Unmarshal(tools.Int8ToByte(resp.SBuffer), &output); err != nil {
		return output, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range resp.Status {
			_status[k] = v
		}
	}

	return output, nil
}

// SysUserRoles is client rpc method as defined
func (obj *AdminSys) SysUserRoles(input ReqId, _opt ...map[string]string) (output ResSystemMenu, err error) {
	ctx := context.Background()
	return obj.SysUserRolesWithContext(ctx, input, _opt...)
}

// SysUserRolesWithContext is client rpc method as defined
func (obj *AdminSys) SysUserRolesWithContext(ctx context.Context, input ReqId, _opt ...map[string]string) (output ResSystemMenu, err error) {
	var inputMarshal []byte
	inputMarshal, err = proto.Marshal(&input)
	if err != nil {
		return output, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}

	resp := new(requestf.ResponsePacket)

	err = obj.s.Tars_invoke(ctx, 0, "SysUserRoles", inputMarshal, _status, _context, resp)
	if err != nil {
		return output, err
	}
	if err = proto.Unmarshal(tools.Int8ToByte(resp.SBuffer), &output); err != nil {
		return output, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range resp.Status {
			_status[k] = v
		}
	}

	return output, nil
}

// SysUserList is client rpc method as defined
func (obj *AdminSys) SysUserList(input ResultEmpty, _opt ...map[string]string) (output ResSystemUser, err error) {
	ctx := context.Background()
	return obj.SysUserListWithContext(ctx, input, _opt...)
}

// SysUserListWithContext is client rpc method as defined
func (obj *AdminSys) SysUserListWithContext(ctx context.Context, input ResultEmpty, _opt ...map[string]string) (output ResSystemUser, err error) {
	var inputMarshal []byte
	inputMarshal, err = proto.Marshal(&input)
	if err != nil {
		return output, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}

	resp := new(requestf.ResponsePacket)

	err = obj.s.Tars_invoke(ctx, 0, "SysUserList", inputMarshal, _status, _context, resp)
	if err != nil {
		return output, err
	}
	if err = proto.Unmarshal(tools.Int8ToByte(resp.SBuffer), &output); err != nil {
		return output, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range resp.Status {
			_status[k] = v
		}
	}

	return output, nil
}

// SysUserPage is client rpc method as defined
func (obj *AdminSys) SysUserPage(input PageInfo, _opt ...map[string]string) (output ResSystemUser, err error) {
	ctx := context.Background()
	return obj.SysUserPageWithContext(ctx, input, _opt...)
}

// SysUserPageWithContext is client rpc method as defined
func (obj *AdminSys) SysUserPageWithContext(ctx context.Context, input PageInfo, _opt ...map[string]string) (output ResSystemUser, err error) {
	var inputMarshal []byte
	inputMarshal, err = proto.Marshal(&input)
	if err != nil {
		return output, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}

	resp := new(requestf.ResponsePacket)

	err = obj.s.Tars_invoke(ctx, 0, "SysUserPage", inputMarshal, _status, _context, resp)
	if err != nil {
		return output, err
	}
	if err = proto.Unmarshal(tools.Int8ToByte(resp.SBuffer), &output); err != nil {
		return output, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range resp.Status {
			_status[k] = v
		}
	}

	return output, nil
}

// SysUserData is client rpc method as defined
func (obj *AdminSys) SysUserData(input ReqId, _opt ...map[string]string) (output SystemUser, err error) {
	ctx := context.Background()
	return obj.SysUserDataWithContext(ctx, input, _opt...)
}

// SysUserDataWithContext is client rpc method as defined
func (obj *AdminSys) SysUserDataWithContext(ctx context.Context, input ReqId, _opt ...map[string]string) (output SystemUser, err error) {
	var inputMarshal []byte
	inputMarshal, err = proto.Marshal(&input)
	if err != nil {
		return output, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}

	resp := new(requestf.ResponsePacket)

	err = obj.s.Tars_invoke(ctx, 0, "SysUserData", inputMarshal, _status, _context, resp)
	if err != nil {
		return output, err
	}
	if err = proto.Unmarshal(tools.Int8ToByte(resp.SBuffer), &output); err != nil {
		return output, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range resp.Status {
			_status[k] = v
		}
	}

	return output, nil
}

// SysUserSave is client rpc method as defined
func (obj *AdminSys) SysUserSave(input ReqSystemUser, _opt ...map[string]string) (output SystemUser, err error) {
	ctx := context.Background()
	return obj.SysUserSaveWithContext(ctx, input, _opt...)
}

// SysUserSaveWithContext is client rpc method as defined
func (obj *AdminSys) SysUserSaveWithContext(ctx context.Context, input ReqSystemUser, _opt ...map[string]string) (output SystemUser, err error) {
	var inputMarshal []byte
	inputMarshal, err = proto.Marshal(&input)
	if err != nil {
		return output, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}

	resp := new(requestf.ResponsePacket)

	err = obj.s.Tars_invoke(ctx, 0, "SysUserSave", inputMarshal, _status, _context, resp)
	if err != nil {
		return output, err
	}
	if err = proto.Unmarshal(tools.Int8ToByte(resp.SBuffer), &output); err != nil {
		return output, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range resp.Status {
			_status[k] = v
		}
	}

	return output, nil
}

// SysUserDelete is client rpc method as defined
func (obj *AdminSys) SysUserDelete(input SystemUser, _opt ...map[string]string) (output Result, err error) {
	ctx := context.Background()
	return obj.SysUserDeleteWithContext(ctx, input, _opt...)
}

// SysUserDeleteWithContext is client rpc method as defined
func (obj *AdminSys) SysUserDeleteWithContext(ctx context.Context, input SystemUser, _opt ...map[string]string) (output Result, err error) {
	var inputMarshal []byte
	inputMarshal, err = proto.Marshal(&input)
	if err != nil {
		return output, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}

	resp := new(requestf.ResponsePacket)

	err = obj.s.Tars_invoke(ctx, 0, "SysUserDelete", inputMarshal, _status, _context, resp)
	if err != nil {
		return output, err
	}
	if err = proto.Unmarshal(tools.Int8ToByte(resp.SBuffer), &output); err != nil {
		return output, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range resp.Status {
			_status[k] = v
		}
	}

	return output, nil
}

// SysGroupAll is client rpc method as defined
func (obj *AdminSys) SysGroupAll(input ResultEmpty, _opt ...map[string]string) (output ResSystemGroup, err error) {
	ctx := context.Background()
	return obj.SysGroupAllWithContext(ctx, input, _opt...)
}

// SysGroupAllWithContext is client rpc method as defined
func (obj *AdminSys) SysGroupAllWithContext(ctx context.Context, input ResultEmpty, _opt ...map[string]string) (output ResSystemGroup, err error) {
	var inputMarshal []byte
	inputMarshal, err = proto.Marshal(&input)
	if err != nil {
		return output, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}

	resp := new(requestf.ResponsePacket)

	err = obj.s.Tars_invoke(ctx, 0, "SysGroupAll", inputMarshal, _status, _context, resp)
	if err != nil {
		return output, err
	}
	if err = proto.Unmarshal(tools.Int8ToByte(resp.SBuffer), &output); err != nil {
		return output, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range resp.Status {
			_status[k] = v
		}
	}

	return output, nil
}

// SysGroupPage is client rpc method as defined
func (obj *AdminSys) SysGroupPage(input PageInfo, _opt ...map[string]string) (output ResSystemGroup, err error) {
	ctx := context.Background()
	return obj.SysGroupPageWithContext(ctx, input, _opt...)
}

// SysGroupPageWithContext is client rpc method as defined
func (obj *AdminSys) SysGroupPageWithContext(ctx context.Context, input PageInfo, _opt ...map[string]string) (output ResSystemGroup, err error) {
	var inputMarshal []byte
	inputMarshal, err = proto.Marshal(&input)
	if err != nil {
		return output, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}

	resp := new(requestf.ResponsePacket)

	err = obj.s.Tars_invoke(ctx, 0, "SysGroupPage", inputMarshal, _status, _context, resp)
	if err != nil {
		return output, err
	}
	if err = proto.Unmarshal(tools.Int8ToByte(resp.SBuffer), &output); err != nil {
		return output, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range resp.Status {
			_status[k] = v
		}
	}

	return output, nil
}

// SysGroupData is client rpc method as defined
func (obj *AdminSys) SysGroupData(input SystemGroup, _opt ...map[string]string) (output SystemGroup, err error) {
	ctx := context.Background()
	return obj.SysGroupDataWithContext(ctx, input, _opt...)
}

// SysGroupDataWithContext is client rpc method as defined
func (obj *AdminSys) SysGroupDataWithContext(ctx context.Context, input SystemGroup, _opt ...map[string]string) (output SystemGroup, err error) {
	var inputMarshal []byte
	inputMarshal, err = proto.Marshal(&input)
	if err != nil {
		return output, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}

	resp := new(requestf.ResponsePacket)

	err = obj.s.Tars_invoke(ctx, 0, "SysGroupData", inputMarshal, _status, _context, resp)
	if err != nil {
		return output, err
	}
	if err = proto.Unmarshal(tools.Int8ToByte(resp.SBuffer), &output); err != nil {
		return output, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range resp.Status {
			_status[k] = v
		}
	}

	return output, nil
}

// SysGroupSave is client rpc method as defined
func (obj *AdminSys) SysGroupSave(input SystemGroup, _opt ...map[string]string) (output SystemGroup, err error) {
	ctx := context.Background()
	return obj.SysGroupSaveWithContext(ctx, input, _opt...)
}

// SysGroupSaveWithContext is client rpc method as defined
func (obj *AdminSys) SysGroupSaveWithContext(ctx context.Context, input SystemGroup, _opt ...map[string]string) (output SystemGroup, err error) {
	var inputMarshal []byte
	inputMarshal, err = proto.Marshal(&input)
	if err != nil {
		return output, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}

	resp := new(requestf.ResponsePacket)

	err = obj.s.Tars_invoke(ctx, 0, "SysGroupSave", inputMarshal, _status, _context, resp)
	if err != nil {
		return output, err
	}
	if err = proto.Unmarshal(tools.Int8ToByte(resp.SBuffer), &output); err != nil {
		return output, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range resp.Status {
			_status[k] = v
		}
	}

	return output, nil
}

// SysGroupDelete is client rpc method as defined
func (obj *AdminSys) SysGroupDelete(input SystemGroup, _opt ...map[string]string) (output Result, err error) {
	ctx := context.Background()
	return obj.SysGroupDeleteWithContext(ctx, input, _opt...)
}

// SysGroupDeleteWithContext is client rpc method as defined
func (obj *AdminSys) SysGroupDeleteWithContext(ctx context.Context, input SystemGroup, _opt ...map[string]string) (output Result, err error) {
	var inputMarshal []byte
	inputMarshal, err = proto.Marshal(&input)
	if err != nil {
		return output, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}

	resp := new(requestf.ResponsePacket)

	err = obj.s.Tars_invoke(ctx, 0, "SysGroupDelete", inputMarshal, _status, _context, resp)
	if err != nil {
		return output, err
	}
	if err = proto.Unmarshal(tools.Int8ToByte(resp.SBuffer), &output); err != nil {
		return output, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range resp.Status {
			_status[k] = v
		}
	}

	return output, nil
}

// SysMenuAll is client rpc method as defined
func (obj *AdminSys) SysMenuAll(input ResultEmpty, _opt ...map[string]string) (output ResSystemMenu, err error) {
	ctx := context.Background()
	return obj.SysMenuAllWithContext(ctx, input, _opt...)
}

// SysMenuAllWithContext is client rpc method as defined
func (obj *AdminSys) SysMenuAllWithContext(ctx context.Context, input ResultEmpty, _opt ...map[string]string) (output ResSystemMenu, err error) {
	var inputMarshal []byte
	inputMarshal, err = proto.Marshal(&input)
	if err != nil {
		return output, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}

	resp := new(requestf.ResponsePacket)

	err = obj.s.Tars_invoke(ctx, 0, "SysMenuAll", inputMarshal, _status, _context, resp)
	if err != nil {
		return output, err
	}
	if err = proto.Unmarshal(tools.Int8ToByte(resp.SBuffer), &output); err != nil {
		return output, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range resp.Status {
			_status[k] = v
		}
	}

	return output, nil
}

// SysMenuPage is client rpc method as defined
func (obj *AdminSys) SysMenuPage(input PageInfo, _opt ...map[string]string) (output ResSystemMenu, err error) {
	ctx := context.Background()
	return obj.SysMenuPageWithContext(ctx, input, _opt...)
}

// SysMenuPageWithContext is client rpc method as defined
func (obj *AdminSys) SysMenuPageWithContext(ctx context.Context, input PageInfo, _opt ...map[string]string) (output ResSystemMenu, err error) {
	var inputMarshal []byte
	inputMarshal, err = proto.Marshal(&input)
	if err != nil {
		return output, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}

	resp := new(requestf.ResponsePacket)

	err = obj.s.Tars_invoke(ctx, 0, "SysMenuPage", inputMarshal, _status, _context, resp)
	if err != nil {
		return output, err
	}
	if err = proto.Unmarshal(tools.Int8ToByte(resp.SBuffer), &output); err != nil {
		return output, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range resp.Status {
			_status[k] = v
		}
	}

	return output, nil
}

// SysMenuData is client rpc method as defined
func (obj *AdminSys) SysMenuData(input SystemMenu, _opt ...map[string]string) (output SystemMenu, err error) {
	ctx := context.Background()
	return obj.SysMenuDataWithContext(ctx, input, _opt...)
}

// SysMenuDataWithContext is client rpc method as defined
func (obj *AdminSys) SysMenuDataWithContext(ctx context.Context, input SystemMenu, _opt ...map[string]string) (output SystemMenu, err error) {
	var inputMarshal []byte
	inputMarshal, err = proto.Marshal(&input)
	if err != nil {
		return output, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}

	resp := new(requestf.ResponsePacket)

	err = obj.s.Tars_invoke(ctx, 0, "SysMenuData", inputMarshal, _status, _context, resp)
	if err != nil {
		return output, err
	}
	if err = proto.Unmarshal(tools.Int8ToByte(resp.SBuffer), &output); err != nil {
		return output, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range resp.Status {
			_status[k] = v
		}
	}

	return output, nil
}

// SysMenuSave is client rpc method as defined
func (obj *AdminSys) SysMenuSave(input SystemMenu, _opt ...map[string]string) (output SystemMenu, err error) {
	ctx := context.Background()
	return obj.SysMenuSaveWithContext(ctx, input, _opt...)
}

// SysMenuSaveWithContext is client rpc method as defined
func (obj *AdminSys) SysMenuSaveWithContext(ctx context.Context, input SystemMenu, _opt ...map[string]string) (output SystemMenu, err error) {
	var inputMarshal []byte
	inputMarshal, err = proto.Marshal(&input)
	if err != nil {
		return output, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}

	resp := new(requestf.ResponsePacket)

	err = obj.s.Tars_invoke(ctx, 0, "SysMenuSave", inputMarshal, _status, _context, resp)
	if err != nil {
		return output, err
	}
	if err = proto.Unmarshal(tools.Int8ToByte(resp.SBuffer), &output); err != nil {
		return output, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range resp.Status {
			_status[k] = v
		}
	}

	return output, nil
}

// SysMenuDelete is client rpc method as defined
func (obj *AdminSys) SysMenuDelete(input SystemMenu, _opt ...map[string]string) (output Result, err error) {
	ctx := context.Background()
	return obj.SysMenuDeleteWithContext(ctx, input, _opt...)
}

// SysMenuDeleteWithContext is client rpc method as defined
func (obj *AdminSys) SysMenuDeleteWithContext(ctx context.Context, input SystemMenu, _opt ...map[string]string) (output Result, err error) {
	var inputMarshal []byte
	inputMarshal, err = proto.Marshal(&input)
	if err != nil {
		return output, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}

	resp := new(requestf.ResponsePacket)

	err = obj.s.Tars_invoke(ctx, 0, "SysMenuDelete", inputMarshal, _status, _context, resp)
	if err != nil {
		return output, err
	}
	if err = proto.Unmarshal(tools.Int8ToByte(resp.SBuffer), &output); err != nil {
		return output, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range resp.Status {
			_status[k] = v
		}
	}

	return output, nil
}

// SysApiAll is client rpc method as defined
func (obj *AdminSys) SysApiAll(input ResultEmpty, _opt ...map[string]string) (output ResSystemApi, err error) {
	ctx := context.Background()
	return obj.SysApiAllWithContext(ctx, input, _opt...)
}

// SysApiAllWithContext is client rpc method as defined
func (obj *AdminSys) SysApiAllWithContext(ctx context.Context, input ResultEmpty, _opt ...map[string]string) (output ResSystemApi, err error) {
	var inputMarshal []byte
	inputMarshal, err = proto.Marshal(&input)
	if err != nil {
		return output, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}

	resp := new(requestf.ResponsePacket)

	err = obj.s.Tars_invoke(ctx, 0, "SysApiAll", inputMarshal, _status, _context, resp)
	if err != nil {
		return output, err
	}
	if err = proto.Unmarshal(tools.Int8ToByte(resp.SBuffer), &output); err != nil {
		return output, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range resp.Status {
			_status[k] = v
		}
	}

	return output, nil
}

// SysApiPage is client rpc method as defined
func (obj *AdminSys) SysApiPage(input ReqSystemAPI, _opt ...map[string]string) (output ResSystemApi, err error) {
	ctx := context.Background()
	return obj.SysApiPageWithContext(ctx, input, _opt...)
}

// SysApiPageWithContext is client rpc method as defined
func (obj *AdminSys) SysApiPageWithContext(ctx context.Context, input ReqSystemAPI, _opt ...map[string]string) (output ResSystemApi, err error) {
	var inputMarshal []byte
	inputMarshal, err = proto.Marshal(&input)
	if err != nil {
		return output, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}

	resp := new(requestf.ResponsePacket)

	err = obj.s.Tars_invoke(ctx, 0, "SysApiPage", inputMarshal, _status, _context, resp)
	if err != nil {
		return output, err
	}
	if err = proto.Unmarshal(tools.Int8ToByte(resp.SBuffer), &output); err != nil {
		return output, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range resp.Status {
			_status[k] = v
		}
	}

	return output, nil
}

// SysApiData is client rpc method as defined
func (obj *AdminSys) SysApiData(input SystemApi, _opt ...map[string]string) (output SystemApi, err error) {
	ctx := context.Background()
	return obj.SysApiDataWithContext(ctx, input, _opt...)
}

// SysApiDataWithContext is client rpc method as defined
func (obj *AdminSys) SysApiDataWithContext(ctx context.Context, input SystemApi, _opt ...map[string]string) (output SystemApi, err error) {
	var inputMarshal []byte
	inputMarshal, err = proto.Marshal(&input)
	if err != nil {
		return output, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}

	resp := new(requestf.ResponsePacket)

	err = obj.s.Tars_invoke(ctx, 0, "SysApiData", inputMarshal, _status, _context, resp)
	if err != nil {
		return output, err
	}
	if err = proto.Unmarshal(tools.Int8ToByte(resp.SBuffer), &output); err != nil {
		return output, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range resp.Status {
			_status[k] = v
		}
	}

	return output, nil
}

// SysApiSave is client rpc method as defined
func (obj *AdminSys) SysApiSave(input SystemApi, _opt ...map[string]string) (output SystemApi, err error) {
	ctx := context.Background()
	return obj.SysApiSaveWithContext(ctx, input, _opt...)
}

// SysApiSaveWithContext is client rpc method as defined
func (obj *AdminSys) SysApiSaveWithContext(ctx context.Context, input SystemApi, _opt ...map[string]string) (output SystemApi, err error) {
	var inputMarshal []byte
	inputMarshal, err = proto.Marshal(&input)
	if err != nil {
		return output, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}

	resp := new(requestf.ResponsePacket)

	err = obj.s.Tars_invoke(ctx, 0, "SysApiSave", inputMarshal, _status, _context, resp)
	if err != nil {
		return output, err
	}
	if err = proto.Unmarshal(tools.Int8ToByte(resp.SBuffer), &output); err != nil {
		return output, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range resp.Status {
			_status[k] = v
		}
	}

	return output, nil
}

// SysApiDelete is client rpc method as defined
func (obj *AdminSys) SysApiDelete(input SystemApi, _opt ...map[string]string) (output Result, err error) {
	ctx := context.Background()
	return obj.SysApiDeleteWithContext(ctx, input, _opt...)
}

// SysApiDeleteWithContext is client rpc method as defined
func (obj *AdminSys) SysApiDeleteWithContext(ctx context.Context, input SystemApi, _opt ...map[string]string) (output Result, err error) {
	var inputMarshal []byte
	inputMarshal, err = proto.Marshal(&input)
	if err != nil {
		return output, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}

	resp := new(requestf.ResponsePacket)

	err = obj.s.Tars_invoke(ctx, 0, "SysApiDelete", inputMarshal, _status, _context, resp)
	if err != nil {
		return output, err
	}
	if err = proto.Unmarshal(tools.Int8ToByte(resp.SBuffer), &output); err != nil {
		return output, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range resp.Status {
			_status[k] = v
		}
	}

	return output, nil
}

// SysUpSave is client rpc method as defined
func (obj *AdminSys) SysUpSave(input ReqSystemUp, _opt ...map[string]string) (output SystemUpFile, err error) {
	ctx := context.Background()
	return obj.SysUpSaveWithContext(ctx, input, _opt...)
}

// SysUpSaveWithContext is client rpc method as defined
func (obj *AdminSys) SysUpSaveWithContext(ctx context.Context, input ReqSystemUp, _opt ...map[string]string) (output SystemUpFile, err error) {
	var inputMarshal []byte
	inputMarshal, err = proto.Marshal(&input)
	if err != nil {
		return output, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}

	resp := new(requestf.ResponsePacket)

	err = obj.s.Tars_invoke(ctx, 0, "SysUpSave", inputMarshal, _status, _context, resp)
	if err != nil {
		return output, err
	}
	if err = proto.Unmarshal(tools.Int8ToByte(resp.SBuffer), &output); err != nil {
		return output, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range resp.Status {
			_status[k] = v
		}
	}

	return output, nil
}

// SysVideoData is client rpc method as defined
func (obj *AdminSys) SysVideoData(input ReqId, _opt ...map[string]string) (output SystemUpFile, err error) {
	ctx := context.Background()
	return obj.SysVideoDataWithContext(ctx, input, _opt...)
}

// SysVideoDataWithContext is client rpc method as defined
func (obj *AdminSys) SysVideoDataWithContext(ctx context.Context, input ReqId, _opt ...map[string]string) (output SystemUpFile, err error) {
	var inputMarshal []byte
	inputMarshal, err = proto.Marshal(&input)
	if err != nil {
		return output, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}

	resp := new(requestf.ResponsePacket)

	err = obj.s.Tars_invoke(ctx, 0, "SysVideoData", inputMarshal, _status, _context, resp)
	if err != nil {
		return output, err
	}
	if err = proto.Unmarshal(tools.Int8ToByte(resp.SBuffer), &output); err != nil {
		return output, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range resp.Status {
			_status[k] = v
		}
	}

	return output, nil
}

// SysUpCheck is client rpc method as defined
func (obj *AdminSys) SysUpCheck(input ReqSystemUpCheck, _opt ...map[string]string) (output SystemUpFile, err error) {
	ctx := context.Background()
	return obj.SysUpCheckWithContext(ctx, input, _opt...)
}

// SysUpCheckWithContext is client rpc method as defined
func (obj *AdminSys) SysUpCheckWithContext(ctx context.Context, input ReqSystemUpCheck, _opt ...map[string]string) (output SystemUpFile, err error) {
	var inputMarshal []byte
	inputMarshal, err = proto.Marshal(&input)
	if err != nil {
		return output, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}

	resp := new(requestf.ResponsePacket)

	err = obj.s.Tars_invoke(ctx, 0, "SysUpCheck", inputMarshal, _status, _context, resp)
	if err != nil {
		return output, err
	}
	if err = proto.Unmarshal(tools.Int8ToByte(resp.SBuffer), &output); err != nil {
		return output, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range resp.Status {
			_status[k] = v
		}
	}

	return output, nil
}

// SysUpPage is client rpc method as defined
func (obj *AdminSys) SysUpPage(input ReqSystemUpPage, _opt ...map[string]string) (output ResSystemUpFile, err error) {
	ctx := context.Background()
	return obj.SysUpPageWithContext(ctx, input, _opt...)
}

// SysUpPageWithContext is client rpc method as defined
func (obj *AdminSys) SysUpPageWithContext(ctx context.Context, input ReqSystemUpPage, _opt ...map[string]string) (output ResSystemUpFile, err error) {
	var inputMarshal []byte
	inputMarshal, err = proto.Marshal(&input)
	if err != nil {
		return output, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}

	resp := new(requestf.ResponsePacket)

	err = obj.s.Tars_invoke(ctx, 0, "SysUpPage", inputMarshal, _status, _context, resp)
	if err != nil {
		return output, err
	}
	if err = proto.Unmarshal(tools.Int8ToByte(resp.SBuffer), &output); err != nil {
		return output, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range resp.Status {
			_status[k] = v
		}
	}

	return output, nil
}

// SysUpCommonPage is client rpc method as defined
func (obj *AdminSys) SysUpCommonPage(input ReqSystemUpCommonPage, _opt ...map[string]string) (output ResSystemUpFile, err error) {
	ctx := context.Background()
	return obj.SysUpCommonPageWithContext(ctx, input, _opt...)
}

// SysUpCommonPageWithContext is client rpc method as defined
func (obj *AdminSys) SysUpCommonPageWithContext(ctx context.Context, input ReqSystemUpCommonPage, _opt ...map[string]string) (output ResSystemUpFile, err error) {
	var inputMarshal []byte
	inputMarshal, err = proto.Marshal(&input)
	if err != nil {
		return output, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}

	resp := new(requestf.ResponsePacket)

	err = obj.s.Tars_invoke(ctx, 0, "SysUpCommonPage", inputMarshal, _status, _context, resp)
	if err != nil {
		return output, err
	}
	if err = proto.Unmarshal(tools.Int8ToByte(resp.SBuffer), &output); err != nil {
		return output, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range resp.Status {
			_status[k] = v
		}
	}

	return output, nil
}

// SysUpCommonAdd is client rpc method as defined
func (obj *AdminSys) SysUpCommonAdd(input ReqSystemUpCommon, _opt ...map[string]string) (output Result, err error) {
	ctx := context.Background()
	return obj.SysUpCommonAddWithContext(ctx, input, _opt...)
}

// SysUpCommonAddWithContext is client rpc method as defined
func (obj *AdminSys) SysUpCommonAddWithContext(ctx context.Context, input ReqSystemUpCommon, _opt ...map[string]string) (output Result, err error) {
	var inputMarshal []byte
	inputMarshal, err = proto.Marshal(&input)
	if err != nil {
		return output, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}

	resp := new(requestf.ResponsePacket)

	err = obj.s.Tars_invoke(ctx, 0, "SysUpCommonAdd", inputMarshal, _status, _context, resp)
	if err != nil {
		return output, err
	}
	if err = proto.Unmarshal(tools.Int8ToByte(resp.SBuffer), &output); err != nil {
		return output, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range resp.Status {
			_status[k] = v
		}
	}

	return output, nil
}

// SysUpCommonDel is client rpc method as defined
func (obj *AdminSys) SysUpCommonDel(input ReqId, _opt ...map[string]string) (output Result, err error) {
	ctx := context.Background()
	return obj.SysUpCommonDelWithContext(ctx, input, _opt...)
}

// SysUpCommonDelWithContext is client rpc method as defined
func (obj *AdminSys) SysUpCommonDelWithContext(ctx context.Context, input ReqId, _opt ...map[string]string) (output Result, err error) {
	var inputMarshal []byte
	inputMarshal, err = proto.Marshal(&input)
	if err != nil {
		return output, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}

	resp := new(requestf.ResponsePacket)

	err = obj.s.Tars_invoke(ctx, 0, "SysUpCommonDel", inputMarshal, _status, _context, resp)
	if err != nil {
		return output, err
	}
	if err = proto.Unmarshal(tools.Int8ToByte(resp.SBuffer), &output); err != nil {
		return output, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range resp.Status {
			_status[k] = v
		}
	}

	return output, nil
}

// SysLogPage is client rpc method as defined
func (obj *AdminSys) SysLogPage(input ReqLogPage, _opt ...map[string]string) (output ResSystemLog, err error) {
	ctx := context.Background()
	return obj.SysLogPageWithContext(ctx, input, _opt...)
}

// SysLogPageWithContext is client rpc method as defined
func (obj *AdminSys) SysLogPageWithContext(ctx context.Context, input ReqLogPage, _opt ...map[string]string) (output ResSystemLog, err error) {
	var inputMarshal []byte
	inputMarshal, err = proto.Marshal(&input)
	if err != nil {
		return output, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}

	resp := new(requestf.ResponsePacket)

	err = obj.s.Tars_invoke(ctx, 0, "SysLogPage", inputMarshal, _status, _context, resp)
	if err != nil {
		return output, err
	}
	if err = proto.Unmarshal(tools.Int8ToByte(resp.SBuffer), &output); err != nil {
		return output, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range resp.Status {
			_status[k] = v
		}
	}

	return output, nil
}

// SysConfigPage is client rpc method as defined
func (obj *AdminSys) SysConfigPage(input PageInfo, _opt ...map[string]string) (output ResSysConfig, err error) {
	ctx := context.Background()
	return obj.SysConfigPageWithContext(ctx, input, _opt...)
}

// SysConfigPageWithContext is client rpc method as defined
func (obj *AdminSys) SysConfigPageWithContext(ctx context.Context, input PageInfo, _opt ...map[string]string) (output ResSysConfig, err error) {
	var inputMarshal []byte
	inputMarshal, err = proto.Marshal(&input)
	if err != nil {
		return output, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}

	resp := new(requestf.ResponsePacket)

	err = obj.s.Tars_invoke(ctx, 0, "SysConfigPage", inputMarshal, _status, _context, resp)
	if err != nil {
		return output, err
	}
	if err = proto.Unmarshal(tools.Int8ToByte(resp.SBuffer), &output); err != nil {
		return output, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range resp.Status {
			_status[k] = v
		}
	}

	return output, nil
}

// SysConfigData is client rpc method as defined
func (obj *AdminSys) SysConfigData(input SysConfig, _opt ...map[string]string) (output SysConfig, err error) {
	ctx := context.Background()
	return obj.SysConfigDataWithContext(ctx, input, _opt...)
}

// SysConfigDataWithContext is client rpc method as defined
func (obj *AdminSys) SysConfigDataWithContext(ctx context.Context, input SysConfig, _opt ...map[string]string) (output SysConfig, err error) {
	var inputMarshal []byte
	inputMarshal, err = proto.Marshal(&input)
	if err != nil {
		return output, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}

	resp := new(requestf.ResponsePacket)

	err = obj.s.Tars_invoke(ctx, 0, "SysConfigData", inputMarshal, _status, _context, resp)
	if err != nil {
		return output, err
	}
	if err = proto.Unmarshal(tools.Int8ToByte(resp.SBuffer), &output); err != nil {
		return output, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range resp.Status {
			_status[k] = v
		}
	}

	return output, nil
}

// SysConfigSave is client rpc method as defined
func (obj *AdminSys) SysConfigSave(input SysConfig, _opt ...map[string]string) (output SysConfig, err error) {
	ctx := context.Background()
	return obj.SysConfigSaveWithContext(ctx, input, _opt...)
}

// SysConfigSaveWithContext is client rpc method as defined
func (obj *AdminSys) SysConfigSaveWithContext(ctx context.Context, input SysConfig, _opt ...map[string]string) (output SysConfig, err error) {
	var inputMarshal []byte
	inputMarshal, err = proto.Marshal(&input)
	if err != nil {
		return output, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}

	resp := new(requestf.ResponsePacket)

	err = obj.s.Tars_invoke(ctx, 0, "SysConfigSave", inputMarshal, _status, _context, resp)
	if err != nil {
		return output, err
	}
	if err = proto.Unmarshal(tools.Int8ToByte(resp.SBuffer), &output); err != nil {
		return output, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range resp.Status {
			_status[k] = v
		}
	}

	return output, nil
}

// SysConfigDelete is client rpc method as defined
func (obj *AdminSys) SysConfigDelete(input SysConfig, _opt ...map[string]string) (output Result, err error) {
	ctx := context.Background()
	return obj.SysConfigDeleteWithContext(ctx, input, _opt...)
}

// SysConfigDeleteWithContext is client rpc method as defined
func (obj *AdminSys) SysConfigDeleteWithContext(ctx context.Context, input SysConfig, _opt ...map[string]string) (output Result, err error) {
	var inputMarshal []byte
	inputMarshal, err = proto.Marshal(&input)
	if err != nil {
		return output, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}

	resp := new(requestf.ResponsePacket)

	err = obj.s.Tars_invoke(ctx, 0, "SysConfigDelete", inputMarshal, _status, _context, resp)
	if err != nil {
		return output, err
	}
	if err = proto.Unmarshal(tools.Int8ToByte(resp.SBuffer), &output); err != nil {
		return output, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range resp.Status {
			_status[k] = v
		}
	}

	return output, nil
}

// SysConfigValue is client rpc method as defined
func (obj *AdminSys) SysConfigValue(input ResSysConfigValue, _opt ...map[string]string) (output Result, err error) {
	ctx := context.Background()
	return obj.SysConfigValueWithContext(ctx, input, _opt...)
}

// SysConfigValueWithContext is client rpc method as defined
func (obj *AdminSys) SysConfigValueWithContext(ctx context.Context, input ResSysConfigValue, _opt ...map[string]string) (output Result, err error) {
	var inputMarshal []byte
	inputMarshal, err = proto.Marshal(&input)
	if err != nil {
		return output, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}

	resp := new(requestf.ResponsePacket)

	err = obj.s.Tars_invoke(ctx, 0, "SysConfigValue", inputMarshal, _status, _context, resp)
	if err != nil {
		return output, err
	}
	if err = proto.Unmarshal(tools.Int8ToByte(resp.SBuffer), &output); err != nil {
		return output, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range resp.Status {
			_status[k] = v
		}
	}

	return output, nil
}
