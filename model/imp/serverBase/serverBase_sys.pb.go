// Code generated by protoc-gen-go. DO NOT EDIT.
// source: serverBase_sys.proto

package serverBase

import (
	context "context"
	fmt "fmt"
	tars "github.com/TarsCloud/TarsGo/tars"
	model "github.com/TarsCloud/TarsGo/tars/model"
	requestf "github.com/TarsCloud/TarsGo/tars/protocol/res/requestf"
	current "github.com/TarsCloud/TarsGo/tars/util/current"
	tools "github.com/TarsCloud/TarsGo/tars/util/tools"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type SpaceName struct {
	SpaceName            string   `protobuf:"bytes,1,opt,name=spaceName,proto3" json:"spaceName,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SpaceName) Reset()         { *m = SpaceName{} }
func (m *SpaceName) String() string { return proto.CompactTextString(m) }
func (*SpaceName) ProtoMessage()    {}
func (*SpaceName) Descriptor() ([]byte, []int) {
	return fileDescriptor_57d5917100661671, []int{0}
}

func (m *SpaceName) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SpaceName.Unmarshal(m, b)
}
func (m *SpaceName) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SpaceName.Marshal(b, m, deterministic)
}
func (m *SpaceName) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SpaceName.Merge(m, src)
}
func (m *SpaceName) XXX_Size() int {
	return xxx_messageInfo_SpaceName.Size(m)
}
func (m *SpaceName) XXX_DiscardUnknown() {
	xxx_messageInfo_SpaceName.DiscardUnknown(m)
}

var xxx_messageInfo_SpaceName proto.InternalMessageInfo

func (m *SpaceName) GetSpaceName() string {
	if m != nil {
		return m.SpaceName
	}
	return ""
}

type SpaceNameInst struct {
	SpaceName            string   `protobuf:"bytes,1,opt,name=spaceName,proto3" json:"spaceName,omitempty"`
	Seed                 int64    `protobuf:"varint,2,opt,name=seed,proto3" json:"seed,omitempty"`
	BatchSize            int64    `protobuf:"varint,3,opt,name=batch_size,json=batchSize,proto3" json:"batch_size,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SpaceNameInst) Reset()         { *m = SpaceNameInst{} }
func (m *SpaceNameInst) String() string { return proto.CompactTextString(m) }
func (*SpaceNameInst) ProtoMessage()    {}
func (*SpaceNameInst) Descriptor() ([]byte, []int) {
	return fileDescriptor_57d5917100661671, []int{1}
}

func (m *SpaceNameInst) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SpaceNameInst.Unmarshal(m, b)
}
func (m *SpaceNameInst) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SpaceNameInst.Marshal(b, m, deterministic)
}
func (m *SpaceNameInst) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SpaceNameInst.Merge(m, src)
}
func (m *SpaceNameInst) XXX_Size() int {
	return xxx_messageInfo_SpaceNameInst.Size(m)
}
func (m *SpaceNameInst) XXX_DiscardUnknown() {
	xxx_messageInfo_SpaceNameInst.DiscardUnknown(m)
}

var xxx_messageInfo_SpaceNameInst proto.InternalMessageInfo

func (m *SpaceNameInst) GetSpaceName() string {
	if m != nil {
		return m.SpaceName
	}
	return ""
}

func (m *SpaceNameInst) GetSeed() int64 {
	if m != nil {
		return m.Seed
	}
	return 0
}

func (m *SpaceNameInst) GetBatchSize() int64 {
	if m != nil {
		return m.BatchSize
	}
	return 0
}

type ResultId struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ResultId) Reset()         { *m = ResultId{} }
func (m *ResultId) String() string { return proto.CompactTextString(m) }
func (*ResultId) ProtoMessage()    {}
func (*ResultId) Descriptor() ([]byte, []int) {
	return fileDescriptor_57d5917100661671, []int{2}
}

func (m *ResultId) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResultId.Unmarshal(m, b)
}
func (m *ResultId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResultId.Marshal(b, m, deterministic)
}
func (m *ResultId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResultId.Merge(m, src)
}
func (m *ResultId) XXX_Size() int {
	return xxx_messageInfo_ResultId.Size(m)
}
func (m *ResultId) XXX_DiscardUnknown() {
	xxx_messageInfo_ResultId.DiscardUnknown(m)
}

var xxx_messageInfo_ResultId proto.InternalMessageInfo

func (m *ResultId) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func init() {
	proto.RegisterType((*SpaceName)(nil), "serverBase.spaceName")
	proto.RegisterType((*SpaceNameInst)(nil), "serverBase.spaceNameInst")
	proto.RegisterType((*ResultId)(nil), "serverBase.ResultId")
}

func init() { proto.RegisterFile("serverBase_sys.proto", fileDescriptor_57d5917100661671) }

var fileDescriptor_57d5917100661671 = []byte{
	// 207 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x29, 0x4e, 0x2d, 0x2a,
	0x4b, 0x2d, 0x72, 0x4a, 0x2c, 0x4e, 0x8d, 0x2f, 0xae, 0x2c, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9,
	0x17, 0xe2, 0x42, 0x88, 0x2a, 0x69, 0x72, 0x71, 0x16, 0x17, 0x24, 0x26, 0xa7, 0xfa, 0x25, 0xe6,
	0xa6, 0x0a, 0xc9, 0x20, 0x71, 0x24, 0x18, 0x15, 0x18, 0x35, 0x38, 0x83, 0x10, 0x02, 0x4a, 0x09,
	0x5c, 0xbc, 0x70, 0x8e, 0x67, 0x5e, 0x71, 0x09, 0x7e, 0xe5, 0x42, 0x42, 0x5c, 0x2c, 0xc5, 0xa9,
	0xa9, 0x29, 0x12, 0x4c, 0x0a, 0x8c, 0x1a, 0xcc, 0x41, 0x60, 0xb6, 0x90, 0x2c, 0x17, 0x57, 0x52,
	0x62, 0x49, 0x72, 0x46, 0x7c, 0x71, 0x66, 0x55, 0xaa, 0x04, 0x33, 0x58, 0x86, 0x13, 0x2c, 0x12,
	0x9c, 0x59, 0x95, 0xaa, 0x24, 0xc5, 0xc5, 0x11, 0x94, 0x5a, 0x5c, 0x9a, 0x53, 0xe2, 0x99, 0x22,
	0xc4, 0xc7, 0xc5, 0x94, 0x99, 0x02, 0x36, 0x95, 0x39, 0x88, 0x29, 0x33, 0xc5, 0xa8, 0x8a, 0x8b,
	0xb9, 0xb8, 0xb2, 0x58, 0xc8, 0x9a, 0x8b, 0xcd, 0x33, 0x2f, 0xb3, 0xc4, 0xd3, 0x45, 0x48, 0x52,
	0x0f, 0xe1, 0x0d, 0x3d, 0x14, 0x87, 0x49, 0x89, 0x20, 0x4b, 0xc1, 0x4c, 0x54, 0x62, 0x10, 0x32,
	0xe3, 0x62, 0x75, 0x4f, 0x05, 0xe9, 0x15, 0xc5, 0xaa, 0x17, 0x97, 0xbe, 0x24, 0x36, 0x70, 0xb8,
	0x19, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0x9a, 0xd8, 0x4f, 0x18, 0x4f, 0x01, 0x00, 0x00,
}

// This following code was generated by tarsrpc
// Gernerated from serverBase_sys.proto
type Sys struct {
	s model.Servant
}

//SetServant is required by the servant interface.
func (obj *Sys) SetServant(s model.Servant) {
	obj.s = s
}

//AddServant is required by the servant interface
func (obj *Sys) AddServant(imp impSys, objStr string) {
	tars.AddServant(obj, imp, objStr)
}

////AddServant adds servant  for the service with context
func (obj *Sys) AddServantWithContext(imp impSysWithContext, objStr string) {
	tars.AddServantWithContext(obj, imp, objStr)
}

//TarsSetTimeout is required by the servant interface. t is the timeout in ms.
func (obj *Sys) TarsSetTimeout(t int) {
	obj.s.TarsSetTimeout(t)
}

//TarsSetProtocol is required by the servant interface. t is the protocol.
func (obj *Sys) TarsSetProtocol(p model.Protocol) {
	obj.s.TarsSetProtocol(p)
}

type impSys interface {
	InitID(input SpaceNameInst) (output ResultId, err error)
	GetID(input SpaceName) (output ResultId, err error)
}

type impSysWithContext interface {
	InitID(ctx context.Context, input SpaceNameInst) (output ResultId, err error)
	GetID(ctx context.Context, input SpaceName) (output ResultId, err error)
}

//Dispatch is used to call the user implement of the defined method.
func (obj *Sys) Dispatch(ctx context.Context, val interface{}, req *requestf.RequestPacket, resp *requestf.ResponsePacket, withContext bool) (err error) {
	input := tools.Int8ToByte(req.SBuffer)
	var output []byte
	funcName := req.SFuncName
	switch funcName {

	case "InitID":
		inputDefine := SpaceNameInst{}
		if err = proto.Unmarshal(input, &inputDefine); err != nil {
			return err
		}
		var res ResultId
		if withContext == false {
			imp := val.(impSys)
			res, err = imp.InitID(inputDefine)
			if err != nil {
				return err
			}
		} else {
			imp := val.(impSysWithContext)
			res, err = imp.InitID(ctx, inputDefine)
			if err != nil {
				return err
			}
		}
		output, err = proto.Marshal(&res)
		if err != nil {
			return err
		}

	case "GetID":
		inputDefine := SpaceName{}
		if err = proto.Unmarshal(input, &inputDefine); err != nil {
			return err
		}
		var res ResultId
		if withContext == false {
			imp := val.(impSys)
			res, err = imp.GetID(inputDefine)
			if err != nil {
				return err
			}
		} else {
			imp := val.(impSysWithContext)
			res, err = imp.GetID(ctx, inputDefine)
			if err != nil {
				return err
			}
		}
		output, err = proto.Marshal(&res)
		if err != nil {
			return err
		}

	default:
		return fmt.Errorf("func mismatch")
	}
	var _status map[string]string
	s, ok := current.GetResponseStatus(ctx)
	if ok && s != nil {
		_status = s
	}
	var _context map[string]string
	c, ok := current.GetResponseContext(ctx)
	if ok && c != nil {
		_context = c
	}
	*resp = requestf.ResponsePacket{
		IVersion:     1,
		CPacketType:  0,
		IRequestId:   req.IRequestId,
		IMessageType: 0,
		IRet:         0,
		SBuffer:      tools.ByteToInt8(output),
		Status:       _status,
		SResultDesc:  "",
		Context:      _context,
	}
	return nil
}

// InitID is client rpc method as defined
func (obj *Sys) InitID(input SpaceNameInst, _opt ...map[string]string) (output ResultId, err error) {
	ctx := context.Background()
	return obj.InitIDWithContext(ctx, input, _opt...)
}

// InitIDWithContext is client rpc method as defined
func (obj *Sys) InitIDWithContext(ctx context.Context, input SpaceNameInst, _opt ...map[string]string) (output ResultId, err error) {
	var inputMarshal []byte
	inputMarshal, err = proto.Marshal(&input)
	if err != nil {
		return output, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}

	resp := new(requestf.ResponsePacket)

	err = obj.s.Tars_invoke(ctx, 0, "InitID", inputMarshal, _status, _context, resp)
	if err != nil {
		return output, err
	}
	if err = proto.Unmarshal(tools.Int8ToByte(resp.SBuffer), &output); err != nil {
		return output, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range resp.Status {
			_status[k] = v
		}
	}

	return output, nil
}

// GetID is client rpc method as defined
func (obj *Sys) GetID(input SpaceName, _opt ...map[string]string) (output ResultId, err error) {
	ctx := context.Background()
	return obj.GetIDWithContext(ctx, input, _opt...)
}

// GetIDWithContext is client rpc method as defined
func (obj *Sys) GetIDWithContext(ctx context.Context, input SpaceName, _opt ...map[string]string) (output ResultId, err error) {
	var inputMarshal []byte
	inputMarshal, err = proto.Marshal(&input)
	if err != nil {
		return output, err
	}

	var _status map[string]string
	var _context map[string]string
	if len(_opt) == 1 {
		_context = _opt[0]
	} else if len(_opt) == 2 {
		_context = _opt[0]
		_status = _opt[1]
	}

	resp := new(requestf.ResponsePacket)

	err = obj.s.Tars_invoke(ctx, 0, "GetID", inputMarshal, _status, _context, resp)
	if err != nil {
		return output, err
	}
	if err = proto.Unmarshal(tools.Int8ToByte(resp.SBuffer), &output); err != nil {
		return output, err
	}

	if len(_opt) == 1 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
	} else if len(_opt) == 2 {
		for k := range _context {
			delete(_context, k)
		}
		for k, v := range resp.Context {
			_context[k] = v
		}
		for k := range _status {
			delete(_status, k)
		}
		for k, v := range resp.Status {
			_status[k] = v
		}
	}

	return output, nil
}
